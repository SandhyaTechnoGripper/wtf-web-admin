{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nisha\\\\OneDrive\\\\Desktop\\\\technogrip\\\\src\\\\app\\\\modules\\\\GoogleMaterialExamples\\\\inputs\\\\CheckboxesExamplesPage.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable no-restricted-imports */\nimport React from \"react\";\nimport { Checkbox, FormControlLabel, FormControl, FormLabel, FormGroup, FormHelperText } from \"@material-ui/core\";\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\nimport Favorite from \"@material-ui/icons/Favorite\";\nimport FavoriteBorder from \"@material-ui/icons/FavoriteBorder\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { green } from \"@material-ui/core/colors\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Notice, KTCodeExample } from \"../../../../_metronic/_partials/controls\"; // Example 2\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GreenCheckbox = withStyles({\n  root: {\n    color: green[400],\n    \"&$checked\": {\n      color: green[600]\n    }\n  },\n  checked: {}\n})(props => /*#__PURE__*/_jsxDEV(Checkbox, {\n  color: \"default\",\n  ...props\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 30,\n  columnNumber: 13\n}, this));\nexport default function CheckboxesExamplesPage() {\n  _s();\n\n  const [state, setState] = React.useState({\n    checkedA: true,\n    checkedB: true,\n    checkedF: true,\n    checkedG: true,\n    gilad: true,\n    jason: false,\n    antoine: false\n  });\n\n  const handleChange = name => event => {\n    setState({ ...state,\n      [name]: event.target.checked\n    });\n  }; // Example 3\n\n\n  const useStyles = makeStyles(theme => ({\n    root: {\n      display: \"flex\"\n    },\n    formControl: {\n      margin: theme.spacing(3)\n    }\n  }));\n  const classes = useStyles();\n\n  const handleChange3 = name => event => {\n    setState({ ...state,\n      [name]: event.target.checked\n    });\n  };\n\n  const {\n    gilad,\n    jason,\n    antoine\n  } = state;\n  const error = [gilad, jason, antoine].filter(v => v).length !== 2; // Example 4\n\n  const [value, setValue] = React.useState(\"female\");\n\n  function handleChange4(event) {\n    setValue(event.target.value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Notice, {\n      icon: \"flaticon-warning font-primary\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Checkboxes allow the user to select one or more items from a set.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"Checkboxes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), \" can be used to turn an option on or off.\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"For more info please check the components's official\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          className: \"font-weight-bold\",\n          rel: \"noopener noreferrer\",\n          href: \"https://material-ui.com/components/checkboxes/\",\n          children: \"demos & documentation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-6\",\n        children: [/*#__PURE__*/_jsxDEV(KTCodeExample, {\n          jsCode: jsCode3,\n          beforeCodeTitle: \"Checkboxes\",\n          codeBlockHeight: \"400px\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"If you have multiple options appearing in a list, you can preserve space by using checkboxes instead of on/off switches. If you have a single option, avoid using a checkbox and use an on/off switch instead.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"separator separator-dashed my-7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: state.checkedA,\n              onChange: handleChange(\"checkedA\"),\n              value: \"checkedA\",\n              inputProps: {\n                \"aria-label\": \"primary checkbox\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: state.checkedB,\n              onChange: handleChange(\"checkedB\"),\n              value: \"checkedB\",\n              color: \"primary\",\n              inputProps: {\n                \"aria-label\": \"secondary checkbox\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n              value: \"checkedC\",\n              inputProps: {\n                \"aria-label\": \"uncontrolled-checkbox\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n              disabled: true,\n              value: \"checkedD\",\n              inputProps: {\n                \"aria-label\": \"disabled checkbox\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n              disabled: true,\n              checked: true,\n              value: \"checkedE\",\n              inputProps: {\n                \"aria-label\": \"disabled checked checkbox\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: state.checkedF,\n              onChange: handleChange(\"checkedF\"),\n              value: \"checkedF\",\n              indeterminate: true,\n              inputProps: {\n                \"aria-label\": \"indeterminate checkbox\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n              defaultChecked: true,\n              color: \"default\",\n              value: \"checkedG\",\n              inputProps: {\n                \"aria-label\": \"checkbox with default color\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(KTCodeExample, {\n          jsCode: jsCode1,\n          beforeCodeTitle: \"Checkboxes with FormGroup\",\n          codeBlockHeight: \"400px\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"FormGroup\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 15\n            }, this), \" is a helpful wrapper used to group selection controls components that provides an easier API.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"separator separator-dashed my-7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.root,\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              component: \"fieldset\",\n              className: classes.formControl,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                component: \"legend\",\n                children: \"Assign responsibility\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: gilad,\n                    onChange: handleChange3(\"gilad\"),\n                    value: \"gilad\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 180,\n                    columnNumber: 23\n                  }, this),\n                  label: \"Gilad Gray\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: jason,\n                    onChange: handleChange3(\"jason\"),\n                    value: \"jason\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 190,\n                    columnNumber: 23\n                  }, this),\n                  label: \"Jason Killian\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: antoine,\n                    onChange: handleChange3(\"antoine\"),\n                    value: \"antoine\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 200,\n                    columnNumber: 23\n                  }, this),\n                  label: \"Antoine Llorca\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 198,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n                children: \"Be careful\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              required: true,\n              error: error,\n              component: \"fieldset\",\n              className: classes.formControl,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                component: \"legend\",\n                children: \"Pick two\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: gilad,\n                    onChange: handleChange3(\"gilad\"),\n                    value: \"gilad\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 221,\n                    columnNumber: 23\n                  }, this),\n                  label: \"Gilad Gray\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 219,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: jason,\n                    onChange: handleChange3(\"jason\"),\n                    value: \"jason\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 231,\n                    columnNumber: 23\n                  }, this),\n                  label: \"Jason Killian\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: antoine,\n                    onChange: handleChange3(\"antoine\"),\n                    value: \"antoine\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 241,\n                    columnNumber: 23\n                  }, this),\n                  label: \"Antoine Lorca\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n                children: \"You can display an error\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-6\",\n        children: [/*#__PURE__*/_jsxDEV(KTCodeExample, {\n          jsCode: jsCode4,\n          beforeCodeTitle: \"Form Control Label\",\n          codeBlockHeight: \"400px\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"Checkbox\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 15\n            }, this), \" can also be used with a label description thanks to the \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"FormControlLabel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 29\n            }, this), \" component.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"separator separator-dashed my-7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            row: true,\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                checked: state.checkedA,\n                onChange: handleChange(\"checkedA\"),\n                value: \"checkedA\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 19\n              }, this),\n              label: \"Secondary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                checked: state.checkedB,\n                onChange: handleChange(\"checkedB\"),\n                value: \"checkedB\",\n                color: \"primary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 19\n              }, this),\n              label: \"Primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                value: \"checkedC\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 26\n              }, this),\n              label: \"Uncontrolled\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              disabled: true,\n              control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                value: \"checkedD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 26\n              }, this),\n              label: \"Disabled\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              disabled: true,\n              control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                checked: true,\n                value: \"checkedE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 26\n              }, this),\n              label: \"Disabled\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                checked: state.checkedF,\n                onChange: handleChange(\"checkedF\"),\n                value: \"checkedF\",\n                indeterminate: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 304,\n                columnNumber: 19\n              }, this),\n              label: \"Indeterminate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(GreenCheckbox, {\n                checked: state.checkedG,\n                onChange: handleChange(\"checkedG\"),\n                value: \"checkedG\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 19\n              }, this),\n              label: \"Custom color\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                icon: /*#__PURE__*/_jsxDEV(FavoriteBorder, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 326,\n                  columnNumber: 27\n                }, this),\n                checkedIcon: /*#__PURE__*/_jsxDEV(Favorite, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 327,\n                  columnNumber: 34\n                }, this),\n                value: \"checkedH\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 19\n              }, this),\n              label: \"Custom icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                icon: /*#__PURE__*/_jsxDEV(CheckBoxOutlineBlankIcon, {\n                  fontSize: \"small\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 336,\n                  columnNumber: 27\n                }, this),\n                checkedIcon: /*#__PURE__*/_jsxDEV(CheckBoxIcon, {\n                  fontSize: \"small\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 337,\n                  columnNumber: 34\n                }, this),\n                value: \"checkedI\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 19\n              }, this),\n              label: \"Custom size\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(KTCodeExample, {\n          jsCode: jsCode2,\n          beforeCodeTitle: \"Label placement\",\n          codeBlockHeight: \"400px\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"You can change the placement of the label:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"separator separator-dashed my-7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            component: \"fieldset\",\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              component: \"legend\",\n              children: \"labelPlacement\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              \"aria-label\": \"position\",\n              name: \"position\",\n              value: value,\n              onChange: handleChange,\n              row: true,\n              children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n                value: \"top\",\n                control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  color: \"primary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 363,\n                  columnNumber: 28\n                }, this),\n                label: \"Top\",\n                labelPlacement: \"top\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                value: \"start\",\n                control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  color: \"primary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 369,\n                  columnNumber: 28\n                }, this),\n                label: \"Start\",\n                labelPlacement: \"start\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                value: \"bottom\",\n                control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  color: \"primary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 375,\n                  columnNumber: 28\n                }, this),\n                label: \"Bottom\",\n                labelPlacement: \"bottom\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                value: \"end\",\n                control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  color: \"primary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 28\n                }, this),\n                label: \"End\",\n                labelPlacement: \"end\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CheckboxesExamplesPage, \"daPKzO7W3Xfx+Vs0IKbAPe1IyW4=\", true);\n\n_c = CheckboxesExamplesPage;\nconst jsCode1 = `\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  formControl: {\n    margin: theme.spacing(3),\n  },\n}));\n\nexport default function CheckboxesGroup() {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    gilad: true,\n    jason: false,\n    antoine: false,\n  });\n\n  const handleChange = name => event => {\n    setState({ ...state, [name]: event.target.checked });\n  };\n\n  const { gilad, jason, antoine } = state;\n  const error = [gilad, jason, antoine].filter(v => v).length !== 2;\n\n  return (\n    <div className={classes.root}>\n      <FormControl component=\"fieldset\" className={classes.formControl}>\n        <FormLabel component=\"legend\">Assign responsibility</FormLabel>\n        <FormGroup>\n          <FormControlLabel\n            control={<Checkbox checked={gilad} onChange={handleChange('gilad')} value=\"gilad\" />}\n            label=\"Gilad Gray\"\n          />\n          <FormControlLabel\n            control={<Checkbox checked={jason} onChange={handleChange('jason')} value=\"jason\" />}\n            label=\"Jason Killian\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox checked={antoine} onChange={handleChange('antoine')} value=\"antoine\" />\n            }\n            label=\"Antoine Llorca\"\n          />\n        </FormGroup>\n        <FormHelperText>Be careful</FormHelperText>\n      </FormControl>\n      <FormControl required error={error} component=\"fieldset\" className={classes.formControl}>\n        <FormLabel component=\"legend\">Pick two</FormLabel>\n        <FormGroup>\n          <FormControlLabel\n            control={<Checkbox checked={gilad} onChange={handleChange('gilad')} value=\"gilad\" />}\n            label=\"Gilad Gray\"\n          />\n          <FormControlLabel\n            control={<Checkbox checked={jason} onChange={handleChange('jason')} value=\"jason\" />}\n            label=\"Jason Killian\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox checked={antoine} onChange={handleChange('antoine')} value=\"antoine\" />\n            }\n            label=\"Antoine Llorca\"\n          />\n        </FormGroup>\n        <FormHelperText>You can display an error</FormHelperText>\n      </FormControl>\n    </div>\n  );\n}\n`;\nconst jsCode2 = `\nimport React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nfunction FormControlLabelPosition() {\n  const [value, setValue] = React.useState('female');\n\n  function handleChange(event) {\n    setValue(event.target.value);\n  }\n\n  return (\n    <FormControl component=\"fieldset\">\n      <FormLabel component=\"legend\">labelPlacement</FormLabel>\n      <FormGroup aria-label=\"position\" name=\"position\" value={value} onChange={handleChange} row>\n        <FormControlLabel\n          value=\"top\"\n          control={<Checkbox color=\"primary\" />}\n          label=\"Top\"\n          labelPlacement=\"top\"\n        />\n        <FormControlLabel\n          value=\"start\"\n          control={<Checkbox color=\"primary\" />}\n          label=\"Start\"\n          labelPlacement=\"start\"\n        />\n        <FormControlLabel\n          value=\"bottom\"\n          control={<Checkbox color=\"primary\" />}\n          label=\"Bottom\"\n          labelPlacement=\"bottom\"\n        />\n        <FormControlLabel\n          value=\"end\"\n          control={<Checkbox color=\"primary\" />}\n          label=\"End\"\n          labelPlacement=\"end\"\n        />\n      </FormGroup>\n    </FormControl>\n  );\n}\n\nexport default FormControlLabelPosition;\n`;\nconst jsCode3 = `\nimport React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nexport default function Checkboxes() {\n  const [state, setState] = React.useState({\n    checkedA: true,\n    checkedB: true,\n    checkedF: true,\n  });\n\n  const handleChange = name => event => {\n    setState({ ...state, [name]: event.target.checked });\n  };\n\n  return (\n    <div>\n      <Checkbox\n        checked={state.checkedA}\n        onChange={handleChange('checkedA')}\n        value=\"checkedA\"\n        inputProps={{\n          'aria-label': 'primary checkbox',\n        }}\n      />\n      <Checkbox\n        checked={state.checkedB}\n        onChange={handleChange('checkedB')}\n        value=\"checkedB\"\n        color=\"primary\"\n        inputProps={{\n          'aria-label': 'secondary checkbox',\n        }}\n      />\n      <Checkbox\n        value=\"checkedC\"\n        inputProps={{\n          'aria-label': 'uncontrolled-checkbox',\n        }}\n      />\n      <Checkbox\n        disabled\n        value=\"checkedD\"\n        inputProps={{\n          'aria-label': 'disabled checkbox',\n        }}\n      />\n      <Checkbox\n        disabled\n        checked\n        value=\"checkedE\"\n        inputProps={{\n          'aria-label': 'disabled checked checkbox',\n        }}\n      />\n      <Checkbox\n        checked={state.checkedF}\n        onChange={handleChange('checkedF')}\n        value=\"checkedF\"\n        indeterminate\n        inputProps={{\n          'aria-label': 'indeterminate checkbox',\n        }}\n      />\n      <Checkbox\n        defaultChecked\n        color=\"default\"\n        value=\"checkedG\"\n        inputProps={{\n          'aria-label': 'checkbox with default color',\n        }}\n      />\n    </div>\n  );\n}\n`;\nconst jsCode4 = `\nimport React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport Favorite from '@material-ui/icons/Favorite';\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\n\nconst GreenCheckbox = withStyles({\n  root: {\n    color: green[400],\n    '&$checked': {\n      color: green[600],\n    },\n  },\n  checked: {},\n})(props => <Checkbox color=\"default\" {...props} />);\n\nexport default function CheckboxLabels() {\n  const [state, setState] = React.useState({\n    checkedA: true,\n    checkedB: true,\n    checkedF: true,\n    checkedG: true,\n  });\n\n  const handleChange = name => event => {\n    setState({ ...state, [name]: event.target.checked });\n  };\n\n  return (\n    <FormGroup row>\n      <FormControlLabel\n        control={\n          <Checkbox checked={state.checkedA} onChange={handleChange('checkedA')} value=\"checkedA\" />\n        }\n        label=\"Secondary\"\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={state.checkedB}\n            onChange={handleChange('checkedB')}\n            value=\"checkedB\"\n            color=\"primary\"\n          />\n        }\n        label=\"Primary\"\n      />\n      <FormControlLabel control={<Checkbox value=\"checkedC\" />} label=\"Uncontrolled\" />\n      <FormControlLabel disabled control={<Checkbox value=\"checkedD\" />} label=\"Disabled\" />\n      <FormControlLabel disabled control={<Checkbox checked value=\"checkedE\" />} label=\"Disabled\" />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={state.checkedF}\n            onChange={handleChange('checkedF')}\n            value=\"checkedF\"\n            indeterminate\n          />\n        }\n        label=\"Indeterminate\"\n      />\n      <FormControlLabel\n        control={\n          <GreenCheckbox\n            checked={state.checkedG}\n            onChange={handleChange('checkedG')}\n            value=\"checkedG\"\n          />\n        }\n        label=\"Custom color\"\n      />\n      <FormControlLabel\n        control={<Checkbox icon={<FavoriteBorder />} checkedIcon={<Favorite />} value=\"checkedH\" />}\n        label=\"Custom icon\"\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            icon={<CheckBoxOutlineBlankIcon fontSize=\"small\" />}\n            checkedIcon={<CheckBoxIcon fontSize=\"small\" />}\n            value=\"checkedI\"\n          />\n        }\n        label=\"Custom size\"\n      />\n    </FormGroup>\n  );\n}\n`;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckboxesExamplesPage\");","map":{"version":3,"sources":["C:/Users/nisha/OneDrive/Desktop/technogrip/src/app/modules/GoogleMaterialExamples/inputs/CheckboxesExamplesPage.js"],"names":["React","Checkbox","FormControlLabel","FormControl","FormLabel","FormGroup","FormHelperText","CheckBoxOutlineBlankIcon","CheckBoxIcon","Favorite","FavoriteBorder","withStyles","green","makeStyles","Notice","KTCodeExample","GreenCheckbox","root","color","checked","props","CheckboxesExamplesPage","state","setState","useState","checkedA","checkedB","checkedF","checkedG","gilad","jason","antoine","handleChange","name","event","target","useStyles","theme","display","formControl","margin","spacing","classes","handleChange3","error","filter","v","length","value","setValue","handleChange4","jsCode3","jsCode1","jsCode4","jsCode2"],"mappings":"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AAEE,gBAAA,OAAO,eAAE,QAAC,QAAD;AAAU,kBAAA,KAAK,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,wBAFX;AAGE,gBAAA,KAAK,EAAC,QAHR;AAIE,gBAAA,cAAc,EAAC;AAJjB;AAAA;AAAA;AAAA;AAAA,sBAnBF,eAyBE,QAAC,gBAAD;AACE,gBAAA,KAAK,EAAC,KADR;AAEE,gBAAA,OAAO,eAAE,QAAC,QAAD;AAAU,kBAAA,KAAK,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,wBAFX;AAGE,gBAAA,KAAK,EAAC,KAHR;AAIE,gBAAA,cAAc,EAAC;AAJjB;AAAA;AAAA;AAAA;AAAA,sBAzBF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,gBA1FF;AAAA;AAAA;AAAA;AAAA;AAAA,cApKF;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBF;AAAA,kBADF;AAiUD;;GAxWuBX,sB;;KAAAA,sB;AA0WxB,MAAM+B,OAAO,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA/EA;AAgFA,MAAME,OAAO,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjDA;AAkDA,MAAMH,OAAO,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA3EA;AA4EA,MAAME,OAAO,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA9FA","sourcesContent":["/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-restricted-imports */\r\nimport React from \"react\";\r\nimport {\r\n  Checkbox,\r\n  FormControlLabel,\r\n  FormControl,\r\n  FormLabel,\r\n  FormGroup,\r\n  FormHelperText\r\n} from \"@material-ui/core\";\r\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\r\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\r\nimport Favorite from \"@material-ui/icons/Favorite\";\r\nimport FavoriteBorder from \"@material-ui/icons/FavoriteBorder\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\nimport {green} from \"@material-ui/core/colors\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Notice, KTCodeExample} from \"../../../../_metronic/_partials/controls\";\r\n\r\n// Example 2\r\nconst GreenCheckbox = withStyles({\r\n  root: {\r\n    color: green[400],\r\n    \"&$checked\": {\r\n      color: green[600]\r\n    }\r\n  },\r\n  checked: {}\r\n})(props => <Checkbox color=\"default\" {...props} />);\r\n\r\nexport default function CheckboxesExamplesPage() {\r\n  const [state, setState] = React.useState({\r\n    checkedA: true,\r\n    checkedB: true,\r\n    checkedF: true,\r\n    checkedG: true,\r\n    gilad: true,\r\n    jason: false,\r\n    antoine: false\r\n  });\r\n\r\n  const handleChange = name => event => {\r\n    setState({ ...state, [name]: event.target.checked });\r\n  };\r\n\r\n  // Example 3\r\n  const useStyles = makeStyles(theme => ({\r\n    root: {\r\n      display: \"flex\"\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(3)\r\n    }\r\n  }));\r\n\r\n  const classes = useStyles();\r\n  const handleChange3 = name => event => {\r\n    setState({ ...state, [name]: event.target.checked });\r\n  };\r\n  const { gilad, jason, antoine } = state;\r\n  const error = [gilad, jason, antoine].filter(v => v).length !== 2;\r\n\r\n  // Example 4\r\n  const [value, setValue] = React.useState(\"female\");\r\n\r\n  function handleChange4(event) {\r\n    setValue(event.target.value);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Notice icon=\"flaticon-warning font-primary\">\r\n        <span>\r\n          Checkboxes allow the user to select one or more items from a set.\r\n        </span>{\" \"}\r\n        <code>Checkboxes</code> can be used to turn an option on or off.{\" \"}\r\n        <span>\r\n          For more info please check the components's official{\" \"}\r\n          <a\r\n            target=\"_blank\"\r\n            className=\"font-weight-bold\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://material-ui.com/components/checkboxes/\"\r\n          >\r\n            demos & documentation\r\n          </a>\r\n        </span>\r\n      </Notice>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <KTCodeExample\r\n            jsCode={jsCode3}\r\n            beforeCodeTitle=\"Checkboxes\"\r\n            codeBlockHeight=\"400px\"\r\n          >\r\n            <span>\r\n              If you have multiple options appearing in a list, you can preserve\r\n              space by using checkboxes instead of on/off switches. If you have\r\n              a single option, avoid using a checkbox and use an on/off switch\r\n              instead.\r\n            </span>\r\n            <div className=\"separator separator-dashed my-7\" />\r\n            <div>\r\n              <Checkbox\r\n                checked={state.checkedA}\r\n                onChange={handleChange(\"checkedA\")}\r\n                value=\"checkedA\"\r\n                inputProps={{\r\n                  \"aria-label\": \"primary checkbox\"\r\n                }}\r\n              />\r\n              <Checkbox\r\n                checked={state.checkedB}\r\n                onChange={handleChange(\"checkedB\")}\r\n                value=\"checkedB\"\r\n                color=\"primary\"\r\n                inputProps={{\r\n                  \"aria-label\": \"secondary checkbox\"\r\n                }}\r\n              />\r\n              <Checkbox\r\n                value=\"checkedC\"\r\n                inputProps={{\r\n                  \"aria-label\": \"uncontrolled-checkbox\"\r\n                }}\r\n              />\r\n              <Checkbox\r\n                disabled\r\n                value=\"checkedD\"\r\n                inputProps={{\r\n                  \"aria-label\": \"disabled checkbox\"\r\n                }}\r\n              />\r\n              <Checkbox\r\n                disabled\r\n                checked\r\n                value=\"checkedE\"\r\n                inputProps={{\r\n                  \"aria-label\": \"disabled checked checkbox\"\r\n                }}\r\n              />\r\n              <Checkbox\r\n                checked={state.checkedF}\r\n                onChange={handleChange(\"checkedF\")}\r\n                value=\"checkedF\"\r\n                indeterminate\r\n                inputProps={{\r\n                  \"aria-label\": \"indeterminate checkbox\"\r\n                }}\r\n              />\r\n              <Checkbox\r\n                defaultChecked\r\n                color=\"default\"\r\n                value=\"checkedG\"\r\n                inputProps={{\r\n                  \"aria-label\": \"checkbox with default color\"\r\n                }}\r\n              />\r\n            </div>\r\n          </KTCodeExample>\r\n\r\n          <KTCodeExample\r\n            jsCode={jsCode1}\r\n            beforeCodeTitle=\"Checkboxes with FormGroup\"\r\n            codeBlockHeight=\"400px\"\r\n          >\r\n            <span>\r\n              <code>FormGroup</code> is a helpful wrapper used to group\r\n              selection controls components that provides an easier API.\r\n            </span>\r\n            <div className=\"separator separator-dashed my-7\" />\r\n            <div className={classes.root}>\r\n              <FormControl component=\"fieldset\" className={classes.formControl}>\r\n                <FormLabel component=\"legend\">Assign responsibility</FormLabel>\r\n                <FormGroup>\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        checked={gilad}\r\n                        onChange={handleChange3(\"gilad\")}\r\n                        value=\"gilad\"\r\n                      />\r\n                    }\r\n                    label=\"Gilad Gray\"\r\n                  />\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        checked={jason}\r\n                        onChange={handleChange3(\"jason\")}\r\n                        value=\"jason\"\r\n                      />\r\n                    }\r\n                    label=\"Jason Killian\"\r\n                  />\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        checked={antoine}\r\n                        onChange={handleChange3(\"antoine\")}\r\n                        value=\"antoine\"\r\n                      />\r\n                    }\r\n                    label=\"Antoine Llorca\"\r\n                  />\r\n                </FormGroup>\r\n                <FormHelperText>Be careful</FormHelperText>\r\n              </FormControl>\r\n              <FormControl\r\n                required\r\n                error={error}\r\n                component=\"fieldset\"\r\n                className={classes.formControl}\r\n              >\r\n                <FormLabel component=\"legend\">Pick two</FormLabel>\r\n                <FormGroup>\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        checked={gilad}\r\n                        onChange={handleChange3(\"gilad\")}\r\n                        value=\"gilad\"\r\n                      />\r\n                    }\r\n                    label=\"Gilad Gray\"\r\n                  />\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        checked={jason}\r\n                        onChange={handleChange3(\"jason\")}\r\n                        value=\"jason\"\r\n                      />\r\n                    }\r\n                    label=\"Jason Killian\"\r\n                  />\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        checked={antoine}\r\n                        onChange={handleChange3(\"antoine\")}\r\n                        value=\"antoine\"\r\n                      />\r\n                    }\r\n                    label=\"Antoine Lorca\"\r\n                  />\r\n                </FormGroup>\r\n                <FormHelperText>You can display an error</FormHelperText>\r\n              </FormControl>\r\n            </div>\r\n          </KTCodeExample>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <KTCodeExample\r\n            jsCode={jsCode4}\r\n            beforeCodeTitle=\"Form Control Label\"\r\n            codeBlockHeight=\"400px\"\r\n          >\r\n            <span>\r\n              <code>Checkbox</code> can also be used with a label description\r\n              thanks to the <code>FormControlLabel</code> component.\r\n            </span>\r\n            <div className=\"separator separator-dashed my-7\" />\r\n            <FormGroup row>\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={state.checkedA}\r\n                    onChange={handleChange(\"checkedA\")}\r\n                    value=\"checkedA\"\r\n                  />\r\n                }\r\n                label=\"Secondary\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={state.checkedB}\r\n                    onChange={handleChange(\"checkedB\")}\r\n                    value=\"checkedB\"\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"Primary\"\r\n              />\r\n              <FormControlLabel\r\n                control={<Checkbox value=\"checkedC\" />}\r\n                label=\"Uncontrolled\"\r\n              />\r\n              <FormControlLabel\r\n                disabled\r\n                control={<Checkbox value=\"checkedD\" />}\r\n                label=\"Disabled\"\r\n              />\r\n              <FormControlLabel\r\n                disabled\r\n                control={<Checkbox checked value=\"checkedE\" />}\r\n                label=\"Disabled\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={state.checkedF}\r\n                    onChange={handleChange(\"checkedF\")}\r\n                    value=\"checkedF\"\r\n                    indeterminate\r\n                  />\r\n                }\r\n                label=\"Indeterminate\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <GreenCheckbox\r\n                    checked={state.checkedG}\r\n                    onChange={handleChange(\"checkedG\")}\r\n                    value=\"checkedG\"\r\n                  />\r\n                }\r\n                label=\"Custom color\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    icon={<FavoriteBorder />}\r\n                    checkedIcon={<Favorite />}\r\n                    value=\"checkedH\"\r\n                  />\r\n                }\r\n                label=\"Custom icon\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    icon={<CheckBoxOutlineBlankIcon fontSize=\"small\" />}\r\n                    checkedIcon={<CheckBoxIcon fontSize=\"small\" />}\r\n                    value=\"checkedI\"\r\n                  />\r\n                }\r\n                label=\"Custom size\"\r\n              />\r\n            </FormGroup>\r\n          </KTCodeExample>\r\n          <KTCodeExample\r\n            jsCode={jsCode2}\r\n            beforeCodeTitle=\"Label placement\"\r\n            codeBlockHeight=\"400px\"\r\n          >\r\n            <span>You can change the placement of the label:</span>\r\n            <div className=\"separator separator-dashed my-7\" />\r\n            <FormControl component=\"fieldset\">\r\n              <FormLabel component=\"legend\">labelPlacement</FormLabel>\r\n              <FormGroup\r\n                aria-label=\"position\"\r\n                name=\"position\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                row\r\n              >\r\n                <FormControlLabel\r\n                  value=\"top\"\r\n                  control={<Checkbox color=\"primary\" />}\r\n                  label=\"Top\"\r\n                  labelPlacement=\"top\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"start\"\r\n                  control={<Checkbox color=\"primary\" />}\r\n                  label=\"Start\"\r\n                  labelPlacement=\"start\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"bottom\"\r\n                  control={<Checkbox color=\"primary\" />}\r\n                  label=\"Bottom\"\r\n                  labelPlacement=\"bottom\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"end\"\r\n                  control={<Checkbox color=\"primary\" />}\r\n                  label=\"End\"\r\n                  labelPlacement=\"end\"\r\n                />\r\n              </FormGroup>\r\n            </FormControl>\r\n          </KTCodeExample>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst jsCode1 = `\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function CheckboxesGroup() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({\r\n    gilad: true,\r\n    jason: false,\r\n    antoine: false,\r\n  });\r\n\r\n  const handleChange = name => event => {\r\n    setState({ ...state, [name]: event.target.checked });\r\n  };\r\n\r\n  const { gilad, jason, antoine } = state;\r\n  const error = [gilad, jason, antoine].filter(v => v).length !== 2;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <FormControl component=\"fieldset\" className={classes.formControl}>\r\n        <FormLabel component=\"legend\">Assign responsibility</FormLabel>\r\n        <FormGroup>\r\n          <FormControlLabel\r\n            control={<Checkbox checked={gilad} onChange={handleChange('gilad')} value=\"gilad\" />}\r\n            label=\"Gilad Gray\"\r\n          />\r\n          <FormControlLabel\r\n            control={<Checkbox checked={jason} onChange={handleChange('jason')} value=\"jason\" />}\r\n            label=\"Jason Killian\"\r\n          />\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox checked={antoine} onChange={handleChange('antoine')} value=\"antoine\" />\r\n            }\r\n            label=\"Antoine Llorca\"\r\n          />\r\n        </FormGroup>\r\n        <FormHelperText>Be careful</FormHelperText>\r\n      </FormControl>\r\n      <FormControl required error={error} component=\"fieldset\" className={classes.formControl}>\r\n        <FormLabel component=\"legend\">Pick two</FormLabel>\r\n        <FormGroup>\r\n          <FormControlLabel\r\n            control={<Checkbox checked={gilad} onChange={handleChange('gilad')} value=\"gilad\" />}\r\n            label=\"Gilad Gray\"\r\n          />\r\n          <FormControlLabel\r\n            control={<Checkbox checked={jason} onChange={handleChange('jason')} value=\"jason\" />}\r\n            label=\"Jason Killian\"\r\n          />\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox checked={antoine} onChange={handleChange('antoine')} value=\"antoine\" />\r\n            }\r\n            label=\"Antoine Llorca\"\r\n          />\r\n        </FormGroup>\r\n        <FormHelperText>You can display an error</FormHelperText>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n`;\r\nconst jsCode2 = `\r\nimport React from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\n\r\nfunction FormControlLabelPosition() {\r\n  const [value, setValue] = React.useState('female');\r\n\r\n  function handleChange(event) {\r\n    setValue(event.target.value);\r\n  }\r\n\r\n  return (\r\n    <FormControl component=\"fieldset\">\r\n      <FormLabel component=\"legend\">labelPlacement</FormLabel>\r\n      <FormGroup aria-label=\"position\" name=\"position\" value={value} onChange={handleChange} row>\r\n        <FormControlLabel\r\n          value=\"top\"\r\n          control={<Checkbox color=\"primary\" />}\r\n          label=\"Top\"\r\n          labelPlacement=\"top\"\r\n        />\r\n        <FormControlLabel\r\n          value=\"start\"\r\n          control={<Checkbox color=\"primary\" />}\r\n          label=\"Start\"\r\n          labelPlacement=\"start\"\r\n        />\r\n        <FormControlLabel\r\n          value=\"bottom\"\r\n          control={<Checkbox color=\"primary\" />}\r\n          label=\"Bottom\"\r\n          labelPlacement=\"bottom\"\r\n        />\r\n        <FormControlLabel\r\n          value=\"end\"\r\n          control={<Checkbox color=\"primary\" />}\r\n          label=\"End\"\r\n          labelPlacement=\"end\"\r\n        />\r\n      </FormGroup>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nexport default FormControlLabelPosition;\r\n`;\r\nconst jsCode3 = `\r\nimport React from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nexport default function Checkboxes() {\r\n  const [state, setState] = React.useState({\r\n    checkedA: true,\r\n    checkedB: true,\r\n    checkedF: true,\r\n  });\r\n\r\n  const handleChange = name => event => {\r\n    setState({ ...state, [name]: event.target.checked });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Checkbox\r\n        checked={state.checkedA}\r\n        onChange={handleChange('checkedA')}\r\n        value=\"checkedA\"\r\n        inputProps={{\r\n          'aria-label': 'primary checkbox',\r\n        }}\r\n      />\r\n      <Checkbox\r\n        checked={state.checkedB}\r\n        onChange={handleChange('checkedB')}\r\n        value=\"checkedB\"\r\n        color=\"primary\"\r\n        inputProps={{\r\n          'aria-label': 'secondary checkbox',\r\n        }}\r\n      />\r\n      <Checkbox\r\n        value=\"checkedC\"\r\n        inputProps={{\r\n          'aria-label': 'uncontrolled-checkbox',\r\n        }}\r\n      />\r\n      <Checkbox\r\n        disabled\r\n        value=\"checkedD\"\r\n        inputProps={{\r\n          'aria-label': 'disabled checkbox',\r\n        }}\r\n      />\r\n      <Checkbox\r\n        disabled\r\n        checked\r\n        value=\"checkedE\"\r\n        inputProps={{\r\n          'aria-label': 'disabled checked checkbox',\r\n        }}\r\n      />\r\n      <Checkbox\r\n        checked={state.checkedF}\r\n        onChange={handleChange('checkedF')}\r\n        value=\"checkedF\"\r\n        indeterminate\r\n        inputProps={{\r\n          'aria-label': 'indeterminate checkbox',\r\n        }}\r\n      />\r\n      <Checkbox\r\n        defaultChecked\r\n        color=\"default\"\r\n        value=\"checkedG\"\r\n        inputProps={{\r\n          'aria-label': 'checkbox with default color',\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n`;\r\nconst jsCode4 = `\r\nimport React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { green } from '@material-ui/core/colors';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport Favorite from '@material-ui/icons/Favorite';\r\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\r\n\r\nconst GreenCheckbox = withStyles({\r\n  root: {\r\n    color: green[400],\r\n    '&$checked': {\r\n      color: green[600],\r\n    },\r\n  },\r\n  checked: {},\r\n})(props => <Checkbox color=\"default\" {...props} />);\r\n\r\nexport default function CheckboxLabels() {\r\n  const [state, setState] = React.useState({\r\n    checkedA: true,\r\n    checkedB: true,\r\n    checkedF: true,\r\n    checkedG: true,\r\n  });\r\n\r\n  const handleChange = name => event => {\r\n    setState({ ...state, [name]: event.target.checked });\r\n  };\r\n\r\n  return (\r\n    <FormGroup row>\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox checked={state.checkedA} onChange={handleChange('checkedA')} value=\"checkedA\" />\r\n        }\r\n        label=\"Secondary\"\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={state.checkedB}\r\n            onChange={handleChange('checkedB')}\r\n            value=\"checkedB\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Primary\"\r\n      />\r\n      <FormControlLabel control={<Checkbox value=\"checkedC\" />} label=\"Uncontrolled\" />\r\n      <FormControlLabel disabled control={<Checkbox value=\"checkedD\" />} label=\"Disabled\" />\r\n      <FormControlLabel disabled control={<Checkbox checked value=\"checkedE\" />} label=\"Disabled\" />\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={state.checkedF}\r\n            onChange={handleChange('checkedF')}\r\n            value=\"checkedF\"\r\n            indeterminate\r\n          />\r\n        }\r\n        label=\"Indeterminate\"\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <GreenCheckbox\r\n            checked={state.checkedG}\r\n            onChange={handleChange('checkedG')}\r\n            value=\"checkedG\"\r\n          />\r\n        }\r\n        label=\"Custom color\"\r\n      />\r\n      <FormControlLabel\r\n        control={<Checkbox icon={<FavoriteBorder />} checkedIcon={<Favorite />} value=\"checkedH\" />}\r\n        label=\"Custom icon\"\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            icon={<CheckBoxOutlineBlankIcon fontSize=\"small\" />}\r\n            checkedIcon={<CheckBoxIcon fontSize=\"small\" />}\r\n            value=\"checkedI\"\r\n          />\r\n        }\r\n        label=\"Custom size\"\r\n      />\r\n    </FormGroup>\r\n  );\r\n}\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}