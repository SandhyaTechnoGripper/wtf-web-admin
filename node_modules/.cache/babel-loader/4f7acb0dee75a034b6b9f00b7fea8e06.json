{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nisha\\\\OneDrive\\\\Desktop\\\\technogrip\\\\src\\\\app\\\\modules\\\\ReactBootstrapExamples\\\\PopoversExamplesPage.js\";\nimport React from \"react\";\nimport { Button, Popover, OverlayTrigger, ButtonToolbar } from \"react-bootstrap\";\nimport { Notice, KTCodeExample } from \"../../../_metronic/_partials/controls\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst popover = /*#__PURE__*/_jsxDEV(Popover, {\n  id: \"popover-basic\",\n  title: \"Popover right\",\n  children: [\"And here's some \", /*#__PURE__*/_jsxDEV(\"strong\", {\n    children: \"amazing\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 21\n  }, this), \" content. It's very engaging. right?\"]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 3\n}, this);\n\nconst Example = () => /*#__PURE__*/_jsxDEV(OverlayTrigger, {\n  trigger: \"click\",\n  placement: \"right\",\n  overlay: popover,\n  children: /*#__PURE__*/_jsxDEV(Button, {\n    variant: \"success\",\n    children: \"Click me to see\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 17,\n  columnNumber: 3\n}, this);\n\n_c = Example;\nexport default class PopoversExamplesPage extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Notice, {\n        icon: \"flaticon-warning font-primary\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"A popover component, like those found in iOS.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"For more info please check the components's official\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            className: \"font-weight-bold\",\n            rel: \"noopener noreferrer\",\n            href: \"https://react-bootstrap.github.io/components/overlays/#popovers\",\n            children: \"demos & documentation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(KTCodeExample, {\n        jsCode: jsCode1,\n        beforeCodeTitle: \"Basic Example\",\n        children: /*#__PURE__*/_jsxDEV(Example, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(KTCodeExample, {\n        jsCode: jsCode2,\n        beforeCodeTitle: \"Placement\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"You can control the placement of the Popover.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"separator separator-dashed my-7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ButtonToolbar, {\n          children: [\"top\", \"right\", \"bottom\", \"left\"].map(placement => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(OverlayTrigger, {\n              trigger: \"click\",\n              placement: placement,\n              overlay: /*#__PURE__*/_jsxDEV(Popover, {\n                id: `popover-positioned-${placement}`,\n                title: `Popover ${placement}`,\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Holy guacamole!\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 23\n                }, this), \" Check this info.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 21\n              }, this),\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"secondary\",\n                children: [\"Popover on \", placement]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 19\n              }, this)\n            }, placement, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this)]\n          }, `sp ${placement}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\nconst jsCode1 = `\nconst popover = (\n  <Popover id=\"popover-basic\" title=\"Popover right\">\n    And here's some <strong>amazing</strong> content. It's very engaging. right?\n  </Popover>\n);\n\nconst Example = () => (\n  <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover}>\n    <Button variant=\"success\">Click me to see</Button>\n  </OverlayTrigger>\n);\n\nrender(<Example />);\n`;\nconst jsCode2 = `\n<ButtonToolbar>\n  {['top', 'right', 'bottom', 'left'].map(placement => (\n    <OverlayTrigger\n      trigger=\"click\"\n      key={placement}\n      placement={placement}\n      overlay={\n        <Popover\n          id={\\`popover-positioned-\\${placement}\\`}\n          title={\\`Popover \\${placement}\\`}\n        >\n          <strong>Holy guacamole!</strong> Check this info.\n        </Popover>\n      }\n    >\n      <Button variant=\"secondary\">Popover on {placement}</Button>\n    </OverlayTrigger>\n  ))}\n</ButtonToolbar>\n`;\n\nvar _c;\n\n$RefreshReg$(_c, \"Example\");","map":{"version":3,"sources":["C:/Users/nisha/OneDrive/Desktop/technogrip/src/app/modules/ReactBootstrapExamples/PopoversExamplesPage.js"],"names":["React","Button","Popover","OverlayTrigger","ButtonToolbar","Notice","KTCodeExample","popover","Example","PopoversExamplesPage","Component","render","jsCode1","jsCode2","map","placement"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Button,\r\n  Popover,\r\n  OverlayTrigger,\r\n  ButtonToolbar\r\n} from \"react-bootstrap\";\r\nimport {Notice, KTCodeExample} from \"../../../_metronic/_partials/controls\";\r\n\r\nconst popover = (\r\n  <Popover id=\"popover-basic\" title=\"Popover right\">\r\n    And here's some <strong>amazing</strong> content. It's very engaging. right?\r\n  </Popover>\r\n);\r\n\r\nconst Example = () => (\r\n  <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover}>\r\n    <Button variant=\"success\">Click me to see</Button>\r\n  </OverlayTrigger>\r\n);\r\n\r\nexport default class PopoversExamplesPage extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Notice icon=\"flaticon-warning font-primary\">\r\n          <span>A popover component, like those found in iOS.</span>{\" \"}\r\n          <span>\r\n            For more info please check the components's official{\" \"}\r\n            <a\r\n              target=\"_blank\"\r\n              className=\"font-weight-bold\"\r\n              rel=\"noopener noreferrer\"\r\n              href=\"https://react-bootstrap.github.io/components/overlays/#popovers\"\r\n            >\r\n              demos & documentation\r\n            </a>\r\n          </span>\r\n        </Notice>\r\n\r\n        <KTCodeExample jsCode={jsCode1} beforeCodeTitle=\"Basic Example\">\r\n          <Example />\r\n        </KTCodeExample>\r\n\r\n        <KTCodeExample jsCode={jsCode2} beforeCodeTitle=\"Placement\">\r\n          <span>You can control the placement of the Popover.</span>\r\n          <div className=\"separator separator-dashed my-7\"></div>\r\n          <ButtonToolbar>\r\n            {[\"top\", \"right\", \"bottom\", \"left\"].map(placement => (\r\n              <span key={`sp ${placement}`}>\r\n                <OverlayTrigger\r\n                  trigger=\"click\"\r\n                  key={placement}\r\n                  placement={placement}\r\n                  overlay={\r\n                    <Popover\r\n                      id={`popover-positioned-${placement}`}\r\n                      title={`Popover ${placement}`}\r\n                    >\r\n                      <strong>Holy guacamole!</strong> Check this info.\r\n                    </Popover>\r\n                  }\r\n                >\r\n                  <Button variant=\"secondary\">Popover on {placement}</Button>\r\n                </OverlayTrigger>\r\n                <span>&nbsp;</span>\r\n              </span>\r\n            ))}\r\n          </ButtonToolbar>\r\n        </KTCodeExample>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst jsCode1 = `\r\nconst popover = (\r\n  <Popover id=\"popover-basic\" title=\"Popover right\">\r\n    And here's some <strong>amazing</strong> content. It's very engaging. right?\r\n  </Popover>\r\n);\r\n\r\nconst Example = () => (\r\n  <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover}>\r\n    <Button variant=\"success\">Click me to see</Button>\r\n  </OverlayTrigger>\r\n);\r\n\r\nrender(<Example />);\r\n`;\r\nconst jsCode2 = `\r\n<ButtonToolbar>\r\n  {['top', 'right', 'bottom', 'left'].map(placement => (\r\n    <OverlayTrigger\r\n      trigger=\"click\"\r\n      key={placement}\r\n      placement={placement}\r\n      overlay={\r\n        <Popover\r\n          id={\\`popover-positioned-\\${placement}\\`}\r\n          title={\\`Popover \\${placement}\\`}\r\n        >\r\n          <strong>Holy guacamole!</strong> Check this info.\r\n        </Popover>\r\n      }\r\n    >\r\n      <Button variant=\"secondary\">Popover on {placement}</Button>\r\n    </OverlayTrigger>\r\n  ))}\r\n</ButtonToolbar>\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}