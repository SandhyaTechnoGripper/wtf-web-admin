{"ast":null,"code":"import * as requestFromServer from \"./customersCrud\";\nimport { customersSlice, callTypes } from \"./customersSlice\";\nconst {\n  actions\n} = customersSlice;\nexport const fetchCustomers = queryParams => dispatch => {\n  dispatch(actions.startCall({\n    callType: callTypes.list\n  }));\n  return requestFromServer.findCustomers(queryParams).then(response => {\n    const {\n      totalCount,\n      entities\n    } = response.data;\n    dispatch(actions.customersFetched({\n      totalCount,\n      entities\n    }));\n  }).catch(error => {\n    error.clientMessage = \"Can't find customers\";\n    dispatch(actions.catchError({\n      error,\n      callType: callTypes.list\n    }));\n  });\n};\nexport const fetchCustomer = id => dispatch => {\n  if (!id) {\n    return dispatch(actions.customerFetched({\n      customerForEdit: undefined\n    }));\n  }\n\n  dispatch(actions.startCall({\n    callType: callTypes.action\n  }));\n  return requestFromServer.getCustomerById(id).then(response => {\n    const customer = response.data;\n    dispatch(actions.customerFetched({\n      customerForEdit: customer\n    }));\n  }).catch(error => {\n    error.clientMessage = \"Can't find customer\";\n    dispatch(actions.catchError({\n      error,\n      callType: callTypes.action\n    }));\n  });\n};\nexport const deleteCustomer = id => dispatch => {\n  dispatch(actions.startCall({\n    callType: callTypes.action\n  }));\n  return requestFromServer.deleteCustomer(id).then(response => {\n    dispatch(actions.customerDeleted({\n      id\n    }));\n  }).catch(error => {\n    error.clientMessage = \"Can't delete customer\";\n    dispatch(actions.catchError({\n      error,\n      callType: callTypes.action\n    }));\n  });\n};\nexport const createCustomer = customerForCreation => dispatch => {\n  dispatch(actions.startCall({\n    callType: callTypes.action\n  }));\n  return requestFromServer.createCustomer(customerForCreation).then(response => {\n    const {\n      customer\n    } = response.data;\n    dispatch(actions.customerCreated({\n      customer\n    }));\n  }).catch(error => {\n    error.clientMessage = \"Can't create customer\";\n    dispatch(actions.catchError({\n      error,\n      callType: callTypes.action\n    }));\n  });\n};\nexport const updateCustomer = customer => dispatch => {\n  dispatch(actions.startCall({\n    callType: callTypes.action\n  }));\n  return requestFromServer.updateCustomer(customer).then(() => {\n    dispatch(actions.customerUpdated({\n      customer\n    }));\n  }).catch(error => {\n    error.clientMessage = \"Can't update customer\";\n    dispatch(actions.catchError({\n      error,\n      callType: callTypes.action\n    }));\n  });\n};\nexport const updateCustomersStatus = (ids, status) => dispatch => {\n  dispatch(actions.startCall({\n    callType: callTypes.action\n  }));\n  return requestFromServer.updateStatusForCustomers(ids, status).then(() => {\n    dispatch(actions.customersStatusUpdated({\n      ids,\n      status\n    }));\n  }).catch(error => {\n    error.clientMessage = \"Can't update customers status\";\n    dispatch(actions.catchError({\n      error,\n      callType: callTypes.action\n    }));\n  });\n};\nexport const deleteCustomers = ids => dispatch => {\n  dispatch(actions.startCall({\n    callType: callTypes.action\n  }));\n  return requestFromServer.deleteCustomers(ids).then(() => {\n    dispatch(actions.customersDeleted({\n      ids\n    }));\n  }).catch(error => {\n    error.clientMessage = \"Can't delete customers\";\n    dispatch(actions.catchError({\n      error,\n      callType: callTypes.action\n    }));\n  });\n};","map":{"version":3,"sources":["C:/Users/nisha/OneDrive/Desktop/technogrip/src/app/modules/ECommerce/_redux/customers/customersActions.js"],"names":["requestFromServer","customersSlice","callTypes","actions","fetchCustomers","queryParams","dispatch","startCall","callType","list","findCustomers","then","response","totalCount","entities","data","customersFetched","catch","error","clientMessage","catchError","fetchCustomer","id","customerFetched","customerForEdit","undefined","action","getCustomerById","customer","deleteCustomer","customerDeleted","createCustomer","customerForCreation","customerCreated","updateCustomer","customerUpdated","updateCustomersStatus","ids","status","updateStatusForCustomers","customersStatusUpdated","deleteCustomers","customersDeleted"],"mappings":"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","sourcesContent":["import * as requestFromServer from \"./customersCrud\";\r\nimport {customersSlice, callTypes} from \"./customersSlice\";\r\n\r\nconst {actions} = customersSlice;\r\n\r\nexport const fetchCustomers = queryParams => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.list }));\r\n  return requestFromServer\r\n    .findCustomers(queryParams)\r\n    .then(response => {\r\n      const { totalCount, entities } = response.data;\r\n      dispatch(actions.customersFetched({ totalCount, entities }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find customers\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.list }));\r\n    });\r\n};\r\n\r\nexport const fetchCustomer = id => dispatch => {\r\n  if (!id) {\r\n    return dispatch(actions.customerFetched({ customerForEdit: undefined }));\r\n  }\r\n\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .getCustomerById(id)\r\n    .then(response => {\r\n      const customer = response.data;\r\n      dispatch(actions.customerFetched({ customerForEdit: customer }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find customer\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteCustomer = id => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteCustomer(id)\r\n    .then(response => {\r\n      dispatch(actions.customerDeleted({ id }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete customer\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const createCustomer = customerForCreation => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .createCustomer(customerForCreation)\r\n    .then(response => {\r\n      const { customer } = response.data;\r\n      dispatch(actions.customerCreated({ customer }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't create customer\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const updateCustomer = customer => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .updateCustomer(customer)\r\n    .then(() => {\r\n      dispatch(actions.customerUpdated({ customer }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't update customer\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const updateCustomersStatus = (ids, status) => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .updateStatusForCustomers(ids, status)\r\n    .then(() => {\r\n      dispatch(actions.customersStatusUpdated({ ids, status }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't update customers status\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteCustomers = ids => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteCustomers(ids)\r\n    .then(() => {\r\n      dispatch(actions.customersDeleted({ ids }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete customers\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}