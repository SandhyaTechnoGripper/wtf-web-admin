{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nisha\\\\OneDrive\\\\Desktop\\\\technogrip\\\\src\\\\app\\\\modules\\\\ReactBootstrapExamples\\\\OverlaysExamplesPage.js\";\n\n/* eslint-disable no-unused-vars */\nimport React from \"react\";\nimport { Button, Overlay, Popover, OverlayTrigger, ButtonToolbar, Tooltip } from \"react-bootstrap\";\nimport { Notice, KTCodeExample } from \"../../../_metronic/_partials/controls\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Example extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.attachRef = target => this.setState({\n      target\n    });\n\n    this.state = {\n      show: false\n    };\n  }\n\n  render() {\n    const {\n      show,\n      target\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"danger\",\n        ref: this.attachRef,\n        onClick: () => this.setState({\n          show: !show\n        }),\n        children: \"Click me to see\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Overlay, {\n        target: target,\n        show: show,\n        placement: \"right\",\n        children: ({\n          placement,\n          scheduleUpdate,\n          arrowProps,\n          outOfBoundaries,\n          show: _show,\n          ...props\n        }) => /*#__PURE__*/_jsxDEV(\"div\", { ...props,\n          style: {\n            backgroundColor: \"rgba(255, 100, 100, 0.85)\",\n            padding: \"2px 10px\",\n            color: \"white\",\n            borderRadius: 3,\n            ...props.style\n          },\n          children: \"Simple tooltip\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst renderTooltip = props => /*#__PURE__*/_jsxDEV(\"div\", { ...props,\n  style: {\n    backgroundColor: \"rgba(0, 0, 0, 0.85)\",\n    padding: \"2px 10px\",\n    color: \"white\",\n    borderRadius: 3,\n    ...props.style\n  },\n  children: \"Simple tooltip\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 63,\n  columnNumber: 3\n}, this);\n\nconst Example1 = () => /*#__PURE__*/_jsxDEV(OverlayTrigger, {\n  placement: \"right-start\",\n  delay: {\n    show: 250,\n    hide: 400\n  },\n  overlay: renderTooltip,\n  children: /*#__PURE__*/_jsxDEV(Button, {\n    variant: \"success\",\n    children: \"Hover me to see\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 78,\n  columnNumber: 3\n}, this);\n\n_c = Example1;\n\nclass Example4 extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleClick = ({\n      target\n    }) => {\n      this.setState(s => ({\n        target,\n        show: !s.show\n      }));\n    };\n\n    this.state = {\n      show: false\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(ButtonToolbar, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: this.handleClick,\n        children: \"Holy guacamole!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Overlay, {\n        show: this.state.show,\n        target: this.state.target,\n        placement: \"bottom\",\n        container: this,\n        containerPadding: 20,\n        children: /*#__PURE__*/_jsxDEV(Popover, {\n          id: \"popover-contained\",\n          title: \"Popover bottom\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Holy guacamole!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), \" Check this info.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass UpdatingPopover extends React.Component {\n  componentDidUpdate(prevProps) {\n    if (prevProps.children !== this.props.children) {\n      this.props.scheduleUpdate();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Popover, { ...this.props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nconst longContent = `\n  Very long\n  Multiline content\n  that is engaging and what-not\n`;\nconst shortContent = \"Short and sweet!\";\n\nclass Example5 extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      content: shortContent\n    };\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      this.setState(state => ({\n        content: state.content === shortContent ? longContent : shortContent\n      }));\n    }, 3000);\n  }\n\n  render() {\n    const {\n      content\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(OverlayTrigger, {\n      trigger: \"click\",\n      overlay: /*#__PURE__*/_jsxDEV(UpdatingPopover, {\n        id: \"popover-contained\",\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: this.handleClick,\n        children: \"Holy guacamole!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default class OverlaysExamplesPage extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Notice, {\n        icon: \"flaticon-warning font-primary\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"A set of components for positioning beautiful overlays, tooltips, popovers, and anything else you need.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"For more info please check the components's official\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            className: \"font-weight-bold\",\n            rel: \"noopener noreferrer\",\n            href: \"https://react-bootstrap.github.io/components/overlays/\",\n            children: \"demos & documentation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-6\",\n          children: [/*#__PURE__*/_jsxDEV(KTCodeExample, {\n            jsCode: jsCode1,\n            beforeCodeTitle: \"Creating an Overlay\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Overlays consist of at least two elements, the \\\"overlay\\\", the element to be positioned, as well as a \\\"target\\\", the element the overlay is positioned in relation to. You can also also have an \\\"arrow\\\" element, like the tooltips and popovers, but that is optional.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"separator separator-dashed my-7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Example, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(KTCodeExample, {\n            jsCode: jsCode5,\n            beforeCodeTitle: \"Disabled elements\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Elements with the \", /*#__PURE__*/_jsxDEV(\"code\", {\n                children: \"disabled\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 35\n              }, this), \" attribute aren\\u2019t interactive, meaning users cannot hover or click them to trigger a popover (or tooltip).\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"separator separator-dashed my-7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(OverlayTrigger, {\n              overlay: /*#__PURE__*/_jsxDEV(Tooltip, {\n                id: \"tooltip-disabled\",\n                children: \"Tooltip!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 26\n              }, this),\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"d-inline-block\",\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  disabled: true,\n                  style: {\n                    pointerEvents: \"none\"\n                  },\n                  children: \"Disabled button\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 220,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(KTCodeExample, {\n            jsCode: jsCode7,\n            beforeCodeTitle: \"Updating position dynamically\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Since we can't know every time your overlay changes size, to reposition it, you need to take manual action if you want to update the position of an Overlay in response to a change.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"separator separator-dashed my-7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Example5, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-6\",\n          children: [/*#__PURE__*/_jsxDEV(KTCodeExample, {\n            jsCode: jsCode2,\n            beforeCodeTitle: \"OverlayTrigger\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Since the above pattern is pretty common, but verbose, we've included \", /*#__PURE__*/_jsxDEV(\"code\", {\n                children: \"<OverlayTrigger>\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 26\n              }, this), \" component to help with common use-cases. It even has functionality to delayed show or hides, and a few different \\\"trigger\\\" events you can mix and match.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"separator separator-dashed my-7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Example1, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(KTCodeExample, {\n            jsCode: jsCode6,\n            beforeCodeTitle: \"Changing containers\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"You can specify a \", /*#__PURE__*/_jsxDEV(\"code\", {\n                children: \"container\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 35\n              }, this), \" to control the DOM element the overlay is appended to. This is especially useful when styles conflict with your Overlay's.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"separator separator-dashed my-7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Example4, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\nconst jsCode1 = `\nclass Example extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.attachRef = target => this.setState({ target });\n    this.state = {\n      show: false,\n    };\n  }\n\n  render() {\n    const { show, target } = this.state;\n    return (\n      <>\n        <Button\n          variant=\"danger\"\n          ref={this.attachRef}\n          onClick={() => this.setState({ show: !show })}\n        >\n          Click me to see\n        </Button>\n        <Overlay target={target} show={show} placement=\"right\">\n          {({\n            placement,\n            scheduleUpdate,\n            arrowProps,\n            outOfBoundaries,\n            show: _show,\n            ...props\n          }) => (\n            <div\n              {...props}\n              style={{\n                backgroundColor: 'rgba(255, 100, 100, 0.85)',\n                padding: '2px 10px',\n                color: 'white',\n                borderRadius: 3,\n                ...props.style,\n              }}\n            >\n              Simple tooltip\n            </div>\n          )}\n        </Overlay>\n      </>\n    );\n  }\n}\n\nrender(<Example />);\n`;\nconst jsCode2 = `\nconst renderTooltip = props => (\n  <div\n    {...props}\n    style={{\n      backgroundColor: 'rgba(0, 0, 0, 0.85)',\n      padding: '2px 10px',\n      color: 'white',\n      borderRadius: 3,\n      ...props.style,\n    }}\n  >\n    Simple tooltip\n  </div>\n);\n\nconst Example = () => (\n  <OverlayTrigger\n    placement=\"right-start\"\n    delay={{ show: 250, hide: 400 }}\n    overlay={renderTooltip}\n  >\n    <Button variant=\"success\">Hover me to see</Button>\n  </OverlayTrigger>\n);\n\nrender(<Example />);\n`;\nconst jsCode3 = `\nclass Example extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.attachRef = target => this.setState({ target });\n    this.state = { show: false };\n  }\n\n  render() {\n    const { show, target } = this.state;\n    return (\n      <>\n        <Button\n          ref={this.attachRef}\n          onClick={() => this.setState({ show: !show })}\n        >\n          Click me!\n        </Button>\n        <Overlay target={target} show={show} placement=\"right\">\n          {props => (\n            <Tooltip id=\"overlay-example\" {...props}>\n              My Tooltip\n            </Tooltip>\n          )}\n        </Overlay>\n      </>\n    );\n  }\n}\n\nrender(<Example />);\n`;\nconst jsCode4 = `\nconst popover = (\n  <Popover id=\"popover-basic\" title=\"Popover right\">\n    And here's some <strong>amazing</strong> content. It's very engaging. right?\n  </Popover>\n);\n\nconst Example = () => (\n  <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover}>\n    <Button variant=\"success\">Click me to see</Button>\n  </OverlayTrigger>\n);\n\nrender(<Example />);\n`;\nconst jsCode5 = `\n<OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">Tooltip!</Tooltip>}>\n  <span className=\"d-inline-block\">\n    <Button disabled style={{ pointerEvents: 'none' }}>\n      Disabled button\n    </Button>\n  </span>\n</OverlayTrigger>\n`;\nconst jsCode6 = `\nclass Example extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleClick = ({ target }) => {\n      this.setState(s => ({ target, show: !s.show }));\n    };\n\n    this.state = {\n      show: false,\n    };\n  }\n\n  render() {\n    return (\n      <ButtonToolbar>\n        <Button onClick={this.handleClick}>Holy guacamole!</Button>\n\n        <Overlay\n          show={this.state.show}\n          target={this.state.target}\n          placement=\"bottom\"\n          container={this}\n          containerPadding={20}\n        >\n          <Popover id=\"popover-contained\" title=\"Popover bottom\">\n            <strong>Holy guacamole!</strong> Check this info.\n          </Popover>\n        </Overlay>\n      </ButtonToolbar>\n    );\n  }\n}\n\nrender(<Example />);\n`;\nconst jsCode7 = `\nclass UpdatingPopover extends React.Component {\n  componentDidUpdate(prevProps) {\n    if (prevProps.children !== this.props.children) {\n      console.log('updating!');\n      this.props.scheduleUpdate();\n    }\n  }\n\n  render() {\n    return <Popover {...this.props} />;\n  }\n}\n\nconst longContent = \\`\n  Very long\n  Multiline content\n  that is engaging and what-not\n\\`;\nconst shortContent = 'Short and sweet!';\n\nclass Example extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = { content: shortContent };\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      this.setState(state => ({\n        content: state.content === shortContent ? longContent : shortContent,\n      }));\n    }, 3000);\n  }\n\n  render() {\n    const { content } = this.state;\n\n    return (\n      <OverlayTrigger\n        trigger=\"click\"\n        overlay={\n          <UpdatingPopover id=\"popover-contained\">{content}</UpdatingPopover>\n        }\n      >\n        <Button onClick={this.handleClick}>Holy guacamole!</Button>\n      </OverlayTrigger>\n    );\n  }\n}\n\nrender(<Example />);\n`;\n\nvar _c;\n\n$RefreshReg$(_c, \"Example1\");","map":{"version":3,"sources":["C:/Users/nisha/OneDrive/Desktop/technogrip/src/app/modules/ReactBootstrapExamples/OverlaysExamplesPage.js"],"names":["React","Button","Overlay","Popover","OverlayTrigger","ButtonToolbar","Tooltip","Notice","KTCodeExample","Example","Component","constructor","args","attachRef","target","setState","state","show","render","placement","scheduleUpdate","arrowProps","outOfBoundaries","_show","props","backgroundColor","padding","color","borderRadius","style","renderTooltip","Example1","hide","Example4","context","handleClick","s","UpdatingPopover","componentDidUpdate","prevProps","children","longContent","shortContent","Example5","content","componentDidMount","timer","setInterval","OverlaysExamplesPage","jsCode1","jsCode5","pointerEvents","jsCode7","jsCode2","jsCode6","jsCode3","jsCode4"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,MADF,EAEEC,OAFF,EAGEC,OAHF,EAIEC,cAJF,EAKEC,aALF,EAMEC,OANF,QAOO,iBAPP;AAQA,SAAQC,MAAR,EAAgBC,aAAhB,QAAoC,uCAApC;;;;AAEA,MAAMC,OAAN,SAAsBT,KAAK,CAACU,SAA5B,CAAsC;AACpCC,EAAAA,WAAW,CAAC,GAAGC,IAAJ,EAAU;AACnB,UAAM,GAAGA,IAAT;;AAEA,SAAKC,SAAL,GAAiBC,MAAM,IAAI,KAAKC,QAAL,CAAc;AAAED,MAAAA;AAAF,KAAd,CAA3B;;AACA,SAAKE,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE;AADK,KAAb;AAGD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAED,MAAAA,IAAF;AAAQH,MAAAA;AAAR,QAAmB,KAAKE,KAA9B;AACA,wBACE;AAAA,8BACE,QAAC,MAAD;AACE,QAAA,OAAO,EAAC,QADV;AAEE,QAAA,GAAG,EAAE,KAAKH,SAFZ;AAGE,QAAA,OAAO,EAAE,MAAM,KAAKE,QAAL,CAAc;AAAEE,UAAAA,IAAI,EAAE,CAACA;AAAT,SAAd,CAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAQE,QAAC,OAAD;AAAS,QAAA,MAAM,EAAEH,MAAjB;AAAyB,QAAA,IAAI,EAAEG,IAA/B;AAAqC,QAAA,SAAS,EAAC,OAA/C;AAAA,kBACG,CAAC;AACAE,UAAAA,SADA;AAEAC,UAAAA,cAFA;AAGAC,UAAAA,UAHA;AAIAC,UAAAA,eAJA;AAKAL,UAAAA,IAAI,EAAEM,KALN;AAMA,aAAGC;AANH,SAAD,kBAQC,oBACMA,KADN;AAEE,UAAA,KAAK,EAAE;AACLC,YAAAA,eAAe,EAAE,2BADZ;AAELC,YAAAA,OAAO,EAAE,UAFJ;AAGLC,YAAAA,KAAK,EAAE,OAHF;AAILC,YAAAA,YAAY,EAAE,CAJT;AAKL,eAAGJ,KAAK,CAACK;AALJ,WAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATJ;AAAA;AAAA;AAAA;AAAA,cARF;AAAA,oBADF;AAkCD;;AA9CmC;;AAiDtC,MAAMC,aAAa,GAAGN,KAAK,iBACzB,oBACMA,KADN;AAEE,EAAA,KAAK,EAAE;AACLC,IAAAA,eAAe,EAAE,qBADZ;AAELC,IAAAA,OAAO,EAAE,UAFJ;AAGLC,IAAAA,KAAK,EAAE,OAHF;AAILC,IAAAA,YAAY,EAAE,CAJT;AAKL,OAAGJ,KAAK,CAACK;AALJ,GAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;;AAeA,MAAME,QAAQ,GAAG,mBACf,QAAC,cAAD;AACE,EAAA,SAAS,EAAC,aADZ;AAEE,EAAA,KAAK,EAAE;AAAEd,IAAAA,IAAI,EAAE,GAAR;AAAae,IAAAA,IAAI,EAAE;AAAnB,GAFT;AAGE,EAAA,OAAO,EAAEF,aAHX;AAAA,yBAKE,QAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,QADF;;KAAMC,Q;;AAUN,MAAME,QAAN,SAAuBjC,KAAK,CAACU,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAACa,KAAD,EAAQU,OAAR,EAAiB;AAC1B,UAAMV,KAAN,EAAaU,OAAb;;AAEA,SAAKC,WAAL,GAAmB,CAAC;AAAErB,MAAAA;AAAF,KAAD,KAAgB;AACjC,WAAKC,QAAL,CAAcqB,CAAC,KAAK;AAAEtB,QAAAA,MAAF;AAAUG,QAAAA,IAAI,EAAE,CAACmB,CAAC,CAACnB;AAAnB,OAAL,CAAf;AACD,KAFD;;AAIA,SAAKD,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE;AADK,KAAb;AAGD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,aAAD;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKiB,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAGE,QAAC,OAAD;AACE,QAAA,IAAI,EAAE,KAAKnB,KAAL,CAAWC,IADnB;AAEE,QAAA,MAAM,EAAE,KAAKD,KAAL,CAAWF,MAFrB;AAGE,QAAA,SAAS,EAAC,QAHZ;AAIE,QAAA,SAAS,EAAE,IAJb;AAKE,QAAA,gBAAgB,EAAE,EALpB;AAAA,+BAOE,QAAC,OAAD;AAAS,UAAA,EAAE,EAAC,mBAAZ;AAAgC,UAAA,KAAK,EAAC,gBAAtC;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAiBD;;AA/BoC;;AAkCvC,MAAMuB,eAAN,SAA8BrC,KAAK,CAACU,SAApC,CAA8C;AAC5C4B,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,QAAIA,SAAS,CAACC,QAAV,KAAuB,KAAKhB,KAAL,CAAWgB,QAAtC,EAAgD;AAC9C,WAAKhB,KAAL,CAAWJ,cAAX;AACD;AACF;;AAEDF,EAAAA,MAAM,GAAG;AACP,wBAAO,QAAC,OAAD,OAAa,KAAKM;AAAlB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAT2C;;AAY9C,MAAMiB,WAAW,GAAI;AACrB;AACA;AACA;AACA,CAJA;AAKA,MAAMC,YAAY,GAAG,kBAArB;;AAEA,MAAMC,QAAN,SAAuB3C,KAAK,CAACU,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAACa,KAAD,EAAQU,OAAR,EAAiB;AAC1B,UAAMV,KAAN,EAAaU,OAAb;AACA,SAAKlB,KAAL,GAAa;AAAE4B,MAAAA,OAAO,EAAEF;AAAX,KAAb;AACD;;AAEDG,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,GAAaC,WAAW,CAAC,MAAM;AAC7B,WAAKhC,QAAL,CAAcC,KAAK,KAAK;AACtB4B,QAAAA,OAAO,EAAE5B,KAAK,CAAC4B,OAAN,KAAkBF,YAAlB,GAAiCD,WAAjC,GAA+CC;AADlC,OAAL,CAAnB;AAGD,KAJuB,EAIrB,IAJqB,CAAxB;AAKD;;AAEDxB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE0B,MAAAA;AAAF,QAAc,KAAK5B,KAAzB;AAEA,wBACE,QAAC,cAAD;AACE,MAAA,OAAO,EAAC,OADV;AAEE,MAAA,OAAO,eACL,QAAC,eAAD;AAAiB,QAAA,EAAE,EAAC,mBAApB;AAAA,kBAAyC4B;AAAzC;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA,6BAME,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKT,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AA3BoC;;AA8BvC,eAAe,MAAMa,oBAAN,SAAmChD,KAAK,CAACU,SAAzC,CAAmD;AAChEQ,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,+BAAb;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAIU,GAJV,eAKE;AAAA,6EACuD,GADvD,eAEE;AACE,YAAA,MAAM,EAAC,QADT;AAEE,YAAA,SAAS,EAAC,kBAFZ;AAGE,YAAA,GAAG,EAAC,qBAHN;AAIE,YAAA,IAAI,EAAC,wDAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAmBE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,kCACE,QAAC,aAAD;AACE,YAAA,MAAM,EAAE+B,OADV;AAEE,YAAA,eAAe,EAAC,qBAFlB;AAAA,oCAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,eAWE;AAAK,cAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,oBAXF,eAYE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,oBAZF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAgBE,QAAC,aAAD;AAAe,YAAA,MAAM,EAAEC,OAAvB;AAAgC,YAAA,eAAe,EAAC,mBAAhD;AAAA,oCACE;AAAA,4DACoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADpB;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAME;AAAK,cAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,oBANF,eAOE,QAAC,cAAD;AACE,cAAA,OAAO,eAAE,QAAC,OAAD;AAAS,gBAAA,EAAE,EAAC,kBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADX;AAAA,qCAGE;AAAM,gBAAA,SAAS,EAAC,gBAAhB;AAAA,uCACE,QAAC,MAAD;AAAQ,kBAAA,QAAQ,MAAhB;AAAiB,kBAAA,KAAK,EAAE;AAAEC,oBAAAA,aAAa,EAAE;AAAjB,mBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAHF;AAAA;AAAA;AAAA;AAAA,oBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhBF,eAkCE,QAAC,aAAD;AACE,YAAA,MAAM,EAAEC,OADV;AAEE,YAAA,eAAe,EAAC,+BAFlB;AAAA,oCAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,eASE;AAAK,cAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,oBATF,eAUE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,oBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAlCF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAgDE;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,kCACE,QAAC,aAAD;AAAe,YAAA,MAAM,EAAEC,OAAvB;AAAgC,YAAA,eAAe,EAAC,gBAAhD;AAAA,oCACE;AAAA,gHAEW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFX;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAQE;AAAK,cAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,oBARF,eASE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,oBATF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAaE,QAAC,aAAD;AACE,YAAA,MAAM,EAAEC,OADV;AAEE,YAAA,eAAe,EAAC,qBAFlB;AAAA,oCAIE;AAAA,4DACoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADpB;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,eASE;AAAK,cAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,oBATF,eAUE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,oBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAbF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhDF;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBF;AAAA,oBADF;AAiGD;;AAnG+D;AAsGlE,MAAML,OAAO,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnDA;AAoDA,MAAMI,OAAO,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA3BA;AA4BA,MAAME,OAAO,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhCA;AAiCA,MAAMC,OAAO,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdA;AAeA,MAAMN,OAAO,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;AASA,MAAMI,OAAO,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApCA;AAqCA,MAAMF,OAAO,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApDA","sourcesContent":["/* eslint-disable no-unused-vars */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Overlay,\r\n  Popover,\r\n  OverlayTrigger,\r\n  ButtonToolbar,\r\n  Tooltip\r\n} from \"react-bootstrap\";\r\nimport {Notice, KTCodeExample} from \"../../../_metronic/_partials/controls\";\r\n\r\nclass Example extends React.Component {\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    this.attachRef = target => this.setState({ target });\r\n    this.state = {\r\n      show: false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { show, target } = this.state;\r\n    return (\r\n      <>\r\n        <Button\r\n          variant=\"danger\"\r\n          ref={this.attachRef}\r\n          onClick={() => this.setState({ show: !show })}\r\n        >\r\n          Click me to see\r\n        </Button>\r\n        <Overlay target={target} show={show} placement=\"right\">\r\n          {({\r\n            placement,\r\n            scheduleUpdate,\r\n            arrowProps,\r\n            outOfBoundaries,\r\n            show: _show,\r\n            ...props\r\n          }) => (\r\n            <div\r\n              {...props}\r\n              style={{\r\n                backgroundColor: \"rgba(255, 100, 100, 0.85)\",\r\n                padding: \"2px 10px\",\r\n                color: \"white\",\r\n                borderRadius: 3,\r\n                ...props.style\r\n              }}\r\n            >\r\n              Simple tooltip\r\n            </div>\r\n          )}\r\n        </Overlay>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst renderTooltip = props => (\r\n  <div\r\n    {...props}\r\n    style={{\r\n      backgroundColor: \"rgba(0, 0, 0, 0.85)\",\r\n      padding: \"2px 10px\",\r\n      color: \"white\",\r\n      borderRadius: 3,\r\n      ...props.style\r\n    }}\r\n  >\r\n    Simple tooltip\r\n  </div>\r\n);\r\n\r\nconst Example1 = () => (\r\n  <OverlayTrigger\r\n    placement=\"right-start\"\r\n    delay={{ show: 250, hide: 400 }}\r\n    overlay={renderTooltip}\r\n  >\r\n    <Button variant=\"success\">Hover me to see</Button>\r\n  </OverlayTrigger>\r\n);\r\n\r\nclass Example4 extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.handleClick = ({ target }) => {\r\n      this.setState(s => ({ target, show: !s.show }));\r\n    };\r\n\r\n    this.state = {\r\n      show: false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ButtonToolbar>\r\n        <Button onClick={this.handleClick}>Holy guacamole!</Button>\r\n\r\n        <Overlay\r\n          show={this.state.show}\r\n          target={this.state.target}\r\n          placement=\"bottom\"\r\n          container={this}\r\n          containerPadding={20}\r\n        >\r\n          <Popover id=\"popover-contained\" title=\"Popover bottom\">\r\n            <strong>Holy guacamole!</strong> Check this info.\r\n          </Popover>\r\n        </Overlay>\r\n      </ButtonToolbar>\r\n    );\r\n  }\r\n}\r\n\r\nclass UpdatingPopover extends React.Component {\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.children !== this.props.children) {\r\n      this.props.scheduleUpdate();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <Popover {...this.props} />;\r\n  }\r\n}\r\n\r\nconst longContent = `\r\n  Very long\r\n  Multiline content\r\n  that is engaging and what-not\r\n`;\r\nconst shortContent = \"Short and sweet!\";\r\n\r\nclass Example5 extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.state = { content: shortContent };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timer = setInterval(() => {\r\n      this.setState(state => ({\r\n        content: state.content === shortContent ? longContent : shortContent\r\n      }));\r\n    }, 3000);\r\n  }\r\n\r\n  render() {\r\n    const { content } = this.state;\r\n\r\n    return (\r\n      <OverlayTrigger\r\n        trigger=\"click\"\r\n        overlay={\r\n          <UpdatingPopover id=\"popover-contained\">{content}</UpdatingPopover>\r\n        }\r\n      >\r\n        <Button onClick={this.handleClick}>Holy guacamole!</Button>\r\n      </OverlayTrigger>\r\n    );\r\n  }\r\n}\r\n\r\nexport default class OverlaysExamplesPage extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Notice icon=\"flaticon-warning font-primary\">\r\n          <span>\r\n            A set of components for positioning beautiful overlays, tooltips,\r\n            popovers, and anything else you need.\r\n          </span>{\" \"}\r\n          <span>\r\n            For more info please check the components's official{\" \"}\r\n            <a\r\n              target=\"_blank\"\r\n              className=\"font-weight-bold\"\r\n              rel=\"noopener noreferrer\"\r\n              href=\"https://react-bootstrap.github.io/components/overlays/\"\r\n            >\r\n              demos & documentation\r\n            </a>\r\n          </span>\r\n        </Notice>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <KTCodeExample\r\n              jsCode={jsCode1}\r\n              beforeCodeTitle=\"Creating an Overlay\"\r\n            >\r\n              <span>\r\n                Overlays consist of at least two elements, the \"overlay\", the\r\n                element to be positioned, as well as a \"target\", the element the\r\n                overlay is positioned in relation to. You can also also have an\r\n                \"arrow\" element, like the tooltips and popovers, but that is\r\n                optional.\r\n              </span>\r\n              <div className=\"separator separator-dashed my-7\"></div>\r\n              <Example />\r\n            </KTCodeExample>\r\n\r\n            <KTCodeExample jsCode={jsCode5} beforeCodeTitle=\"Disabled elements\">\r\n              <span>\r\n                Elements with the <code>disabled</code> attribute aren’t\r\n                interactive, meaning users cannot hover or click them to trigger\r\n                a popover (or tooltip).\r\n              </span>\r\n              <div className=\"separator separator-dashed my-7\"></div>\r\n              <OverlayTrigger\r\n                overlay={<Tooltip id=\"tooltip-disabled\">Tooltip!</Tooltip>}\r\n              >\r\n                <span className=\"d-inline-block\">\r\n                  <Button disabled style={{ pointerEvents: \"none\" }}>\r\n                    Disabled button\r\n                  </Button>\r\n                </span>\r\n              </OverlayTrigger>\r\n            </KTCodeExample>\r\n\r\n            <KTCodeExample\r\n              jsCode={jsCode7}\r\n              beforeCodeTitle=\"Updating position dynamically\"\r\n            >\r\n              <span>\r\n                Since we can't know every time your overlay changes size, to\r\n                reposition it, you need to take manual action if you want to\r\n                update the position of an Overlay in response to a change.\r\n              </span>\r\n              <div className=\"separator separator-dashed my-7\"></div>\r\n              <Example5 />\r\n            </KTCodeExample>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <KTCodeExample jsCode={jsCode2} beforeCodeTitle=\"OverlayTrigger\">\r\n              <span>\r\n                Since the above pattern is pretty common, but verbose, we've\r\n                included <code>&lt;OverlayTrigger&gt;</code> component to help\r\n                with common use-cases. It even has functionality to delayed show\r\n                or hides, and a few different \"trigger\" events you can mix and\r\n                match.\r\n              </span>\r\n              <div className=\"separator separator-dashed my-7\"></div>\r\n              <Example1 />\r\n            </KTCodeExample>\r\n\r\n            <KTCodeExample\r\n              jsCode={jsCode6}\r\n              beforeCodeTitle=\"Changing containers\"\r\n            >\r\n              <span>\r\n                You can specify a <code>container</code> to control the DOM\r\n                element the overlay is appended to. This is especially useful\r\n                when styles conflict with your Overlay's.\r\n              </span>\r\n              <div className=\"separator separator-dashed my-7\"></div>\r\n              <Example4 />\r\n            </KTCodeExample>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst jsCode1 = `\r\nclass Example extends React.Component {\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    this.attachRef = target => this.setState({ target });\r\n    this.state = {\r\n      show: false,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { show, target } = this.state;\r\n    return (\r\n      <>\r\n        <Button\r\n          variant=\"danger\"\r\n          ref={this.attachRef}\r\n          onClick={() => this.setState({ show: !show })}\r\n        >\r\n          Click me to see\r\n        </Button>\r\n        <Overlay target={target} show={show} placement=\"right\">\r\n          {({\r\n            placement,\r\n            scheduleUpdate,\r\n            arrowProps,\r\n            outOfBoundaries,\r\n            show: _show,\r\n            ...props\r\n          }) => (\r\n            <div\r\n              {...props}\r\n              style={{\r\n                backgroundColor: 'rgba(255, 100, 100, 0.85)',\r\n                padding: '2px 10px',\r\n                color: 'white',\r\n                borderRadius: 3,\r\n                ...props.style,\r\n              }}\r\n            >\r\n              Simple tooltip\r\n            </div>\r\n          )}\r\n        </Overlay>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nrender(<Example />);\r\n`;\r\nconst jsCode2 = `\r\nconst renderTooltip = props => (\r\n  <div\r\n    {...props}\r\n    style={{\r\n      backgroundColor: 'rgba(0, 0, 0, 0.85)',\r\n      padding: '2px 10px',\r\n      color: 'white',\r\n      borderRadius: 3,\r\n      ...props.style,\r\n    }}\r\n  >\r\n    Simple tooltip\r\n  </div>\r\n);\r\n\r\nconst Example = () => (\r\n  <OverlayTrigger\r\n    placement=\"right-start\"\r\n    delay={{ show: 250, hide: 400 }}\r\n    overlay={renderTooltip}\r\n  >\r\n    <Button variant=\"success\">Hover me to see</Button>\r\n  </OverlayTrigger>\r\n);\r\n\r\nrender(<Example />);\r\n`;\r\nconst jsCode3 = `\r\nclass Example extends React.Component {\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    this.attachRef = target => this.setState({ target });\r\n    this.state = { show: false };\r\n  }\r\n\r\n  render() {\r\n    const { show, target } = this.state;\r\n    return (\r\n      <>\r\n        <Button\r\n          ref={this.attachRef}\r\n          onClick={() => this.setState({ show: !show })}\r\n        >\r\n          Click me!\r\n        </Button>\r\n        <Overlay target={target} show={show} placement=\"right\">\r\n          {props => (\r\n            <Tooltip id=\"overlay-example\" {...props}>\r\n              My Tooltip\r\n            </Tooltip>\r\n          )}\r\n        </Overlay>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nrender(<Example />);\r\n`;\r\nconst jsCode4 = `\r\nconst popover = (\r\n  <Popover id=\"popover-basic\" title=\"Popover right\">\r\n    And here's some <strong>amazing</strong> content. It's very engaging. right?\r\n  </Popover>\r\n);\r\n\r\nconst Example = () => (\r\n  <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover}>\r\n    <Button variant=\"success\">Click me to see</Button>\r\n  </OverlayTrigger>\r\n);\r\n\r\nrender(<Example />);\r\n`;\r\nconst jsCode5 = `\r\n<OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">Tooltip!</Tooltip>}>\r\n  <span className=\"d-inline-block\">\r\n    <Button disabled style={{ pointerEvents: 'none' }}>\r\n      Disabled button\r\n    </Button>\r\n  </span>\r\n</OverlayTrigger>\r\n`;\r\nconst jsCode6 = `\r\nclass Example extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.handleClick = ({ target }) => {\r\n      this.setState(s => ({ target, show: !s.show }));\r\n    };\r\n\r\n    this.state = {\r\n      show: false,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ButtonToolbar>\r\n        <Button onClick={this.handleClick}>Holy guacamole!</Button>\r\n\r\n        <Overlay\r\n          show={this.state.show}\r\n          target={this.state.target}\r\n          placement=\"bottom\"\r\n          container={this}\r\n          containerPadding={20}\r\n        >\r\n          <Popover id=\"popover-contained\" title=\"Popover bottom\">\r\n            <strong>Holy guacamole!</strong> Check this info.\r\n          </Popover>\r\n        </Overlay>\r\n      </ButtonToolbar>\r\n    );\r\n  }\r\n}\r\n\r\nrender(<Example />);\r\n`;\r\nconst jsCode7 = `\r\nclass UpdatingPopover extends React.Component {\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.children !== this.props.children) {\r\n      console.log('updating!');\r\n      this.props.scheduleUpdate();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <Popover {...this.props} />;\r\n  }\r\n}\r\n\r\nconst longContent = \\`\r\n  Very long\r\n  Multiline content\r\n  that is engaging and what-not\r\n\\`;\r\nconst shortContent = 'Short and sweet!';\r\n\r\nclass Example extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.state = { content: shortContent };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timer = setInterval(() => {\r\n      this.setState(state => ({\r\n        content: state.content === shortContent ? longContent : shortContent,\r\n      }));\r\n    }, 3000);\r\n  }\r\n\r\n  render() {\r\n    const { content } = this.state;\r\n\r\n    return (\r\n      <OverlayTrigger\r\n        trigger=\"click\"\r\n        overlay={\r\n          <UpdatingPopover id=\"popover-contained\">{content}</UpdatingPopover>\r\n        }\r\n      >\r\n        <Button onClick={this.handleClick}>Holy guacamole!</Button>\r\n      </OverlayTrigger>\r\n    );\r\n  }\r\n}\r\n\r\nrender(<Example />);\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}