{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\GCC\\\\wtf\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\GCC\\\\wtf\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:\\\\GCC\\\\wtf\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\GCC\\\\wtf\\\\src\\\\app\\\\modules\\\\Auth\\\\_redux\\\\AuthInit.js\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { shallowEqual, useSelector, connect, useDispatch } from \"react-redux\";\nimport { LayoutSplashScreen } from \"../../../../_metronic/layout\";\nimport * as auth from \"./authRedux\";\nimport { getUserByToken } from \"./authCrud\";\n\nfunction AuthInit(props) {\n  var didRequest = useRef(false);\n  var dispatch = useDispatch();\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      showSplashScreen = _useState2[0],\n      setShowSplashScreen = _useState2[1];\n\n  var _useSelector = useSelector(function (_ref) {\n    var auth = _ref.auth;\n    return {\n      authToken: auth.authToken\n    };\n  }, shallowEqual),\n      authToken = _useSelector.authToken;\n\n  console.log(authToken);\n  console.log(getUserByToken); // We should request user by authToken before rendering the application\n\n  useEffect(function () {\n    var requestUser = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                try {\n                  if (!didRequest.current) {\n                    // const { data: user } = await getUserByToken();\n                    // console.log(\"Sasasas\")\n                    dispatch(props.fulfillUser(authToken));\n                  }\n                } catch (error) {\n                  console.error(error);\n\n                  if (!didRequest.current) {\n                    dispatch(props.logout());\n                  }\n                } finally {\n                  setShowSplashScreen(false);\n                }\n\n                return _context.abrupt(\"return\", function () {\n                  return didRequest.current = true;\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function requestUser() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    if (authToken) {\n      requestUser();\n    } else {\n      dispatch(props.fulfillUser(undefined));\n      setShowSplashScreen(false);\n    } // eslint-disable-next-line\n\n  }, []);\n  return showSplashScreen ? /*#__PURE__*/React.createElement(LayoutSplashScreen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 29\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, props.children);\n}\n\nexport default connect(null, auth.actions)(AuthInit);","map":{"version":3,"sources":["D:/GCC/wtf/src/app/modules/Auth/_redux/AuthInit.js"],"names":["React","useRef","useEffect","useState","shallowEqual","useSelector","connect","useDispatch","LayoutSplashScreen","auth","getUserByToken","AuthInit","props","didRequest","dispatch","showSplashScreen","setShowSplashScreen","authToken","console","log","requestUser","current","fulfillUser","error","logout","undefined","children","actions"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,YAAT,EAAuBC,WAAvB,EAAoCC,OAApC,EAA6CC,WAA7C,QAAgE,aAAhE;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,OAAO,KAAKC,IAAZ,MAAsB,aAAtB;AACA,SAASC,cAAT,QAA+B,YAA/B;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,MAAMC,UAAU,GAAGZ,MAAM,CAAC,KAAD,CAAzB;AACA,MAAMa,QAAQ,GAAGP,WAAW,EAA5B;;AACA,kBAAgDJ,QAAQ,CAAC,IAAD,CAAxD;AAAA;AAAA,MAAOY,gBAAP;AAAA,MAAyBC,mBAAzB;;AACA,qBAAsBX,WAAW,CAC/B;AAAA,QAAGI,IAAH,QAAGA,IAAH;AAAA,WAAe;AACbQ,MAAAA,SAAS,EAAER,IAAI,CAACQ;AADH,KAAf;AAAA,GAD+B,EAI/Bb,YAJ+B,CAAjC;AAAA,MAAQa,SAAR,gBAAQA,SAAR;;AAMAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYT,cAAZ,EAXuB,CAYvB;;AACAR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMkB,WAAW;AAAA,2EAAG;AAAA;AAAA;AAAA;AAAA;AAClB,oBAAI;AACF,sBAAI,CAACP,UAAU,CAACQ,OAAhB,EAAyB;AACvB;AACA;AACAP,oBAAAA,QAAQ,CAACF,KAAK,CAACU,WAAN,CAAkBL,SAAlB,CAAD,CAAR;AACD;AACF,iBAND,CAME,OAAOM,KAAP,EAAc;AACdL,kBAAAA,OAAO,CAACK,KAAR,CAAcA,KAAd;;AACA,sBAAI,CAACV,UAAU,CAACQ,OAAhB,EAAyB;AACvBP,oBAAAA,QAAQ,CAACF,KAAK,CAACY,MAAN,EAAD,CAAR;AACD;AACF,iBAXD,SAWU;AACRR,kBAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD;;AAdiB,iDAgBX;AAAA,yBAAOH,UAAU,CAACQ,OAAX,GAAqB,IAA5B;AAAA,iBAhBW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAXD,WAAW;AAAA;AAAA;AAAA,OAAjB;;AAmBA,QAAIH,SAAJ,EAAe;AACbG,MAAAA,WAAW;AACZ,KAFD,MAEO;AACLN,MAAAA,QAAQ,CAACF,KAAK,CAACU,WAAN,CAAkBG,SAAlB,CAAD,CAAR;AACAT,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD,KAzBa,CA0Bd;;AACD,GA3BQ,EA2BN,EA3BM,CAAT;AA6BA,SAAOD,gBAAgB,gBAAG,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,gBAA4B,0CAAGH,KAAK,CAACc,QAAT,CAAnD;AACD;;AAED,eAAepB,OAAO,CAAC,IAAD,EAAOG,IAAI,CAACkB,OAAZ,CAAP,CAA4BhB,QAA5B,CAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { shallowEqual, useSelector, connect, useDispatch } from \"react-redux\";\r\nimport { LayoutSplashScreen } from \"../../../../_metronic/layout\";\r\nimport * as auth from \"./authRedux\";\r\nimport { getUserByToken } from \"./authCrud\";\r\n\r\nfunction AuthInit(props) {\r\n  const didRequest = useRef(false);\r\n  const dispatch = useDispatch();\r\n  const [showSplashScreen, setShowSplashScreen] = useState(true);\r\n  const { authToken } = useSelector(\r\n    ({ auth }) => ({\r\n      authToken: auth.authToken,\r\n    }),\r\n    shallowEqual\r\n  );\r\n  console.log(authToken);\r\n  console.log(getUserByToken);\r\n  // We should request user by authToken before rendering the application\r\n  useEffect(() => {\r\n    const requestUser = async () => {\r\n      try {\r\n        if (!didRequest.current) {\r\n          // const { data: user } = await getUserByToken();\r\n          // console.log(\"Sasasas\")\r\n          dispatch(props.fulfillUser(authToken));\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n        if (!didRequest.current) {\r\n          dispatch(props.logout());\r\n        }\r\n      } finally {\r\n        setShowSplashScreen(false);\r\n      }\r\n\r\n      return () => (didRequest.current = true);\r\n    };\r\n\r\n    if (authToken) {\r\n      requestUser();\r\n    } else {\r\n      dispatch(props.fulfillUser(undefined));\r\n      setShowSplashScreen(false);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return showSplashScreen ? <LayoutSplashScreen /> : <>{props.children}</>;\r\n}\r\n\r\nexport default connect(null, auth.actions)(AuthInit);\r\n"]},"metadata":{},"sourceType":"module"}