{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nisha\\\\OneDrive\\\\Desktop\\\\technogrip\\\\src\\\\app\\\\modules\\\\GoogleMaterialExamples\\\\utils\\\\UseMediaQueryExamplesPage.js\",\n    _s = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\n/* eslint-disable no-restricted-imports */\nimport React from \"react\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport json2mq from \"json2mq\";\nimport useMediaQueryTheme from \"@material-ui/core/useMediaQuery\";\nimport mediaQuery from \"css-mediaquery\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { Notice, KTCodeExample } from \"../../../../_metronic/_partials/controls\"; // Example 4\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction MyComponent4() {\n  _s();\n\n  const matches = useMediaQueryTheme(\"@media (min-width:600px)\");\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: `@media (min-width:600px) matches: ${matches}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 10\n  }, this);\n} // Example 5\n\n\n_s(MyComponent4, \"Pg0ftD/bjQWw1I9Ty0L0ea3nLGA=\", false, function () {\n  return [useMediaQueryTheme];\n});\n\n_c = MyComponent4;\n\nfunction useWidth5() {\n  _s3();\n\n  var _s2 = $RefreshSig$();\n\n  const theme5 = useTheme();\n  const keys5 = [...theme5.breakpoints.keys].reverse();\n  return keys5.reduce(_s2((output, key) => {\n    _s2();\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const matches = useMediaQuery(theme5.breakpoints.only(key));\n    return !output && matches ? key : output;\n  }, \"Notg82ym9o1DByeCiLcTemAcsz0=\", false, function () {\n    return [useMediaQuery];\n  }), null) || \"xs\";\n}\n\n_s3(useWidth5, \"nT5uefCaL4yUt4eheWaGaGr+D6o=\", false, function () {\n  return [useTheme];\n});\n\nfunction MyComponent5() {\n  _s4();\n\n  const width5 = useWidth5();\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: `width: ${width5}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 10\n  }, this);\n}\n\n_s4(MyComponent5, \"WyyXcwoG6tQCp3TlnGUDkmzhw40=\", false, function () {\n  return [useWidth5];\n});\n\n_c2 = MyComponent5;\nconst theme5 = createMuiTheme();\nexport default function UseMediaQueryExamplesPage() {\n  _s5();\n\n  // Example 1\n  const matches1 = useMediaQuery(\"(min-width:600px)\"); // Example 2\n\n  const theme2 = useTheme();\n  const matches2 = useMediaQuery(theme2.breakpoints.up(\"sm\")); // Example 3\n\n  const matches3 = useMediaQuery(json2mq({\n    minWidth: 600\n  })); // Example 4\n\n  const ssrMatchMedia4 = query => ({\n    matches4: mediaQuery.match(query, {\n      // The estimated CSS width of the browser.\n      // For the sake of this demo, we are using a fixed value.\n      // In production, you can look into client-hint https://caniuse.com/#search=client%20hint\n      // or user-agent resolution.\n      width: 800\n    })\n  });\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Notice, {\n      icon: \"flaticon-warning font-primary\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"This is a CSS media query hook for React. It listens for matches to a CSS media query. It allows the rendering of components based on whether the query matches or not.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"For more info please check the components's official\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          className: \"font-weight-bold\",\n          rel: \"noopener noreferrer\",\n          href: \"https://material-ui.com/components/use-media-query/\",\n          children: \"demos & documentation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-6\",\n        children: [/*#__PURE__*/_jsxDEV(KTCodeExample, {\n          jsCode: jsCode1,\n          beforeCodeTitle: \"Simple media query\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"You should provide a media query to the first argument of the hook. The media query string can by any valid CSS media query, e.g. \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"'print'\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 20\n            }, this), \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"separator separator-dashed my-7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: `(min-width:600px) matches: ${matches1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(KTCodeExample, {\n          jsCode: jsCode3,\n          beforeCodeTitle: \"Using JavaScript syntax\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"json2mq\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 15\n            }, this), \" is used to generate media query string from a JavaScript object.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"separator separator-dashed my-7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: `{ minWidth: 600 } matches: ${matches3}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(KTCodeExample, {\n          jsCode: jsCode5,\n          beforeCodeTitle: \"Migrating from withWidth()\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"The \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"withWidth()\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 19\n            }, this), \" higher-order component injects the screen width of the page. You can reproduce the same behavior with a \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"useWidth\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 17\n            }, this), \" hook:\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"separator separator-dashed my-7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ThemeProvider, {\n            theme: theme5,\n            children: /*#__PURE__*/_jsxDEV(MyComponent5, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-6\",\n        children: [/*#__PURE__*/_jsxDEV(KTCodeExample, {\n          jsCode: jsCode2,\n          beforeCodeTitle: \"Using Material-UI's breakpoint helpers\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"You can use Material-UI's \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"breakpoint helpers\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 41\n            }, this), \" as follows:\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"separator separator-dashed my-7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: `theme.breakpoints.up('sm') matches: ${matches2}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(KTCodeExample, {\n          jsCode: jsCode4,\n          beforeCodeTitle: \"Server-side rendering\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"An implementation of matchMedia is required on the server, we recommend using css-mediaquery. We also encourage the usage of the\", \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"useMediaQueryTheme\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 15\n            }, this), \" version of the hook that fetches properties from the theme. This way, you can provide a\", \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"ssrMatchMedia\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this), \" option once for all your React tree.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"separator separator-dashed my-7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ThemeProvider, {\n            theme: {\n              props: {\n                MuiUseMediaQuery: {\n                  ssrMatchMedia4\n                }\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(MyComponent4, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s5(UseMediaQueryExamplesPage, \"6Im0ac+tmAwGmrESj4RGGKHosfs=\", false, function () {\n  return [useMediaQuery, useTheme, useMediaQuery, useMediaQuery];\n});\n\n_c3 = UseMediaQueryExamplesPage;\nconst jsCode1 = `\nimport React from 'react';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nexport default function SimpleMediaQuery() {\n  const matches = useMediaQuery('(min-width:600px)');\n\n  return <span>{\\`(min-width:600px) matches: \\${matches}\\`}</span>;\n}\n`;\nconst jsCode2 = `\nimport React from 'react';\nimport { createMuiTheme, useTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nfunction MyComponent() {\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\n\n  return <span>{\\`theme.breakpoints.up('sm') matches: \\${matches}\\`}</span>;\n}\n\nconst theme = createMuiTheme();\n\nexport default function ThemeHelper() {\n  return (\n    <ThemeProvider theme={theme}>\n      <MyComponent />\n    </ThemeProvider>\n  );\n}\n`;\nconst jsCode3 = `\nimport React from 'react';\nimport json2mq from 'json2mq';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nexport default function JavaScriptMedia() {\n  const matches = useMediaQuery(\n    json2mq({\n      minWidth: 600,\n    }),\n  );\n\n  return <span>{\\`{ minWidth: 600 } matches: \\${matches}\\`}</span>;\n}\n`;\nconst jsCode4 = `\nimport React from 'react';\nimport mediaQuery from 'css-mediaquery';\nimport { ThemeProvider } from '@material-ui/styles';\nimport useMediaQueryTheme from '@material-ui/core/useMediaQuery';\n\nfunction MyComponent() {\n  const matches = useMediaQueryTheme('@media (min-width:600px)');\n\n  return <span>{\\`@media (min-width:600px) matches: \\${matches}\\`}</span>;\n}\n\nexport default function ServerSide() {\n  // Use https://github.com/ericf/css-mediaquery as ponyfill.\n  const ssrMatchMedia = query => ({\n    matches: mediaQuery.match(query, {\n      // The estimated CSS width of the browser.\n      // For the sake of this demo, we are using a fixed value.\n      // In production, you can look into client-hint https://caniuse.com/#search=client%20hint\n      // or user-agent resolution.\n      width: 800,\n    }),\n  });\n\n  return (\n    <ThemeProvider theme={{ props: { MuiUseMediaQuery: { ssrMatchMedia } } }}>\n      <MyComponent />\n    </ThemeProvider>\n  );\n}\n`;\nconst jsCode5 = `\n/**\n * Be careful using this hook. It only works because the number of\n * breakpoints in theme is static. It will break once you change the number of\n * breakpoints. See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\n */\nfunction useWidth() {\n  const theme = useTheme();\n  const keys = [...theme.breakpoints.keys].reverse();\n  return (\n    keys.reduce((output, key) => {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const matches = useMediaQuery(theme.breakpoints.only(key));\n      return !output && matches ? key : output;\n    }, null) || 'xs'\n  );\n}\n`;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"MyComponent4\");\n$RefreshReg$(_c2, \"MyComponent5\");\n$RefreshReg$(_c3, \"UseMediaQueryExamplesPage\");","map":{"version":3,"sources":["C:/Users/nisha/OneDrive/Desktop/technogrip/src/app/modules/GoogleMaterialExamples/utils/UseMediaQueryExamplesPage.js"],"names":["React","useMediaQuery","useTheme","json2mq","useMediaQueryTheme","mediaQuery","ThemeProvider","createMuiTheme","Notice","KTCodeExample","MyComponent4","matches","useWidth5","theme5","keys5","breakpoints","keys","reverse","reduce","output","key","only","MyComponent5","width5","UseMediaQueryExamplesPage","matches1","theme2","matches2","up","matches3","minWidth","ssrMatchMedia4","query","matches4","match","width","jsCode1","jsCode3","jsCode5","jsCode2","jsCode4","props","MuiUseMediaQuery"],"mappings":"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AAA,oBALF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,eAWE;AAAK,YAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,kBAXF,eAYE,QAAC,aAAD;AACE,YAAA,KAAK,EAAE;AAAEC,cAAAA,KAAK,EAAE;AAAEC,gBAAAA,gBAAgB,EAAE;AAAEX,kBAAAA;AAAF;AAApB;AAAT,aADT;AAAA,mCAGE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAHF;AAAA;AAAA;AAAA;AAAA,kBAZF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF;AAAA;AAAA;AAAA;AAAA;AAAA,cAvCF;AAAA;AAAA;AAAA;AAAA;AAAA,YApBF;AAAA,kBADF;AA+FD;;IAzHuBP,yB;UAELvB,a,EAGFC,Q,EACED,a,EAGAA,a;;;MATKuB,yB;AA2HxB,MAAMY,OAAO,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;AAUA,MAAMG,OAAO,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAtBA;AAuBA,MAAMF,OAAO,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdA;AAeA,MAAMG,OAAO,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA9BA;AA+BA,MAAMF,OAAO,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBA","sourcesContent":["/* eslint-disable no-restricted-imports */\r\nimport React from \"react\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport {useTheme} from \"@material-ui/core/styles\";\r\nimport json2mq from \"json2mq\";\r\nimport useMediaQueryTheme from \"@material-ui/core/useMediaQuery\";\r\nimport mediaQuery from \"css-mediaquery\";\r\nimport {ThemeProvider} from \"@material-ui/styles\";\r\nimport {createMuiTheme} from \"@material-ui/core/styles\";\r\nimport {Notice, KTCodeExample} from \"../../../../_metronic/_partials/controls\";\r\n\r\n// Example 4\r\nfunction MyComponent4() {\r\n  const matches = useMediaQueryTheme(\"@media (min-width:600px)\");\r\n\r\n  return <span>{`@media (min-width:600px) matches: ${matches}`}</span>;\r\n}\r\n\r\n// Example 5\r\nfunction useWidth5() {\r\n  const theme5 = useTheme();\r\n  const keys5 = [...theme5.breakpoints.keys].reverse();\r\n  return (\r\n    keys5.reduce((output, key) => {\r\n      // eslint-disable-next-line react-hooks/rules-of-hooks\r\n      const matches = useMediaQuery(theme5.breakpoints.only(key));\r\n      return !output && matches ? key : output;\r\n    }, null) || \"xs\"\r\n  );\r\n}\r\n\r\nfunction MyComponent5() {\r\n  const width5 = useWidth5();\r\n  return <span>{`width: ${width5}`}</span>;\r\n}\r\n\r\nconst theme5 = createMuiTheme();\r\n\r\nexport default function UseMediaQueryExamplesPage() {\r\n  // Example 1\r\n  const matches1 = useMediaQuery(\"(min-width:600px)\");\r\n\r\n  // Example 2\r\n  const theme2 = useTheme();\r\n  const matches2 = useMediaQuery(theme2.breakpoints.up(\"sm\"));\r\n\r\n  // Example 3\r\n  const matches3 = useMediaQuery(\r\n    json2mq({\r\n      minWidth: 600\r\n    })\r\n  );\r\n\r\n  // Example 4\r\n  const ssrMatchMedia4 = query => ({\r\n    matches4: mediaQuery.match(query, {\r\n      // The estimated CSS width of the browser.\r\n      // For the sake of this demo, we are using a fixed value.\r\n      // In production, you can look into client-hint https://caniuse.com/#search=client%20hint\r\n      // or user-agent resolution.\r\n      width: 800\r\n    })\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Notice icon=\"flaticon-warning font-primary\">\r\n        <span>\r\n          This is a CSS media query hook for React. It listens for matches to a\r\n          CSS media query. It allows the rendering of components based on\r\n          whether the query matches or not.\r\n        </span>{\" \"}\r\n        <span>\r\n          For more info please check the components's official{\" \"}\r\n          <a\r\n            target=\"_blank\"\r\n            className=\"font-weight-bold\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://material-ui.com/components/use-media-query/\"\r\n          >\r\n            demos & documentation\r\n          </a>\r\n        </span>\r\n      </Notice>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <KTCodeExample jsCode={jsCode1} beforeCodeTitle=\"Simple media query\">\r\n            <span>\r\n              You should provide a media query to the first argument of the\r\n              hook. The media query string can by any valid CSS media query,\r\n              e.g. <code>'print'</code>.\r\n            </span>\r\n            <div className=\"separator separator-dashed my-7\"></div>\r\n            <span>{`(min-width:600px) matches: ${matches1}`}</span>\r\n          </KTCodeExample>\r\n\r\n          <KTCodeExample\r\n            jsCode={jsCode3}\r\n            beforeCodeTitle=\"Using JavaScript syntax\"\r\n          >\r\n            <span>\r\n              <code>json2mq</code> is used to generate media query string from a\r\n              JavaScript object.\r\n            </span>\r\n            <div className=\"separator separator-dashed my-7\"></div>\r\n            <span>{`{ minWidth: 600 } matches: ${matches3}`}</span>\r\n          </KTCodeExample>\r\n\r\n          <KTCodeExample\r\n            jsCode={jsCode5}\r\n            beforeCodeTitle=\"Migrating from withWidth()\"\r\n          >\r\n            <span>\r\n              The <code>withWidth()</code> higher-order component injects the\r\n              screen width of the page. You can reproduce the same behavior with\r\n              a <code>useWidth</code> hook:\r\n            </span>\r\n            <div className=\"separator separator-dashed my-7\"></div>\r\n            <ThemeProvider theme={theme5}>\r\n              <MyComponent5 />\r\n            </ThemeProvider>\r\n          </KTCodeExample>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <KTCodeExample\r\n            jsCode={jsCode2}\r\n            beforeCodeTitle=\"Using Material-UI's breakpoint helpers\"\r\n          >\r\n            <span>\r\n              You can use Material-UI's <code>breakpoint helpers</code> as\r\n              follows:\r\n            </span>\r\n            <div className=\"separator separator-dashed my-7\"></div>\r\n            <span>{`theme.breakpoints.up('sm') matches: ${matches2}`}</span>\r\n          </KTCodeExample>\r\n\r\n          <KTCodeExample\r\n            jsCode={jsCode4}\r\n            beforeCodeTitle=\"Server-side rendering\"\r\n          >\r\n            <span>\r\n              An implementation of matchMedia is required on the server, we\r\n              recommend using css-mediaquery. We also encourage the usage of the{\" \"}\r\n              <code>useMediaQueryTheme</code> version of the hook that fetches\r\n              properties from the theme. This way, you can provide a{\" \"}\r\n              <code>ssrMatchMedia</code> option once for all your React tree.\r\n            </span>\r\n            <div className=\"separator separator-dashed my-7\"></div>\r\n            <ThemeProvider\r\n              theme={{ props: { MuiUseMediaQuery: { ssrMatchMedia4 } } }}\r\n            >\r\n              <MyComponent4 />\r\n            </ThemeProvider>\r\n          </KTCodeExample>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst jsCode1 = `\r\nimport React from 'react';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nexport default function SimpleMediaQuery() {\r\n  const matches = useMediaQuery('(min-width:600px)');\r\n\r\n  return <span>{\\`(min-width:600px) matches: \\${matches}\\`}</span>;\r\n}\r\n`;\r\nconst jsCode2 = `\r\nimport React from 'react';\r\nimport { createMuiTheme, useTheme } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nfunction MyComponent() {\r\n  const theme = useTheme();\r\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\r\n\r\n  return <span>{\\`theme.breakpoints.up('sm') matches: \\${matches}\\`}</span>;\r\n}\r\n\r\nconst theme = createMuiTheme();\r\n\r\nexport default function ThemeHelper() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <MyComponent />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n`;\r\nconst jsCode3 = `\r\nimport React from 'react';\r\nimport json2mq from 'json2mq';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nexport default function JavaScriptMedia() {\r\n  const matches = useMediaQuery(\r\n    json2mq({\r\n      minWidth: 600,\r\n    }),\r\n  );\r\n\r\n  return <span>{\\`{ minWidth: 600 } matches: \\${matches}\\`}</span>;\r\n}\r\n`;\r\nconst jsCode4 = `\r\nimport React from 'react';\r\nimport mediaQuery from 'css-mediaquery';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport useMediaQueryTheme from '@material-ui/core/useMediaQuery';\r\n\r\nfunction MyComponent() {\r\n  const matches = useMediaQueryTheme('@media (min-width:600px)');\r\n\r\n  return <span>{\\`@media (min-width:600px) matches: \\${matches}\\`}</span>;\r\n}\r\n\r\nexport default function ServerSide() {\r\n  // Use https://github.com/ericf/css-mediaquery as ponyfill.\r\n  const ssrMatchMedia = query => ({\r\n    matches: mediaQuery.match(query, {\r\n      // The estimated CSS width of the browser.\r\n      // For the sake of this demo, we are using a fixed value.\r\n      // In production, you can look into client-hint https://caniuse.com/#search=client%20hint\r\n      // or user-agent resolution.\r\n      width: 800,\r\n    }),\r\n  });\r\n\r\n  return (\r\n    <ThemeProvider theme={{ props: { MuiUseMediaQuery: { ssrMatchMedia } } }}>\r\n      <MyComponent />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n`;\r\nconst jsCode5 = `\r\n/**\r\n * Be careful using this hook. It only works because the number of\r\n * breakpoints in theme is static. It will break once you change the number of\r\n * breakpoints. See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\r\n */\r\nfunction useWidth() {\r\n  const theme = useTheme();\r\n  const keys = [...theme.breakpoints.keys].reverse();\r\n  return (\r\n    keys.reduce((output, key) => {\r\n      // eslint-disable-next-line react-hooks/rules-of-hooks\r\n      const matches = useMediaQuery(theme.breakpoints.only(key));\r\n      return !output && matches ? key : output;\r\n    }, null) || 'xs'\r\n  );\r\n}\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}