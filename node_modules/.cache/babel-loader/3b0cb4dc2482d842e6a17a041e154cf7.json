{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nisha\\\\OneDrive\\\\Desktop\\\\technogrip\\\\src\\\\app\\\\modules\\\\Auth\\\\_redux\\\\AuthInit.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { shallowEqual, useSelector, connect, useDispatch } from \"react-redux\";\nimport { LayoutSplashScreen } from \"../../../../_metronic/layout\";\nimport * as auth from \"./authRedux\";\nimport { getUserByToken } from \"./authCrud\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction AuthInit(props) {\n  _s();\n\n  const didRequest = useRef(false);\n  const dispatch = useDispatch();\n  const [showSplashScreen, setShowSplashScreen] = useState(true);\n  const {\n    authToken\n  } = useSelector(({\n    auth\n  }) => ({\n    authToken: auth.authToken\n  }), shallowEqual); // We should request user by authToken before rendering the application\n\n  useEffect(() => {\n    const requestUser = async () => {\n      try {\n        if (!didRequest.current) {\n          const {\n            data: user\n          } = await getUserByToken();\n          dispatch(props.fulfillUser(user));\n        }\n      } catch (error) {\n        console.error(error);\n\n        if (!didRequest.current) {\n          dispatch(props.logout());\n        }\n      } finally {\n        setShowSplashScreen(false);\n      }\n\n      return () => didRequest.current = true;\n    };\n\n    if (authToken) {\n      requestUser();\n    } else {\n      dispatch(props.fulfillUser(undefined));\n      setShowSplashScreen(false);\n    } // eslint-disable-next-line\n\n  }, []);\n  return showSplashScreen ? /*#__PURE__*/_jsxDEV(LayoutSplashScreen, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 29\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: props.children\n  }, void 0, false);\n}\n\n_s(AuthInit, \"oRn2I2rEgt/qqxeutYUEf1AxtPc=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = AuthInit;\nexport default connect(null, auth.actions)(AuthInit);\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthInit\");","map":{"version":3,"sources":["C:/Users/nisha/OneDrive/Desktop/technogrip/src/app/modules/Auth/_redux/AuthInit.js"],"names":["React","useRef","useEffect","useState","shallowEqual","useSelector","connect","useDispatch","LayoutSplashScreen","auth","getUserByToken","AuthInit","props","didRequest","dispatch","showSplashScreen","setShowSplashScreen","authToken","requestUser","current","data","user","fulfillUser","error","console","logout","undefined","children","actions"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,YAAT,EAAuBC,WAAvB,EAAoCC,OAApC,EAA6CC,WAA7C,QAAgE,aAAhE;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,OAAO,KAAKC,IAAZ,MAAsB,aAAtB;AACA,SAASC,cAAT,QAA+B,YAA/B;;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACvB,QAAMC,UAAU,GAAGZ,MAAM,CAAC,KAAD,CAAzB;AACA,QAAMa,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAM,CAACQ,gBAAD,EAAmBC,mBAAnB,IAA0Cb,QAAQ,CAAC,IAAD,CAAxD;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAgBZ,WAAW,CAC/B,CAAC;AAAEI,IAAAA;AAAF,GAAD,MAAe;AACbQ,IAAAA,SAAS,EAAER,IAAI,CAACQ;AADH,GAAf,CAD+B,EAI/Bb,YAJ+B,CAAjC,CAJuB,CAWvB;;AACAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,WAAW,GAAG,YAAY;AAC9B,UAAI;AACF,YAAI,CAACL,UAAU,CAACM,OAAhB,EAAyB;AACvB,gBAAM;AAAEC,YAAAA,IAAI,EAAEC;AAAR,cAAiB,MAAMX,cAAc,EAA3C;AACAI,UAAAA,QAAQ,CAACF,KAAK,CAACU,WAAN,CAAkBD,IAAlB,CAAD,CAAR;AACD;AACF,OALD,CAKE,OAAOE,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;;AACA,YAAI,CAACV,UAAU,CAACM,OAAhB,EAAyB;AACvBL,UAAAA,QAAQ,CAACF,KAAK,CAACa,MAAN,EAAD,CAAR;AACD;AACF,OAVD,SAUU;AACRT,QAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD;;AAED,aAAO,MAAOH,UAAU,CAACM,OAAX,GAAqB,IAAnC;AACD,KAhBD;;AAkBA,QAAIF,SAAJ,EAAe;AACbC,MAAAA,WAAW;AACZ,KAFD,MAEO;AACLJ,MAAAA,QAAQ,CAACF,KAAK,CAACU,WAAN,CAAkBI,SAAlB,CAAD,CAAR;AACAV,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD,KAxBa,CAyBd;;AACD,GA1BQ,EA0BN,EA1BM,CAAT;AA4BA,SAAOD,gBAAgB,gBAAG,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,UAAH,gBAA4B;AAAA,cAAGH,KAAK,CAACe;AAAT,mBAAnD;AACD;;GAzCQhB,Q;UAEUJ,W,EAEKF,W;;;KAJfM,Q;AA2CT,eAAeL,OAAO,CAAC,IAAD,EAAOG,IAAI,CAACmB,OAAZ,CAAP,CAA4BjB,QAA5B,CAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { shallowEqual, useSelector, connect, useDispatch } from \"react-redux\";\r\nimport { LayoutSplashScreen } from \"../../../../_metronic/layout\";\r\nimport * as auth from \"./authRedux\";\r\nimport { getUserByToken } from \"./authCrud\";\r\n\r\nfunction AuthInit(props) {\r\n  const didRequest = useRef(false);\r\n  const dispatch = useDispatch();\r\n  const [showSplashScreen, setShowSplashScreen] = useState(true);\r\n  const { authToken } = useSelector(\r\n    ({ auth }) => ({\r\n      authToken: auth.authToken,\r\n    }),\r\n    shallowEqual\r\n  );\r\n\r\n  // We should request user by authToken before rendering the application\r\n  useEffect(() => {\r\n    const requestUser = async () => {\r\n      try {\r\n        if (!didRequest.current) {\r\n          const { data: user } = await getUserByToken();\r\n          dispatch(props.fulfillUser(user));\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n        if (!didRequest.current) {\r\n          dispatch(props.logout());\r\n        }\r\n      } finally {\r\n        setShowSplashScreen(false);\r\n      }\r\n\r\n      return () => (didRequest.current = true);\r\n    };\r\n\r\n    if (authToken) {\r\n      requestUser();\r\n    } else {\r\n      dispatch(props.fulfillUser(undefined));\r\n      setShowSplashScreen(false);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return showSplashScreen ? <LayoutSplashScreen /> : <>{props.children}</>;\r\n}\r\n\r\nexport default connect(null, auth.actions)(AuthInit);\r\n"]},"metadata":{},"sourceType":"module"}