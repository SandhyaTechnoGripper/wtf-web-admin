{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialCustomersState = {\n  listLoading: false,\n  actionsLoading: false,\n  totalCount: 0,\n  entities: null,\n  customerForEdit: undefined,\n  lastError: null\n};\nexport const callTypes = {\n  list: \"list\",\n  action: \"action\"\n};\nexport const customersSlice = createSlice({\n  name: \"customers\",\n  initialState: initialCustomersState,\n  reducers: {\n    catchError: (state, action) => {\n      state.error = `${action.type}: ${action.payload.error}`;\n\n      if (action.payload.callType === callTypes.list) {\n        state.listLoading = false;\n      } else {\n        state.actionsLoading = false;\n      }\n    },\n    startCall: (state, action) => {\n      state.error = null;\n\n      if (action.payload.callType === callTypes.list) {\n        state.listLoading = true;\n      } else {\n        state.actionsLoading = true;\n      }\n    },\n    // getCustomerById\n    customerFetched: (state, action) => {\n      state.actionsLoading = false;\n      state.customerForEdit = action.payload.customerForEdit;\n      state.error = null;\n    },\n    // findCustomers\n    customersFetched: (state, action) => {\n      const {\n        totalCount,\n        entities\n      } = action.payload;\n      state.listLoading = false;\n      state.error = null;\n      state.entities = entities;\n      state.totalCount = totalCount;\n    },\n    // createCustomer\n    customerCreated: (state, action) => {\n      state.ewactionsLoading = false;\n      state.error = null;\n      state.entities.push(action.payload.customer);\n    },\n    // updateCustomer\n    customerUpdated: (state, action) => {\n      state.error = null;\n      state.actionsLoading = false;\n      state.entities = state.entities.map(entity => {\n        if (entity.id === action.payload.customer.id) {\n          return action.payload.customer;\n        }\n\n        return entity;\n      });\n    },\n    // deleteCustomer\n    customerDeleted: (state, action) => {\n      state.error = null;\n      state.actionsLoading = false;\n      state.entities = state.entities.filter(el => el.id !== action.payload.id);\n    },\n    // deleteCustomers\n    customersDeleted: (state, action) => {\n      state.error = null;\n      state.actionsLoading = false;\n      state.entities = state.entities.filter(el => !action.payload.ids.includes(el.id));\n    },\n    // customersUpdateState\n    customersStatusUpdated: (state, action) => {\n      state.actionsLoading = false;\n      state.error = null;\n      const {\n        ids,\n        status\n      } = action.payload;\n      state.entities = state.entities.map(entity => {\n        if (ids.findIndex(id => id === entity.id) > -1) {\n          entity.status = status;\n        }\n\n        return entity;\n      });\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/nisha/OneDrive/Desktop/technogrip/src/app/modules/ECommerce/_redux/customers/customersSlice.js"],"names":["createSlice","initialCustomersState","listLoading","actionsLoading","totalCount","entities","customerForEdit","undefined","lastError","callTypes","list","action","customersSlice","name","initialState","reducers","catchError","state","error","type","payload","callType","startCall","customerFetched","customersFetched","customerCreated","ewactionsLoading","push","customer","customerUpdated","map","entity","id","customerDeleted","filter","el","customersDeleted","ids","includes","customersStatusUpdated","status","findIndex"],"mappings":"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","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\r\n\r\nconst initialCustomersState = {\r\n  listLoading: false,\r\n  actionsLoading: false,\r\n  totalCount: 0,\r\n  entities: null,\r\n  customerForEdit: undefined,\r\n  lastError: null\r\n};\r\nexport const callTypes = {\r\n  list: \"list\",\r\n  action: \"action\"\r\n};\r\n\r\nexport const customersSlice = createSlice({\r\n  name: \"customers\",\r\n  initialState: initialCustomersState,\r\n  reducers: {\r\n    catchError: (state, action) => {\r\n      state.error = `${action.type}: ${action.payload.error}`;\r\n      if (action.payload.callType === callTypes.list) {\r\n        state.listLoading = false;\r\n      } else {\r\n        state.actionsLoading = false;\r\n      }\r\n    },\r\n    startCall: (state, action) => {\r\n      state.error = null;\r\n      if (action.payload.callType === callTypes.list) {\r\n        state.listLoading = true;\r\n      } else {\r\n        state.actionsLoading = true;\r\n      }\r\n    },\r\n    // getCustomerById\r\n    customerFetched: (state, action) => {\r\n      state.actionsLoading = false;\r\n      state.customerForEdit = action.payload.customerForEdit;\r\n      state.error = null;\r\n    },\r\n    // findCustomers\r\n    customersFetched: (state, action) => {\r\n      const { totalCount, entities } = action.payload;\r\n      state.listLoading = false;\r\n      state.error = null;\r\n      state.entities = entities;\r\n      state.totalCount = totalCount;\r\n    },\r\n    // createCustomer\r\n    customerCreated: (state, action) => {\r\n      state.ewactionsLoading = false;\r\n      state.error = null;\r\n      state.entities.push(action.payload.customer);\r\n    },\r\n    // updateCustomer\r\n    customerUpdated: (state, action) => {\r\n      state.error = null;\r\n      state.actionsLoading = false;\r\n      state.entities = state.entities.map(entity => {\r\n        if (entity.id === action.payload.customer.id) {\r\n          return action.payload.customer;\r\n        }\r\n        return entity;\r\n      });\r\n    },\r\n    // deleteCustomer\r\n    customerDeleted: (state, action) => {\r\n      state.error = null;\r\n      state.actionsLoading = false;\r\n      state.entities = state.entities.filter(el => el.id !== action.payload.id);\r\n    },\r\n    // deleteCustomers\r\n    customersDeleted: (state, action) => {\r\n      state.error = null;\r\n      state.actionsLoading = false;\r\n      state.entities = state.entities.filter(\r\n        el => !action.payload.ids.includes(el.id)\r\n      );\r\n    },\r\n    // customersUpdateState\r\n    customersStatusUpdated: (state, action) => {\r\n      state.actionsLoading = false;\r\n      state.error = null;\r\n      const { ids, status } = action.payload;\r\n      state.entities = state.entities.map(entity => {\r\n        if (ids.findIndex(id => id === entity.id) > -1) {\r\n          entity.status = status;\r\n        }\r\n        return entity;\r\n      });\r\n    }\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}