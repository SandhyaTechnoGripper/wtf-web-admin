{"ast":null,"code":"import customerTableMock from \"./customerTableMock\";\nimport MockUtils from \"./mock.utils\";\nexport default function mockCustomer(mock) {\n  mock.onPost(\"api/customers\").reply(({\n    data\n  }) => {\n    const {\n      customer\n    } = JSON.parse(data);\n    const {\n      firstName = \"\",\n      lastName = \"\",\n      email = \"\",\n      userName = \"\",\n      gender = \"Female\",\n      status = 0,\n      dateOfBbirth = \"01/01/2019\",\n      ipAddress = \"127.0.0.1\",\n      type = 1\n    } = customer;\n    const id = generateUserId();\n    const newCustomer = {\n      id,\n      firstName,\n      lastName,\n      email,\n      userName,\n      gender,\n      status,\n      dateOfBbirth,\n      ipAddress,\n      type\n    };\n    customerTableMock.push(newCustomer);\n    return [200, {\n      customer: newCustomer\n    }];\n  });\n  mock.onPost(\"api/customers/find\").reply(config => {\n    const mockUtils = new MockUtils();\n    const {\n      queryParams\n    } = JSON.parse(config.data);\n    const filterdCustomers = mockUtils.baseFilter(customerTableMock, queryParams);\n    return [200, filterdCustomers];\n  });\n  mock.onPost(\"api/customers/deleteCustomers\").reply(config => {\n    const {\n      ids\n    } = JSON.parse(config.data);\n    ids.forEach(id => {\n      const index = customerTableMock.findIndex(el => el.id === id);\n\n      if (index > -1) {\n        customerTableMock.splice(index, 1);\n      }\n    });\n    return [200];\n  });\n  mock.onPost(\"api/customers/updateStatusForCustomers\").reply(config => {\n    const {\n      ids,\n      status\n    } = JSON.parse(config.data);\n    customerTableMock.forEach(el => {\n      if (ids.findIndex(id => id === el.id) > -1) {\n        el.status = status;\n      }\n    });\n    return [200];\n  });\n  mock.onGet(/api\\/customers\\/\\d+/).reply(config => {\n    const id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\n    const customer = customerTableMock.find(el => el.id === +id);\n\n    if (!customer) {\n      return [400];\n    }\n\n    return [200, customer];\n  });\n  mock.onPut(/api\\/customers\\/\\d+/).reply(config => {\n    const id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\n    const {\n      customer\n    } = JSON.parse(config.data);\n    const index = customerTableMock.findIndex(el => el.id === +id);\n\n    if (!index) {\n      return [400];\n    }\n\n    customerTableMock[index] = { ...customer\n    };\n    return [200];\n  });\n  mock.onDelete(/api\\/customers\\/\\d+/).reply(config => {\n    const id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\n    const index = customerTableMock.findIndex(el => el.id === +id);\n    customerTableMock.splice(index, 1);\n\n    if (!index === -1) {\n      return [400];\n    }\n\n    return [200];\n  });\n}\n\nfunction generateUserId() {\n  const ids = customerTableMock.map(el => el.id);\n  const maxId = Math.max(...ids);\n  return maxId + 1;\n}","map":{"version":3,"sources":["C:/Users/nisha/OneDrive/Desktop/technogrip/src/app/modules/ECommerce/__mocks__/mockCustomer.js"],"names":["customerTableMock","MockUtils","mockCustomer","mock","onPost","reply","data","customer","JSON","parse","firstName","lastName","email","userName","gender","status","dateOfBbirth","ipAddress","type","id","generateUserId","newCustomer","push","config","mockUtils","queryParams","filterdCustomers","baseFilter","ids","forEach","index","findIndex","el","splice","onGet","url","match","find","onPut","onDelete","map","maxId","Math","max"],"mappings":"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","sourcesContent":["import customerTableMock from \"./customerTableMock\";\r\nimport MockUtils from \"./mock.utils\";\r\n\r\nexport default function mockCustomer(mock) {\r\n  mock.onPost(\"api/customers\").reply(({ data }) => {\r\n    const { customer } = JSON.parse(data);\r\n    const {\r\n      firstName = \"\",\r\n      lastName = \"\",\r\n      email = \"\",\r\n      userName = \"\",\r\n      gender = \"Female\",\r\n      status = 0,\r\n      dateOfBbirth = \"01/01/2019\",\r\n      ipAddress = \"127.0.0.1\",\r\n      type = 1\r\n    } = customer;\r\n\r\n    const id = generateUserId();\r\n    const newCustomer = {\r\n      id,\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      userName,\r\n      gender,\r\n      status,\r\n      dateOfBbirth,\r\n      ipAddress,\r\n      type\r\n    };\r\n    customerTableMock.push(newCustomer);\r\n    return [200, { customer: newCustomer }];\r\n  });\r\n\r\n  mock.onPost(\"api/customers/find\").reply(config => {\r\n    const mockUtils = new MockUtils();\r\n    const { queryParams } = JSON.parse(config.data);\r\n    const filterdCustomers = mockUtils.baseFilter(\r\n      customerTableMock,\r\n      queryParams\r\n    );\r\n    return [200, filterdCustomers];\r\n  });\r\n\r\n  mock.onPost(\"api/customers/deleteCustomers\").reply(config => {\r\n    const { ids } = JSON.parse(config.data);\r\n    ids.forEach(id => {\r\n      const index = customerTableMock.findIndex(el => el.id === id);\r\n      if (index > -1) {\r\n        customerTableMock.splice(index, 1);\r\n      }\r\n    });\r\n    return [200];\r\n  });\r\n\r\n  mock.onPost(\"api/customers/updateStatusForCustomers\").reply(config => {\r\n    const { ids, status } = JSON.parse(config.data);\r\n    customerTableMock.forEach(el => {\r\n      if (ids.findIndex(id => id === el.id) > -1) {\r\n        el.status = status;\r\n      }\r\n    });\r\n    return [200];\r\n  });\r\n\r\n  mock.onGet(/api\\/customers\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\r\n    const customer = customerTableMock.find(el => el.id === +id);\r\n    if (!customer) {\r\n      return [400];\r\n    }\r\n\r\n    return [200, customer];\r\n  });\r\n\r\n  mock.onPut(/api\\/customers\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\r\n    const { customer } = JSON.parse(config.data);\r\n    const index = customerTableMock.findIndex(el => el.id === +id);\r\n    if (!index) {\r\n      return [400];\r\n    }\r\n\r\n    customerTableMock[index] = { ...customer };\r\n    return [200];\r\n  });\r\n\r\n  mock.onDelete(/api\\/customers\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\r\n    const index = customerTableMock.findIndex(el => el.id === +id);\r\n    customerTableMock.splice(index, 1);\r\n    if (!index === -1) {\r\n      return [400];\r\n    }\r\n\r\n    return [200];\r\n  });\r\n}\r\n\r\nfunction generateUserId() {\r\n  const ids = customerTableMock.map(el => el.id);\r\n  const maxId = Math.max(...ids);\r\n  return maxId + 1;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}