{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nisha\\\\OneDrive\\\\Desktop\\\\technogrip\\\\src\\\\app\\\\modules\\\\ECommerce\\\\pages\\\\customers\\\\customers-delete-dialog\\\\CustomersDeleteDialog.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../../../_redux/customers/customersActions\";\nimport { useCustomersUIContext } from \"../CustomersUIContext\";\nimport { ModalProgressBar } from \"../../../../../../_metronic/_partials/controls\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function CustomersDeleteDialog({\n  show,\n  onHide\n}) {\n  _s();\n\n  // Customers UI Context\n  const customersUIContext = useCustomersUIContext();\n  const customersUIProps = useMemo(() => {\n    return {\n      ids: customersUIContext.ids,\n      setIds: customersUIContext.setIds,\n      queryParams: customersUIContext.queryParams\n    };\n  }, [customersUIContext]); // Customers Redux state\n\n  const dispatch = useDispatch();\n  const {\n    isLoading\n  } = useSelector(state => ({\n    isLoading: state.customers.actionsLoading\n  }), shallowEqual); // if customers weren't selected we should close modal\n\n  useEffect(() => {\n    if (!customersUIProps.ids || customersUIProps.ids.length === 0) {\n      onHide();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [customersUIProps.ids]); // looking for loading/dispatch\n\n  useEffect(() => {}, [isLoading, dispatch]);\n\n  const deleteCustomers = () => {\n    // server request for deleting customer by selected ids\n    dispatch(actions.deleteCustomers(customersUIProps.ids)).then(() => {\n      // refresh list after deletion\n      dispatch(actions.fetchCustomers(customersUIProps.queryParams)).then(() => {\n        // clear selections list\n        customersUIProps.setIds([]); // closing delete modal\n\n        onHide();\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: show,\n    onHide: onHide,\n    \"aria-labelledby\": \"example-modal-sizes-title-lg\",\n    children: [isLoading && /*#__PURE__*/_jsxDEV(ModalProgressBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        id: \"example-modal-sizes-title-lg\",\n        children: \"Customers Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: [!isLoading && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Are you sure to permanently delete selected customers?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Customer are deleting...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: onHide,\n          className: \"btn btn-light btn-elevate\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: \" \"\n        }, void 0, false), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: deleteCustomers,\n          className: \"btn btn-primary btn-elevate\",\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CustomersDeleteDialog, \"85S4Of5k1wCEmkUeX+W+YRjoJjk=\", false, function () {\n  return [useCustomersUIContext, useDispatch, useSelector];\n});\n\n_c = CustomersDeleteDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomersDeleteDialog\");","map":{"version":3,"sources":["C:/Users/nisha/OneDrive/Desktop/technogrip/src/app/modules/ECommerce/pages/customers/customers-delete-dialog/CustomersDeleteDialog.js"],"names":["React","useEffect","useMemo","Modal","shallowEqual","useDispatch","useSelector","actions","useCustomersUIContext","ModalProgressBar","CustomersDeleteDialog","show","onHide","customersUIContext","customersUIProps","ids","setIds","queryParams","dispatch","isLoading","state","customers","actionsLoading","length","deleteCustomers","then","fetchCustomers"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\nimport * as actions from \"../../../_redux/customers/customersActions\";\r\nimport { useCustomersUIContext } from \"../CustomersUIContext\";\r\nimport {ModalProgressBar} from \"../../../../../../_metronic/_partials/controls\";\r\n\r\nexport function CustomersDeleteDialog({ show, onHide }) {\r\n  // Customers UI Context\r\n  const customersUIContext = useCustomersUIContext();\r\n  const customersUIProps = useMemo(() => {\r\n    return {\r\n      ids: customersUIContext.ids,\r\n      setIds: customersUIContext.setIds,\r\n      queryParams: customersUIContext.queryParams,\r\n    };\r\n  }, [customersUIContext]);\r\n\r\n  // Customers Redux state\r\n  const dispatch = useDispatch();\r\n  const { isLoading } = useSelector(\r\n    (state) => ({ isLoading: state.customers.actionsLoading }),\r\n    shallowEqual\r\n  );\r\n\r\n  // if customers weren't selected we should close modal\r\n  useEffect(() => {\r\n    if (!customersUIProps.ids || customersUIProps.ids.length === 0) {\r\n      onHide();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [customersUIProps.ids]);\r\n\r\n  // looking for loading/dispatch\r\n  useEffect(() => {}, [isLoading, dispatch]);\r\n\r\n  const deleteCustomers = () => {\r\n    // server request for deleting customer by selected ids\r\n    dispatch(actions.deleteCustomers(customersUIProps.ids)).then(() => {\r\n      // refresh list after deletion\r\n      dispatch(actions.fetchCustomers(customersUIProps.queryParams)).then(\r\n        () => {\r\n          // clear selections list\r\n          customersUIProps.setIds([]);\r\n          // closing delete modal\r\n          onHide();\r\n        }\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      onHide={onHide}\r\n      aria-labelledby=\"example-modal-sizes-title-lg\"\r\n    >\r\n      {/*begin::Loading*/}\r\n      {isLoading && <ModalProgressBar />}\r\n      {/*end::Loading*/}\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"example-modal-sizes-title-lg\">\r\n          Customers Delete\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {!isLoading && (\r\n          <span>Are you sure to permanently delete selected customers?</span>\r\n        )}\r\n        {isLoading && <span>Customer are deleting...</span>}\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            onClick={onHide}\r\n            className=\"btn btn-light btn-elevate\"\r\n          >\r\n            Cancel\r\n          </button>\r\n          <> </>\r\n          <button\r\n            type=\"button\"\r\n            onClick={deleteCustomers}\r\n            className=\"btn btn-primary btn-elevate\"\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}