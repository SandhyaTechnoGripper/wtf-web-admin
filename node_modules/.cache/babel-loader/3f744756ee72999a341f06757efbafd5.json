{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nisha\\\\OneDrive\\\\Desktop\\\\technogrip\\\\src\\\\app\\\\modules\\\\GoogleMaterialExamples\\\\inputs\\\\AutocompleteExamplesPage.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable no-restricted-imports */\nimport React from \"react\";\nimport { emphasize, makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\nimport Select from \"react-select\";\nimport deburr from \"lodash/deburr\";\nimport Downshift from \"downshift\";\nimport { TextField, Popper, Paper, MenuItem, Chip, Typography, NoSsr } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { Notice, KTCodeExample } from \"../../../../_metronic/_partials/controls\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst suggestions = [{\n  label: \"Afghanistan\"\n}, {\n  label: \"Aland Islands\"\n}, {\n  label: \"Albania\"\n}, {\n  label: \"Algeria\"\n}, {\n  label: \"American Samoa\"\n}, {\n  label: \"Andorra\"\n}, {\n  label: \"Angola\"\n}, {\n  label: \"Anguilla\"\n}, {\n  label: \"Antarctica\"\n}, {\n  label: \"Antigua and Barbuda\"\n}, {\n  label: \"Argentina\"\n}, {\n  label: \"Armenia\"\n}, {\n  label: \"Aruba\"\n}, {\n  label: \"Australia\"\n}, {\n  label: \"Austria\"\n}, {\n  label: \"Azerbaijan\"\n}, {\n  label: \"Bahamas\"\n}, {\n  label: \"Bahrain\"\n}, {\n  label: \"Bangladesh\"\n}, {\n  label: \"Barbados\"\n}, {\n  label: \"Belarus\"\n}, {\n  label: \"Belgium\"\n}, {\n  label: \"Belize\"\n}, {\n  label: \"Benin\"\n}, {\n  label: \"Bermuda\"\n}, {\n  label: \"Bhutan\"\n}, {\n  label: \"Bolivia, Plurinational State of\"\n}, {\n  label: \"Bonaire, Sint Eustatius and Saba\"\n}, {\n  label: \"Bosnia and Herzegovina\"\n}, {\n  label: \"Botswana\"\n}, {\n  label: \"Bouvet Island\"\n}, {\n  label: \"Brazil\"\n}, {\n  label: \"British Indian Ocean Territory\"\n}, {\n  label: \"Brunei Darussalam\"\n}]; // Example first\n\nfunction renderInput(inputProps) {\n  const {\n    InputProps,\n    classes,\n    ref,\n    ...other\n  } = inputProps;\n  return /*#__PURE__*/_jsxDEV(TextField, {\n    InputProps: {\n      inputRef: ref,\n      classes: {\n        root: classes.inputRoot,\n        input: classes.inputInput\n      },\n      ...InputProps\n    },\n    ...other\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\nfunction renderSuggestion(suggestionProps) {\n  const {\n    suggestion,\n    index,\n    itemProps,\n    highlightedIndex,\n    selectedItem\n  } = suggestionProps;\n  const isHighlighted = highlightedIndex === index;\n  const isSelected = (selectedItem || \"\").indexOf(suggestion.label) > -1;\n  return /*#__PURE__*/_createElement(MenuItem, { ...itemProps,\n    key: `suggestion1${suggestion.label}`,\n    selected: isHighlighted,\n    component: \"div\",\n    style: {\n      fontWeight: isSelected ? 500 : 400\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, suggestion.label);\n}\n\nrenderSuggestion.propTypes = {\n  highlightedIndex: PropTypes.number,\n  index: PropTypes.number,\n  itemProps: PropTypes.object,\n  selectedItem: PropTypes.string,\n  suggestion: PropTypes.shape({\n    label: PropTypes.string\n  }).isRequired\n};\n\nfunction getSuggestions(value, {\n  showEmpty = false\n} = {}) {\n  const inputValue = deburr(value.trim()).toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n  return inputLength === 0 && !showEmpty ? [] : suggestions.filter(suggestion => {\n    const keep = count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n\n    if (keep) {\n      count += 1;\n    }\n\n    return keep;\n  });\n}\n\nfunction DownshiftMultiple(props) {\n  _s();\n\n  const {\n    classes\n  } = props;\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [selectedItem, setSelectedItem] = React.useState([]);\n\n  function handleKeyDown(event) {\n    if (selectedItem.length && !inputValue.length && event.key === \"Backspace\") {\n      setSelectedItem(selectedItem.slice(0, selectedItem.length - 1));\n    }\n  }\n\n  function handleInputChange(event) {\n    setInputValue(event.target.value);\n  }\n\n  function handleChange(item) {\n    let newSelectedItem = [...selectedItem];\n\n    if (newSelectedItem.indexOf(item) === -1) {\n      newSelectedItem = [...newSelectedItem, item];\n    }\n\n    setInputValue(\"\");\n    setSelectedItem(newSelectedItem);\n  }\n\n  const handleDelete = item => () => {\n    const newSelectedItem = [...selectedItem];\n    newSelectedItem.splice(newSelectedItem.indexOf(item), 1);\n    setSelectedItem(newSelectedItem);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Downshift, {\n    id: \"downshift-multiple\",\n    inputValue: inputValue,\n    onChange: handleChange,\n    selectedItem: selectedItem,\n    children: ({\n      getInputProps,\n      getItemProps,\n      getLabelProps,\n      isOpen,\n      inputValue: inputValue2,\n      selectedItem: selectedItem2,\n      highlightedIndex\n    }) => {\n      const {\n        onBlur,\n        onChange,\n        onFocus,\n        ...inputProps\n      } = getInputProps({\n        onKeyDown: handleKeyDown,\n        placeholder: \"Select multiple countries\"\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.container,\n        children: [renderInput({\n          fullWidth: true,\n          classes,\n          label: \"Countries\",\n          InputLabelProps: getLabelProps(),\n          InputProps: {\n            startAdornment: selectedItem.map(item => /*#__PURE__*/_jsxDEV(Chip, {\n              tabIndex: -1,\n              label: item,\n              className: classes.chip,\n              onDelete: handleDelete(item)\n            }, item, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 19\n            }, this)),\n            onBlur,\n            onChange: event => {\n              handleInputChange(event);\n              onChange(event);\n            },\n            onFocus\n          },\n          inputProps\n        }), isOpen ? /*#__PURE__*/_jsxDEV(Paper, {\n          className: classes.paper,\n          square: true,\n          children: getSuggestions(inputValue2).map((suggestion, index) => renderSuggestion({\n            suggestion,\n            index,\n            itemProps: getItemProps({\n              item: suggestion.label\n            }),\n            highlightedIndex,\n            selectedItem: selectedItem2\n          }))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 15\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DownshiftMultiple, \"GcN0LZDZQqVtxX3U6R44NoqVdDw=\");\n\n_c = DownshiftMultiple;\nDownshiftMultiple.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    height: 250\n  },\n  container: {\n    flexGrow: 1,\n    position: \"relative\"\n  },\n  paper: {\n    position: \"absolute\",\n    zIndex: 1,\n    marginTop: theme.spacing(1),\n    left: 0,\n    right: 0\n  },\n  chip: {\n    margin: theme.spacing(0.5, 0.25)\n  },\n  inputRoot: {\n    flexWrap: \"wrap\"\n  },\n  inputInput: {\n    width: \"auto\",\n    flexGrow: 1\n  },\n  divider: {\n    height: theme.spacing(2)\n  }\n}));\nlet popperNode; // Example 2\n\nconst useStyles2 = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    height: 250\n  },\n  input: {\n    display: \"flex\",\n    padding: 0,\n    height: \"auto\"\n  },\n  valueContainer: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    flex: 1,\n    alignItems: \"center\",\n    overflow: \"hidden\"\n  },\n  chip: {\n    margin: theme.spacing(0.5, 0.25)\n  },\n  chipFocused: {\n    backgroundColor: emphasize(theme.palette.type === \"light\" ? theme.palette.grey[300] : theme.palette.grey[700], 0.08)\n  },\n  noOptionsMessage: {\n    padding: theme.spacing(1, 2)\n  },\n  singleValue: {\n    fontSize: 16\n  },\n  placeholder: {\n    position: \"absolute\",\n    left: 2,\n    bottom: 6,\n    fontSize: 16\n  },\n  paper: {\n    position: \"absolute\",\n    zIndex: 1,\n    marginTop: theme.spacing(1),\n    left: 0,\n    right: 0\n  },\n  divider: {\n    height: theme.spacing(2)\n  }\n}));\n\nfunction NoOptionsMessage(props) {\n  return /*#__PURE__*/_jsxDEV(Typography, {\n    color: \"textSecondary\",\n    className: props.selectProps.classes.noOptionsMessage,\n    ...props.innerProps,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 326,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = NoOptionsMessage;\nNoOptionsMessage.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  selectProps: PropTypes.object.isRequired\n};\n\nfunction inputComponent({\n  inputRef,\n  ...props\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: inputRef,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 343,\n    columnNumber: 10\n  }, this);\n}\n\ninputComponent.propTypes = {\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n};\n\nfunction Control(props) {\n  const {\n    children,\n    innerProps,\n    innerRef,\n    selectProps: {\n      classes,\n      TextFieldProps\n    }\n  } = props;\n  return /*#__PURE__*/_jsxDEV(TextField, {\n    fullWidth: true,\n    InputProps: {\n      inputComponent,\n      inputProps: {\n        className: classes.input,\n        ref: innerRef,\n        children,\n        ...innerProps\n      }\n    },\n    ...TextFieldProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 359,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = Control;\nControl.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  selectProps: PropTypes.object.isRequired\n};\n\nfunction Option(props) {\n  return /*#__PURE__*/_jsxDEV(MenuItem, {\n    ref: props.innerRef,\n    selected: props.isFocused,\n    component: \"div\",\n    style: {\n      fontWeight: props.isSelected ? 500 : 400\n    },\n    ...props.innerProps,\n    children: props.children\n  }, `option2${props.children}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 384,\n    columnNumber: 5\n  }, this);\n}\n\n_c4 = Option;\nOption.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  isFocused: PropTypes.bool,\n  isSelected: PropTypes.bool\n};\n\nfunction Placeholder(props) {\n  return /*#__PURE__*/_jsxDEV(Typography, {\n    color: \"textSecondary\",\n    className: props.selectProps.classes.placeholder,\n    ...props.innerProps,\n    children: props.children\n  }, props.children, false, {\n    fileName: _jsxFileName,\n    lineNumber: 409,\n    columnNumber: 5\n  }, this);\n}\n\n_c5 = Placeholder;\nPlaceholder.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  selectProps: PropTypes.object.isRequired\n};\n\nfunction SingleValue(props) {\n  return /*#__PURE__*/_jsxDEV(Typography, {\n    className: props.selectProps.classes.singleValue,\n    ...props.innerProps,\n    children: props.children\n  }, props.children, false, {\n    fileName: _jsxFileName,\n    lineNumber: 428,\n    columnNumber: 5\n  }, this);\n}\n\n_c6 = SingleValue;\nSingleValue.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  selectProps: PropTypes.object.isRequired\n};\n\nfunction ValueContainer(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: props.selectProps.classes.valueContainer,\n    children: props.children\n  }, props.children, false, {\n    fileName: _jsxFileName,\n    lineNumber: 446,\n    columnNumber: 5\n  }, this);\n}\n\n_c7 = ValueContainer;\nValueContainer.propTypes = {\n  children: PropTypes.node,\n  selectProps: PropTypes.object.isRequired\n};\n\nfunction MultiValue(props) {\n  return /*#__PURE__*/_jsxDEV(Chip, {\n    tabIndex: -1,\n    label: props.children,\n    className: clsx(props.selectProps.classes.chip, {\n      [props.selectProps.classes.chipFocused]: props.isFocused\n    }),\n    onDelete: props.removeProps.onClick,\n    deleteIcon: /*#__PURE__*/_jsxDEV(CancelIcon, { ...props.removeProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 19\n    }, this)\n  }, `chip2${props.children}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 462,\n    columnNumber: 5\n  }, this);\n}\n\n_c8 = MultiValue;\nMultiValue.propTypes = {\n  children: PropTypes.node,\n  isFocused: PropTypes.bool,\n  removeProps: PropTypes.object.isRequired,\n  selectProps: PropTypes.object.isRequired\n};\n\nfunction Menu(props) {\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    square: true,\n    className: props.selectProps.classes.paper,\n    ...props.innerProps,\n    children: props.children\n  }, props.children, false, {\n    fileName: _jsxFileName,\n    lineNumber: 484,\n    columnNumber: 5\n  }, this);\n}\n\n_c9 = Menu;\nMenu.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  selectProps: PropTypes.object\n};\nconst components = {\n  Control,\n  Menu,\n  MultiValue,\n  NoOptionsMessage,\n  Option,\n  Placeholder,\n  SingleValue,\n  ValueContainer\n};\nexport default function AutocompleteExamplesPage() {\n  _s2();\n\n  const classes = useStyles();\n  const classes2 = useStyles2();\n  const theme = useTheme();\n  const [single, setSingle] = React.useState(null);\n  const [multi, setMulti] = React.useState(null);\n\n  function handleChangeSingle(value) {\n    setSingle(value);\n  }\n\n  function handleChangeMulti(value) {\n    setMulti(value);\n  }\n\n  const selectStyles = {\n    input: base => ({ ...base,\n      color: theme.palette.text.primary,\n      \"& input\": {\n        font: \"inherit\"\n      }\n    })\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Notice, {\n      icon: \"flaticon-warning font-primary\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"The autocomplete is a normal text input enhanced by a panel of suggested options.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"For more info please check the components's official\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          className: \"font-weight-bold\",\n          rel: \"noopener noreferrer\",\n          href: \"https://material-ui.com/components/autocomplete/\",\n          children: \"demos & documentation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-6\",\n        children: /*#__PURE__*/_jsxDEV(KTCodeExample, {\n          jsCode: jsCode1,\n          beforeCodeTitle: \"Downshift\",\n          codeBlockHeight: \"400px\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"In the following example, we demonstrate how to use\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://github.com/downshift-js/downshift\",\n              children: /*#__PURE__*/_jsxDEV(\"code\", {\n                children: \"downshift\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 568,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 567,\n              columnNumber: 15\n            }, this), \". The last demo allow to clear the input and show a number of options on focus.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"separator separator-dashed my-7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.root,\n            children: [/*#__PURE__*/_jsxDEV(Downshift, {\n              id: \"downshift-simple\",\n              children: ({\n                getInputProps,\n                getItemProps,\n                getLabelProps,\n                getMenuProps,\n                highlightedIndex,\n                inputValue,\n                isOpen,\n                selectedItem\n              }) => {\n                const {\n                  onBlur,\n                  onFocus,\n                  ...inputProps\n                } = getInputProps({\n                  placeholder: \"Search for a country (start with a)\"\n                });\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: classes.container,\n                  children: [renderInput({\n                    fullWidth: true,\n                    classes,\n                    label: \"Country\",\n                    InputLabelProps: getLabelProps({\n                      shrink: true\n                    }),\n                    InputProps: {\n                      onBlur,\n                      onFocus\n                    },\n                    inputProps\n                  }), /*#__PURE__*/_jsxDEV(\"div\", { ...getMenuProps(),\n                    children: isOpen ? /*#__PURE__*/_jsxDEV(Paper, {\n                      className: classes.paper,\n                      square: true,\n                      children: getSuggestions(inputValue).map((suggestion, index) => renderSuggestion({\n                        suggestion,\n                        index,\n                        itemProps: getItemProps({\n                          item: suggestion.label\n                        }),\n                        highlightedIndex,\n                        selectedItem\n                      }))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 603,\n                      columnNumber: 27\n                    }, this) : null\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 601,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 591,\n                  columnNumber: 21\n                }, this);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 575,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.divider\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 623,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DownshiftMultiple, {\n              classes: classes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 624,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.divider\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 625,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Downshift, {\n              id: \"downshift-popper\",\n              children: ({\n                getInputProps,\n                getItemProps,\n                getLabelProps,\n                getMenuProps,\n                highlightedIndex,\n                inputValue,\n                isOpen,\n                selectedItem\n              }) => {\n                const {\n                  onBlur,\n                  onFocus,\n                  ...inputProps\n                } = getInputProps({\n                  placeholder: \"With Popper\"\n                });\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: classes.container,\n                  children: [renderInput({\n                    fullWidth: true,\n                    classes,\n                    label: \"Country\",\n                    InputProps: {\n                      onBlur,\n                      onFocus\n                    },\n                    InputLabelProps: getLabelProps({\n                      shrink: true\n                    }),\n                    inputProps,\n                    ref: node => {\n                      popperNode = node;\n                    }\n                  }), /*#__PURE__*/_jsxDEV(Popper, {\n                    open: isOpen,\n                    anchorEl: popperNode,\n                    children: /*#__PURE__*/_jsxDEV(\"div\", { ...(isOpen ? getMenuProps({}, {\n                        suppressRefError: true\n                      }) : {}),\n                      children: /*#__PURE__*/_jsxDEV(Paper, {\n                        square: true,\n                        style: {\n                          marginTop: 8,\n                          width: popperNode ? popperNode.clientWidth : undefined\n                        },\n                        children: getSuggestions(inputValue).map((suggestion, index) => renderSuggestion({\n                          suggestion,\n                          index,\n                          itemProps: getItemProps({\n                            item: suggestion.label\n                          }),\n                          highlightedIndex,\n                          selectedItem\n                        }))\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 661,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 656,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 655,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 642,\n                  columnNumber: 21\n                }, this);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 626,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.divider\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 689,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Downshift, {\n              id: \"downshift-options\",\n              children: ({\n                clearSelection,\n                getInputProps,\n                getItemProps,\n                getLabelProps,\n                getMenuProps,\n                highlightedIndex,\n                inputValue,\n                isOpen,\n                openMenu,\n                selectedItem\n              }) => {\n                const {\n                  onBlur,\n                  onChange,\n                  onFocus,\n                  ...inputProps\n                } = getInputProps({\n                  onChange: event => {\n                    if (event.target.value === \"\") {\n                      clearSelection();\n                    }\n                  },\n                  onFocus: openMenu,\n                  placeholder: \"With the clear & show empty options\"\n                });\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: classes.container,\n                  children: [renderInput({\n                    fullWidth: true,\n                    classes,\n                    label: \"Countries\",\n                    InputLabelProps: getLabelProps({\n                      shrink: true\n                    }),\n                    InputProps: {\n                      onBlur,\n                      onChange,\n                      onFocus\n                    },\n                    inputProps\n                  }), /*#__PURE__*/_jsxDEV(\"div\", { ...getMenuProps(),\n                    children: isOpen ? /*#__PURE__*/_jsxDEV(Paper, {\n                      className: classes.paper,\n                      square: true,\n                      children: getSuggestions(inputValue, {\n                        showEmpty: true\n                      }).map((suggestion, index) => renderSuggestion({\n                        suggestion,\n                        index,\n                        itemProps: getItemProps({\n                          item: suggestion.label\n                        }),\n                        highlightedIndex,\n                        selectedItem\n                      }))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 731,\n                      columnNumber: 27\n                    }, this) : null\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 729,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 719,\n                  columnNumber: 21\n                }, this);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 690,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 574,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-6\",\n        children: /*#__PURE__*/_jsxDEV(KTCodeExample, {\n          jsCode: jsCode2,\n          beforeCodeTitle: \"React-select\",\n          codeBlockHeight: \"400px\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"In the following example, we demonstrate how to use\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://github.com/JedWatson/react-select\",\n              children: /*#__PURE__*/_jsxDEV(\"code\", {\n                children: \"react-select\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 764,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 763,\n              columnNumber: 15\n            }, this), \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 761,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"separator separator-dashed my-7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 768,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes2.root,\n            children: /*#__PURE__*/_jsxDEV(NoSsr, {\n              children: [/*#__PURE__*/_jsxDEV(Select, {\n                className: \"react-select\",\n                classes: classes2,\n                styles: selectStyles,\n                inputId: \"react-select-single\",\n                TextFieldProps: {\n                  label: \"Country\",\n                  InputLabelProps: {\n                    htmlFor: \"react-select-single\",\n                    shrink: true\n                  },\n                  placeholder: \"Search a country (start with a)\"\n                },\n                options: suggestions,\n                components: components,\n                value: single,\n                onChange: handleChangeSingle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 771,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes2.divider\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 789,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                className: \"react-select\",\n                classes: classes2,\n                styles: selectStyles,\n                inputId: \"react-select-multiple\",\n                TextFieldProps: {\n                  label: \"Countries\",\n                  InputLabelProps: {\n                    htmlFor: \"react-select-multiple\",\n                    shrink: true\n                  },\n                  placeholder: \"Select multiple countries\"\n                },\n                options: suggestions,\n                components: components,\n                value: multi,\n                onChange: handleChangeMulti,\n                isMulti: true\n              }, \"\", false, {\n                fileName: _jsxFileName,\n                lineNumber: 790,\n                columnNumber: 17\n              }, this)]\n            }, \"nossr22\", true, {\n              fileName: _jsxFileName,\n              lineNumber: 770,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 769,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 756,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 755,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s2(AutocompleteExamplesPage, \"vmKfFr7WoYhSWrPRPgqxMY4mjyU=\", false, function () {\n  return [useStyles, useStyles2, useTheme];\n});\n\n_c10 = AutocompleteExamplesPage;\nconst jsCode1 = `\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport deburr from 'lodash/deburr';\nimport Downshift from 'downshift';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Popper from '@material-ui/core/Popper';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Chip from '@material-ui/core/Chip';\n\nconst suggestions = [\n  { label: 'Afghanistan' },\n  { label: 'Aland Islands' },\n  { label: 'Albania' },\n  { label: 'Algeria' },\n  { label: 'American Samoa' },\n  { label: 'Andorra' },\n  { label: 'Angola' },\n  { label: 'Anguilla' },\n  { label: 'Antarctica' },\n  { label: 'Antigua and Barbuda' },\n  { label: 'Argentina' },\n  { label: 'Armenia' },\n  { label: 'Aruba' },\n  { label: 'Australia' },\n  { label: 'Austria' },\n  { label: 'Azerbaijan' },\n  { label: 'Bahamas' },\n  { label: 'Bahrain' },\n  { label: 'Bangladesh' },\n  { label: 'Barbados' },\n  { label: 'Belarus' },\n  { label: 'Belgium' },\n  { label: 'Belize' },\n  { label: 'Benin' },\n  { label: 'Bermuda' },\n  { label: 'Bhutan' },\n  { label: 'Bolivia, Plurinational State of' },\n  { label: 'Bonaire, Sint Eustatius and Saba' },\n  { label: 'Bosnia and Herzegovina' },\n  { label: 'Botswana' },\n  { label: 'Bouvet Island' },\n  { label: 'Brazil' },\n  { label: 'British Indian Ocean Territory' },\n  { label: 'Brunei Darussalam' },\n];\n\nfunction renderInput(inputProps) {\n  const { InputProps, classes, ref, ...other } = inputProps;\n\n  return (\n    <TextField\n      InputProps={{\n        inputRef: ref,\n        classes: {\n          root: classes.inputRoot,\n          input: classes.inputInput,\n        },\n        ...InputProps,\n      }}\n      {...other}\n    />\n  );\n}\n\nfunction renderSuggestion(suggestionProps) {\n  const { suggestion, index, itemProps, highlightedIndex, selectedItem } = suggestionProps;\n  const isHighlighted = highlightedIndex === index;\n  const isSelected = (selectedItem || '').indexOf(suggestion.label) > -1;\n\n  return (\n    <MenuItem\n      {...itemProps}\n      key={suggestion.label}\n      selected={isHighlighted}\n      component=\"div\"\n      style={{\n        fontWeight: isSelected ? 500 : 400,\n      }}\n    >\n      {suggestion.label}\n    </MenuItem>\n  );\n}\nrenderSuggestion.propTypes = {\n  highlightedIndex: PropTypes.number,\n  index: PropTypes.number,\n  itemProps: PropTypes.object,\n  selectedItem: PropTypes.string,\n  suggestion: PropTypes.shape({ label: PropTypes.string }).isRequired,\n};\n\nfunction getSuggestions(value, { showEmpty = false } = {}) {\n  const inputValue = deburr(value.trim()).toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n\n  return inputLength === 0 && !showEmpty\n    ? []\n    : suggestions.filter(suggestion => {\n        const keep =\n          count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n\n        if (keep) {\n          count += 1;\n        }\n\n        return keep;\n      });\n}\n\nfunction DownshiftMultiple(props) {\n  const { classes } = props;\n  const [inputValue, setInputValue] = React.useState('');\n  const [selectedItem, setSelectedItem] = React.useState([]);\n\n  function handleKeyDown(event) {\n    if (selectedItem.length && !inputValue.length && event.key === 'Backspace') {\n      setSelectedItem(selectedItem.slice(0, selectedItem.length - 1));\n    }\n  }\n\n  function handleInputChange(event) {\n    setInputValue(event.target.value);\n  }\n\n  function handleChange(item) {\n    let newSelectedItem = [...selectedItem];\n    if (newSelectedItem.indexOf(item) === -1) {\n      newSelectedItem = [...newSelectedItem, item];\n    }\n    setInputValue('');\n    setSelectedItem(newSelectedItem);\n  }\n\n  const handleDelete = item => () => {\n    const newSelectedItem = [...selectedItem];\n    newSelectedItem.splice(newSelectedItem.indexOf(item), 1);\n    setSelectedItem(newSelectedItem);\n  };\n\n  return (\n    <Downshift\n      id=\"downshift-multiple\"\n      inputValue={inputValue}\n      onChange={handleChange}\n      selectedItem={selectedItem}\n    >\n      {({\n        getInputProps,\n        getItemProps,\n        getLabelProps,\n        isOpen,\n        inputValue: inputValue2,\n        selectedItem: selectedItem2,\n        highlightedIndex,\n      }) => {\n        const { onBlur, onChange, onFocus, ...inputProps } = getInputProps({\n          onKeyDown: handleKeyDown,\n          placeholder: 'Select multiple countries',\n        });\n\n        return (\n          <div className={classes.container}>\n            {renderInput({\n              fullWidth: true,\n              classes,\n              label: 'Countries',\n              InputLabelProps: getLabelProps(),\n              InputProps: {\n                startAdornment: selectedItem.map(item => (\n                  <Chip\n                    key={item}\n                    tabIndex={-1}\n                    label={item}\n                    className={classes.chip}\n                    onDelete={handleDelete(item)}\n                  />\n                )),\n                onBlur,\n                onChange: event => {\n                  handleInputChange(event);\n                  onChange(event);\n                },\n                onFocus,\n              },\n              inputProps,\n            })}\n\n            {isOpen ? (\n              <Paper className={classes.paper} square>\n                {getSuggestions(inputValue2).map((suggestion, index) =>\n                  renderSuggestion({\n                    suggestion,\n                    index,\n                    itemProps: getItemProps({ item: suggestion.label }),\n                    highlightedIndex,\n                    selectedItem: selectedItem2,\n                  }),\n                )}\n              </Paper>\n            ) : null}\n          </div>\n        );\n      }}\n    </Downshift>\n  );\n}\n\nDownshiftMultiple.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    height: 250,\n  },\n  container: {\n    flexGrow: 1,\n    position: 'relative',\n  },\n  paper: {\n    position: 'absolute',\n    zIndex: 1,\n    marginTop: theme.spacing(1),\n    left: 0,\n    right: 0,\n  },\n  chip: {\n    margin: theme.spacing(0.5, 0.25),\n  },\n  inputRoot: {\n    flexWrap: 'wrap',\n  },\n  inputInput: {\n    width: 'auto',\n    flexGrow: 1,\n  },\n  divider: {\n    height: theme.spacing(2),\n  },\n}));\n\nlet popperNode;\n\nexport default function IntegrationDownshift() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Downshift id=\"downshift-simple\">\n        {({\n          getInputProps,\n          getItemProps,\n          getLabelProps,\n          getMenuProps,\n          highlightedIndex,\n          inputValue,\n          isOpen,\n          selectedItem,\n        }) => {\n          const { onBlur, onFocus, ...inputProps } = getInputProps({\n            placeholder: 'Search for a country (start with a)',\n          });\n\n          return (\n            <div className={classes.container}>\n              {renderInput({\n                fullWidth: true,\n                classes,\n                label: 'Country',\n                InputLabelProps: getLabelProps({ shrink: true }),\n                InputProps: { onBlur, onFocus },\n                inputProps,\n              })}\n\n              <div {...getMenuProps()}>\n                {isOpen ? (\n                  <Paper className={classes.paper} square>\n                    {getSuggestions(inputValue).map((suggestion, index) =>\n                      renderSuggestion({\n                        suggestion,\n                        index,\n                        itemProps: getItemProps({ item: suggestion.label }),\n                        highlightedIndex,\n                        selectedItem,\n                      }),\n                    )}\n                  </Paper>\n                ) : null}\n              </div>\n            </div>\n          );\n        }}\n      </Downshift>\n      <div className={classes.divider} />\n      <DownshiftMultiple classes={classes} />\n      <div className={classes.divider} />\n      <Downshift id=\"downshift-popper\">\n        {({\n          getInputProps,\n          getItemProps,\n          getLabelProps,\n          getMenuProps,\n          highlightedIndex,\n          inputValue,\n          isOpen,\n          selectedItem,\n        }) => {\n          const { onBlur, onFocus, ...inputProps } = getInputProps({\n            placeholder: 'With Popper',\n          });\n\n          return (\n            <div className={classes.container}>\n              {renderInput({\n                fullWidth: true,\n                classes,\n                label: 'Country',\n                InputProps: { onBlur, onFocus },\n                InputLabelProps: getLabelProps({ shrink: true }),\n                inputProps,\n                ref: node => {\n                  popperNode = node;\n                },\n              })}\n\n              <Popper open={isOpen} anchorEl={popperNode}>\n                <div {...(isOpen ? getMenuProps({}, { suppressRefError: true }) : {})}>\n                  <Paper\n                    square\n                    style={{ marginTop: 8, width: popperNode ? popperNode.clientWidth : undefined }}\n                  >\n                    {getSuggestions(inputValue).map((suggestion, index) =>\n                      renderSuggestion({\n                        suggestion,\n                        index,\n                        itemProps: getItemProps({ item: suggestion.label }),\n                        highlightedIndex,\n                        selectedItem,\n                      }),\n                    )}\n                  </Paper>\n                </div>\n              </Popper>\n            </div>\n          );\n        }}\n      </Downshift>\n      <div className={classes.divider} />\n      <Downshift id=\"downshift-options\">\n        {({\n          clearSelection,\n          getInputProps,\n          getItemProps,\n          getLabelProps,\n          getMenuProps,\n          highlightedIndex,\n          inputValue,\n          isOpen,\n          openMenu,\n          selectedItem,\n        }) => {\n          const { onBlur, onChange, onFocus, ...inputProps } = getInputProps({\n            onChange: event => {\n              if (event.target.value === '') {\n                clearSelection();\n              }\n            },\n            onFocus: openMenu,\n            placeholder: 'With the clear & show empty options',\n          });\n\n          return (\n            <div className={classes.container}>\n              {renderInput({\n                fullWidth: true,\n                classes,\n                label: 'Countries',\n                InputLabelProps: getLabelProps({ shrink: true }),\n                InputProps: { onBlur, onChange, onFocus },\n                inputProps,\n              })}\n\n              <div {...getMenuProps()}>\n                {isOpen ? (\n                  <Paper className={classes.paper} square>\n                    {getSuggestions(inputValue, { showEmpty: true }).map((suggestion, index) =>\n                      renderSuggestion({\n                        suggestion,\n                        index,\n                        itemProps: getItemProps({ item: suggestion.label }),\n                        highlightedIndex,\n                        selectedItem,\n                      }),\n                    )}\n                  </Paper>\n                ) : null}\n              </div>\n            </div>\n          );\n        }}\n      </Downshift>\n    </div>\n  );\n}\n`;\nconst jsCode2 = `\nimport React from 'react';\nimport clsx from 'clsx';\nimport Select from 'react-select';\nimport { emphasize, makeStyles, useTheme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Chip from '@material-ui/core/Chip';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport PropTypes from 'prop-types';\n\nconst suggestions = [\n  { label: 'Afghanistan' },\n  { label: 'Aland Islands' },\n  { label: 'Albania' },\n  { label: 'Algeria' },\n  { label: 'American Samoa' },\n  { label: 'Andorra' },\n  { label: 'Angola' },\n  { label: 'Anguilla' },\n  { label: 'Antarctica' },\n  { label: 'Antigua and Barbuda' },\n  { label: 'Argentina' },\n  { label: 'Armenia' },\n  { label: 'Aruba' },\n  { label: 'Australia' },\n  { label: 'Austria' },\n  { label: 'Azerbaijan' },\n  { label: 'Bahamas' },\n  { label: 'Bahrain' },\n  { label: 'Bangladesh' },\n  { label: 'Barbados' },\n  { label: 'Belarus' },\n  { label: 'Belgium' },\n  { label: 'Belize' },\n  { label: 'Benin' },\n  { label: 'Bermuda' },\n  { label: 'Bhutan' },\n  { label: 'Bolivia, Plurinational State of' },\n  { label: 'Bonaire, Sint Eustatius and Saba' },\n  { label: 'Bosnia and Herzegovina' },\n  { label: 'Botswana' },\n  { label: 'Bouvet Island' },\n  { label: 'Brazil' },\n  { label: 'British Indian Ocean Territory' },\n  { label: 'Brunei Darussalam' },\n].map(suggestion => ({\n  value: suggestion.label,\n  label: suggestion.label,\n}));\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    height: 250,\n  },\n  input: {\n    display: 'flex',\n    padding: 0,\n    height: 'auto',\n  },\n  valueContainer: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    flex: 1,\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  chip: {\n    margin: theme.spacing(0.5, 0.25),\n  },\n  chipFocused: {\n    backgroundColor: emphasize(\n      theme.palette.type === 'light' ? theme.palette.grey[300] : theme.palette.grey[700],\n      0.08,\n    ),\n  },\n  noOptionsMessage: {\n    padding: theme.spacing(1, 2),\n  },\n  singleValue: {\n    fontSize: 16,\n  },\n  placeholder: {\n    position: 'absolute',\n    left: 2,\n    bottom: 6,\n    fontSize: 16,\n  },\n  paper: {\n    position: 'absolute',\n    zIndex: 1,\n    marginTop: theme.spacing(1),\n    left: 0,\n    right: 0,\n  },\n  divider: {\n    height: theme.spacing(2),\n  },\n}));\n\nfunction NoOptionsMessage(props) {\n  return (\n    <Typography\n      color=\"textSecondary\"\n      className={props.selectProps.classes.noOptionsMessage}\n      {...props.innerProps}\n    >\n      {props.children}\n    </Typography>\n  );\n}\n\nNoOptionsMessage.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  selectProps: PropTypes.object.isRequired,\n};\n\nfunction inputComponent({ inputRef, ...props }) {\n  return <div ref={inputRef} {...props} />;\n}\n\ninputComponent.propTypes = {\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n};\n\nfunction Control(props) {\n  const {\n    children,\n    innerProps,\n    innerRef,\n    selectProps: { classes, TextFieldProps },\n  } = props;\n\n  return (\n    <TextField\n      fullWidth\n      InputProps={{\n        inputComponent,\n        inputProps: {\n          className: classes.input,\n          ref: innerRef,\n          children,\n          ...innerProps,\n        },\n      }}\n      {...TextFieldProps}\n    />\n  );\n}\n\nControl.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  selectProps: PropTypes.object.isRequired,\n};\n\nfunction Option(props) {\n  return (\n    <MenuItem\n      ref={props.innerRef}\n      selected={props.isFocused}\n      component=\"div\"\n      style={{\n        fontWeight: props.isSelected ? 500 : 400,\n      }}\n      {...props.innerProps}\n    >\n      {props.children}\n    </MenuItem>\n  );\n}\n\nOption.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  isFocused: PropTypes.bool,\n  isSelected: PropTypes.bool,\n};\n\nfunction Placeholder(props) {\n  return (\n    <Typography\n      color=\"textSecondary\"\n      className={props.selectProps.classes.placeholder}\n      {...props.innerProps}\n    >\n      {props.children}\n    </Typography>\n  );\n}\n\nPlaceholder.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  selectProps: PropTypes.object.isRequired,\n};\n\nfunction SingleValue(props) {\n  return (\n    <Typography className={props.selectProps.classes.singleValue} {...props.innerProps}>\n      {props.children}\n    </Typography>\n  );\n}\n\nSingleValue.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  selectProps: PropTypes.object.isRequired,\n};\n\nfunction ValueContainer(props) {\n  return <div className={props.selectProps.classes.valueContainer}>{props.children}</div>;\n}\n\nValueContainer.propTypes = {\n  children: PropTypes.node,\n  selectProps: PropTypes.object.isRequired,\n};\n\nfunction MultiValue(props) {\n  return (\n    <Chip\n      tabIndex={-1}\n      label={props.children}\n      className={clsx(props.selectProps.classes.chip, {\n        [props.selectProps.classes.chipFocused]: props.isFocused,\n      })}\n      onDelete={props.removeProps.onClick}\n      deleteIcon={<CancelIcon {...props.removeProps} />}\n    />\n  );\n}\n\nMultiValue.propTypes = {\n  children: PropTypes.node,\n  isFocused: PropTypes.bool,\n  removeProps: PropTypes.object.isRequired,\n  selectProps: PropTypes.object.isRequired,\n};\n\nfunction Menu(props) {\n  return (\n    <Paper square className={props.selectProps.classes.paper} {...props.innerProps}>\n      {props.children}\n    </Paper>\n  );\n}\n\nMenu.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  selectProps: PropTypes.object,\n};\n\nconst components = {\n  Control,\n  Menu,\n  MultiValue,\n  NoOptionsMessage,\n  Option,\n  Placeholder,\n  SingleValue,\n  ValueContainer,\n};\n\nexport default function IntegrationReactSelect() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [single, setSingle] = React.useState(null);\n  const [multi, setMulti] = React.useState(null);\n\n  function handleChangeSingle(value) {\n    setSingle(value);\n  }\n\n  function handleChangeMulti(value) {\n    setMulti(value);\n  }\n\n  const selectStyles = {\n    input: base => ({\n      ...base,\n      color: theme.palette.text.primary,\n      '& input': {\n        font: 'inherit',\n      },\n    }),\n  };\n\n  return (\n    <div className={classes.root}>\n      <NoSsr>\n        <Select\n          classes={classes}\n          styles={selectStyles}\n          inputId=\"react-select-single\"\n          TextFieldProps={{\n            label: 'Country',\n            InputLabelProps: {\n              htmlFor: 'react-select-single',\n              shrink: true,\n            },\n            placeholder: 'Search a country (start with a)',\n          }}\n          options={suggestions}\n          components={components}\n          value={single}\n          onChange={handleChangeSingle}\n        />\n        <div className={classes.divider} />\n        <Select\n          classes={classes}\n          styles={selectStyles}\n          inputId=\"react-select-multiple\"\n          TextFieldProps={{\n            label: 'Countries',\n            InputLabelProps: {\n              htmlFor: 'react-select-multiple',\n              shrink: true,\n            },\n            placeholder: 'Select multiple countries',\n          }}\n          options={suggestions}\n          components={components}\n          value={multi}\n          onChange={handleChangeMulti}\n          isMulti\n        />\n      </NoSsr>\n    </div>\n  );\n}\n`;\nconst jsCode3 = `\nimport React from 'react';\nimport deburr from 'lodash/deburr';\nimport Autosuggest from 'react-autosuggest';\nimport match from 'autosuggest-highlight/match';\nimport parse from 'autosuggest-highlight/parse';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Popper from '@material-ui/core/Popper';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst suggestions = [\n  { label: 'Afghanistan' },\n  { label: 'Aland Islands' },\n  { label: 'Albania' },\n  { label: 'Algeria' },\n  { label: 'American Samoa' },\n  { label: 'Andorra' },\n  { label: 'Angola' },\n  { label: 'Anguilla' },\n  { label: 'Antarctica' },\n  { label: 'Antigua and Barbuda' },\n  { label: 'Argentina' },\n  { label: 'Armenia' },\n  { label: 'Aruba' },\n  { label: 'Australia' },\n  { label: 'Austria' },\n  { label: 'Azerbaijan' },\n  { label: 'Bahamas' },\n  { label: 'Bahrain' },\n  { label: 'Bangladesh' },\n  { label: 'Barbados' },\n  { label: 'Belarus' },\n  { label: 'Belgium' },\n  { label: 'Belize' },\n  { label: 'Benin' },\n  { label: 'Bermuda' },\n  { label: 'Bhutan' },\n  { label: 'Bolivia, Plurinational State of' },\n  { label: 'Bonaire, Sint Eustatius and Saba' },\n  { label: 'Bosnia and Herzegovina' },\n  { label: 'Botswana' },\n  { label: 'Bouvet Island' },\n  { label: 'Brazil' },\n  { label: 'British Indian Ocean Territory' },\n  { label: 'Brunei Darussalam' },\n];\n\nfunction renderInputComponent(inputProps) {\n  const { classes, inputRef = () => {}, ref, ...other } = inputProps;\n\n  return (\n    <TextField\n      fullWidth\n      InputProps={{\n        inputRef: node => {\n          ref(node);\n          inputRef(node);\n        },\n        classes: {\n          input: classes.input,\n        },\n      }}\n      {...other}\n    />\n  );\n}\n\nfunction renderSuggestion(suggestion, { query, isHighlighted }) {\n  const matches = match(suggestion.label, query);\n  const parts = parse(suggestion.label, matches);\n\n  return (\n    <MenuItem selected={isHighlighted} component=\"div\">\n      <div>\n        {parts.map(part => (\n          <span key={part.text} style={{ fontWeight: part.highlight ? 500 : 400 }}>\n            {part.text}\n          </span>\n        ))}\n      </div>\n    </MenuItem>\n  );\n}\n\nfunction getSuggestions(value) {\n  const inputValue = deburr(value.trim()).toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n\n  return inputLength === 0\n    ? []\n    : suggestions.filter(suggestion => {\n        const keep =\n          count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n\n        if (keep) {\n          count += 1;\n        }\n\n        return keep;\n      });\n}\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.label;\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: 250,\n    flexGrow: 1,\n  },\n  container: {\n    position: 'relative',\n  },\n  suggestionsContainerOpen: {\n    position: 'absolute',\n    zIndex: 1,\n    marginTop: theme.spacing(1),\n    left: 0,\n    right: 0,\n  },\n  suggestion: {\n    display: 'block',\n  },\n  suggestionsList: {\n    margin: 0,\n    padding: 0,\n    listStyleType: 'none',\n  },\n  divider: {\n    height: theme.spacing(2),\n  },\n}));\n\nexport default function IntegrationAutosuggest() {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [state, setState] = React.useState({\n    single: '',\n    popper: '',\n  });\n\n  const [stateSuggestions, setSuggestions] = React.useState([]);\n\n  const handleSuggestionsFetchRequested = ({ value }) => {\n    setSuggestions(getSuggestions(value));\n  };\n\n  const handleSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n\n  const handleChange = name => (event, { newValue }) => {\n    setState({\n      ...state,\n      [name]: newValue,\n    });\n  };\n\n  const autosuggestProps = {\n    renderInputComponent,\n    suggestions: stateSuggestions,\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\n    getSuggestionValue,\n    renderSuggestion,\n  };\n\n  return (\n    <div className={classes.root}>\n      <Autosuggest\n        {...autosuggestProps}\n        inputProps={{\n          classes,\n          id: 'react-autosuggest-simple',\n          label: 'Country',\n          placeholder: 'Search a country (start with a)',\n          value: state.single,\n          onChange: handleChange('single'),\n        }}\n        theme={{\n          container: classes.container,\n          suggestionsContainerOpen: classes.suggestionsContainerOpen,\n          suggestionsList: classes.suggestionsList,\n          suggestion: classes.suggestion,\n        }}\n        renderSuggestionsContainer={options => (\n          <Paper {...options.containerProps} square>\n            {options.children}\n          </Paper>\n        )}\n      />\n      <div className={classes.divider} />\n      <Autosuggest\n        {...autosuggestProps}\n        inputProps={{\n          classes,\n          id: 'react-autosuggest-popper',\n          label: 'Country',\n          placeholder: 'With Popper',\n          value: state.popper,\n          onChange: handleChange('popper'),\n          inputRef: node => {\n            setAnchorEl(node);\n          },\n          InputLabelProps: {\n            shrink: true,\n          },\n        }}\n        theme={{\n          suggestionsList: classes.suggestionsList,\n          suggestion: classes.suggestion,\n        }}\n        renderSuggestionsContainer={options => (\n          <Popper anchorEl={anchorEl} open={Boolean(options.children)}>\n            <Paper\n              square\n              {...options.containerProps}\n              style={{ width: anchorEl ? anchorEl.clientWidth : undefined }}\n            >\n              {options.children}\n            </Paper>\n          </Popper>\n        )}\n      />\n    </div>\n  );\n}\n`;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n\n$RefreshReg$(_c, \"DownshiftMultiple\");\n$RefreshReg$(_c2, \"NoOptionsMessage\");\n$RefreshReg$(_c3, \"Control\");\n$RefreshReg$(_c4, \"Option\");\n$RefreshReg$(_c5, \"Placeholder\");\n$RefreshReg$(_c6, \"SingleValue\");\n$RefreshReg$(_c7, \"ValueContainer\");\n$RefreshReg$(_c8, \"MultiValue\");\n$RefreshReg$(_c9, \"Menu\");\n$RefreshReg$(_c10, \"AutocompleteExamplesPage\");","map":{"version":3,"sources":["C:/Users/nisha/OneDrive/Desktop/technogrip/src/app/modules/GoogleMaterialExamples/inputs/AutocompleteExamplesPage.js"],"names":["React","emphasize","makeStyles","useTheme","clsx","Select","deburr","Downshift","TextField","Popper","Paper","MenuItem","Chip","Typography","NoSsr","PropTypes","CancelIcon","Notice","KTCodeExample","suggestions","label","renderInput","inputProps","InputProps","classes","ref","other","inputRef","root","inputRoot","input","inputInput","renderSuggestion","suggestionProps","suggestion","index","itemProps","highlightedIndex","selectedItem","isHighlighted","isSelected","indexOf","fontWeight","propTypes","number","object","string","shape","isRequired","getSuggestions","value","showEmpty","inputValue","trim","toLowerCase","inputLength","length","count","filter","keep","slice","DownshiftMultiple","props","setInputValue","useState","setSelectedItem","handleKeyDown","event","key","handleInputChange","target","handleChange","item","newSelectedItem","handleDelete","splice","getInputProps","getItemProps","getLabelProps","isOpen","inputValue2","selectedItem2","onBlur","onChange","onFocus","onKeyDown","placeholder","container","fullWidth","InputLabelProps","startAdornment","map","chip","paper","useStyles","theme","flexGrow","height","position","zIndex","marginTop","spacing","left","right","margin","flexWrap","width","divider","popperNode","useStyles2","display","padding","valueContainer","flex","alignItems","overflow","chipFocused","backgroundColor","palette","type","grey","noOptionsMessage","singleValue","fontSize","bottom","NoOptionsMessage","selectProps","innerProps","children","node","inputComponent","oneOfType","func","Control","innerRef","TextFieldProps","className","Option","isFocused","bool","Placeholder","SingleValue","ValueContainer","MultiValue","removeProps","onClick","Menu","components","AutocompleteExamplesPage","classes2","single","setSingle","multi","setMulti","handleChangeSingle","handleChangeMulti","selectStyles","base","color","text","primary","font","jsCode1","getMenuProps","shrink","suppressRefError","clientWidth","undefined","clearSelection","openMenu","jsCode2","htmlFor","jsCode3"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-restricted-imports */\r\nimport React from \"react\";\r\nimport {emphasize, makeStyles, useTheme} from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport Select from \"react-select\";\r\nimport deburr from \"lodash/deburr\";\r\nimport Downshift from \"downshift\";\r\nimport {\r\n  TextField,\r\n  Popper,\r\n  Paper,\r\n  MenuItem,\r\n  Chip,\r\n  Typography,\r\n  NoSsr\r\n} from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {Notice, KTCodeExample} from \"../../../../_metronic/_partials/controls\";\r\n\r\nconst suggestions = [\r\n  { label: \"Afghanistan\" },\r\n  { label: \"Aland Islands\" },\r\n  { label: \"Albania\" },\r\n  { label: \"Algeria\" },\r\n  { label: \"American Samoa\" },\r\n  { label: \"Andorra\" },\r\n  { label: \"Angola\" },\r\n  { label: \"Anguilla\" },\r\n  { label: \"Antarctica\" },\r\n  { label: \"Antigua and Barbuda\" },\r\n  { label: \"Argentina\" },\r\n  { label: \"Armenia\" },\r\n  { label: \"Aruba\" },\r\n  { label: \"Australia\" },\r\n  { label: \"Austria\" },\r\n  { label: \"Azerbaijan\" },\r\n  { label: \"Bahamas\" },\r\n  { label: \"Bahrain\" },\r\n  { label: \"Bangladesh\" },\r\n  { label: \"Barbados\" },\r\n  { label: \"Belarus\" },\r\n  { label: \"Belgium\" },\r\n  { label: \"Belize\" },\r\n  { label: \"Benin\" },\r\n  { label: \"Bermuda\" },\r\n  { label: \"Bhutan\" },\r\n  { label: \"Bolivia, Plurinational State of\" },\r\n  { label: \"Bonaire, Sint Eustatius and Saba\" },\r\n  { label: \"Bosnia and Herzegovina\" },\r\n  { label: \"Botswana\" },\r\n  { label: \"Bouvet Island\" },\r\n  { label: \"Brazil\" },\r\n  { label: \"British Indian Ocean Territory\" },\r\n  { label: \"Brunei Darussalam\" }\r\n];\r\n\r\n// Example first\r\nfunction renderInput(inputProps) {\r\n  const { InputProps, classes, ref, ...other } = inputProps;\r\n\r\n  return (\r\n    <TextField\r\n      InputProps={{\r\n        inputRef: ref,\r\n        classes: {\r\n          root: classes.inputRoot,\r\n          input: classes.inputInput\r\n        },\r\n        ...InputProps\r\n      }}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nfunction renderSuggestion(suggestionProps) {\r\n  const {\r\n    suggestion,\r\n    index,\r\n    itemProps,\r\n    highlightedIndex,\r\n    selectedItem\r\n  } = suggestionProps;\r\n  const isHighlighted = highlightedIndex === index;\r\n  const isSelected = (selectedItem || \"\").indexOf(suggestion.label) > -1;\r\n\r\n  return (\r\n    <MenuItem\r\n      {...itemProps}\r\n      key={`suggestion1${suggestion.label}`}\r\n      selected={isHighlighted}\r\n      component=\"div\"\r\n      style={{\r\n        fontWeight: isSelected ? 500 : 400\r\n      }}\r\n    >\r\n      {suggestion.label}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nrenderSuggestion.propTypes = {\r\n  highlightedIndex: PropTypes.number,\r\n  index: PropTypes.number,\r\n  itemProps: PropTypes.object,\r\n  selectedItem: PropTypes.string,\r\n  suggestion: PropTypes.shape({ label: PropTypes.string }).isRequired\r\n};\r\n\r\nfunction getSuggestions(value, { showEmpty = false } = {}) {\r\n  const inputValue = deburr(value.trim()).toLowerCase();\r\n  const inputLength = inputValue.length;\r\n  let count = 0;\r\n\r\n  return inputLength === 0 && !showEmpty\r\n    ? []\r\n    : suggestions.filter(suggestion => {\r\n        const keep =\r\n          count < 5 &&\r\n          suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\r\n\r\n        if (keep) {\r\n          count += 1;\r\n        }\r\n\r\n        return keep;\r\n      });\r\n}\r\n\r\nfunction DownshiftMultiple(props) {\r\n  const { classes } = props;\r\n  const [inputValue, setInputValue] = React.useState(\"\");\r\n  const [selectedItem, setSelectedItem] = React.useState([]);\r\n\r\n  function handleKeyDown(event) {\r\n    if (\r\n      selectedItem.length &&\r\n      !inputValue.length &&\r\n      event.key === \"Backspace\"\r\n    ) {\r\n      setSelectedItem(selectedItem.slice(0, selectedItem.length - 1));\r\n    }\r\n  }\r\n\r\n  function handleInputChange(event) {\r\n    setInputValue(event.target.value);\r\n  }\r\n\r\n  function handleChange(item) {\r\n    let newSelectedItem = [...selectedItem];\r\n    if (newSelectedItem.indexOf(item) === -1) {\r\n      newSelectedItem = [...newSelectedItem, item];\r\n    }\r\n    setInputValue(\"\");\r\n    setSelectedItem(newSelectedItem);\r\n  }\r\n\r\n  const handleDelete = item => () => {\r\n    const newSelectedItem = [...selectedItem];\r\n    newSelectedItem.splice(newSelectedItem.indexOf(item), 1);\r\n    setSelectedItem(newSelectedItem);\r\n  };\r\n\r\n  return (\r\n    <Downshift\r\n      id=\"downshift-multiple\"\r\n      inputValue={inputValue}\r\n      onChange={handleChange}\r\n      selectedItem={selectedItem}\r\n    >\r\n      {({\r\n        getInputProps,\r\n        getItemProps,\r\n        getLabelProps,\r\n        isOpen,\r\n        inputValue: inputValue2,\r\n        selectedItem: selectedItem2,\r\n        highlightedIndex\r\n      }) => {\r\n        const { onBlur, onChange, onFocus, ...inputProps } = getInputProps({\r\n          onKeyDown: handleKeyDown,\r\n          placeholder: \"Select multiple countries\"\r\n        });\r\n\r\n        return (\r\n          <div className={classes.container}>\r\n            {renderInput({\r\n              fullWidth: true,\r\n              classes,\r\n              label: \"Countries\",\r\n              InputLabelProps: getLabelProps(),\r\n              InputProps: {\r\n                startAdornment: selectedItem.map(item => (\r\n                  <Chip\r\n                    key={item}\r\n                    tabIndex={-1}\r\n                    label={item}\r\n                    className={classes.chip}\r\n                    onDelete={handleDelete(item)}\r\n                  />\r\n                )),\r\n                onBlur,\r\n                onChange: event => {\r\n                  handleInputChange(event);\r\n                  onChange(event);\r\n                },\r\n                onFocus\r\n              },\r\n              inputProps\r\n            })}\r\n\r\n            {isOpen ? (\r\n              <Paper className={classes.paper} square>\r\n                {getSuggestions(inputValue2).map((suggestion, index) =>\r\n                  renderSuggestion({\r\n                    suggestion,\r\n                    index,\r\n                    itemProps: getItemProps({ item: suggestion.label }),\r\n                    highlightedIndex,\r\n                    selectedItem: selectedItem2\r\n                  })\r\n                )}\r\n              </Paper>\r\n            ) : null}\r\n          </div>\r\n        );\r\n      }}\r\n    </Downshift>\r\n  );\r\n}\r\n\r\nDownshiftMultiple.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    height: 250\r\n  },\r\n  container: {\r\n    flexGrow: 1,\r\n    position: \"relative\"\r\n  },\r\n  paper: {\r\n    position: \"absolute\",\r\n    zIndex: 1,\r\n    marginTop: theme.spacing(1),\r\n    left: 0,\r\n    right: 0\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5, 0.25)\r\n  },\r\n  inputRoot: {\r\n    flexWrap: \"wrap\"\r\n  },\r\n  inputInput: {\r\n    width: \"auto\",\r\n    flexGrow: 1\r\n  },\r\n  divider: {\r\n    height: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nlet popperNode;\r\n\r\n// Example 2\r\nconst useStyles2 = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    height: 250\r\n  },\r\n  input: {\r\n    display: \"flex\",\r\n    padding: 0,\r\n    height: \"auto\"\r\n  },\r\n  valueContainer: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    overflow: \"hidden\"\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5, 0.25)\r\n  },\r\n  chipFocused: {\r\n    backgroundColor: emphasize(\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[300]\r\n        : theme.palette.grey[700],\r\n      0.08\r\n    )\r\n  },\r\n  noOptionsMessage: {\r\n    padding: theme.spacing(1, 2)\r\n  },\r\n  singleValue: {\r\n    fontSize: 16\r\n  },\r\n  placeholder: {\r\n    position: \"absolute\",\r\n    left: 2,\r\n    bottom: 6,\r\n    fontSize: 16\r\n  },\r\n  paper: {\r\n    position: \"absolute\",\r\n    zIndex: 1,\r\n    marginTop: theme.spacing(1),\r\n    left: 0,\r\n    right: 0\r\n  },\r\n  divider: {\r\n    height: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nfunction NoOptionsMessage(props) {\r\n  return (\r\n    <Typography\r\n      color=\"textSecondary\"\r\n      className={props.selectProps.classes.noOptionsMessage}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nNoOptionsMessage.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired\r\n};\r\n\r\nfunction inputComponent({ inputRef, ...props }) {\r\n  return <div ref={inputRef} {...props} />;\r\n}\r\n\r\ninputComponent.propTypes = {\r\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\r\n};\r\n\r\nfunction Control(props) {\r\n  const {\r\n    children,\r\n    innerProps,\r\n    innerRef,\r\n    selectProps: { classes, TextFieldProps }\r\n  } = props;\r\n\r\n  return (\r\n    <TextField\r\n      fullWidth\r\n      InputProps={{\r\n        inputComponent,\r\n        inputProps: {\r\n          className: classes.input,\r\n          ref: innerRef,\r\n          children,\r\n          ...innerProps\r\n        }\r\n      }}\r\n      {...TextFieldProps}\r\n    />\r\n  );\r\n}\r\n\r\nControl.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n  selectProps: PropTypes.object.isRequired\r\n};\r\n\r\nfunction Option(props) {\r\n  return (\r\n    <MenuItem\r\n      ref={props.innerRef}\r\n      selected={props.isFocused}\r\n      component=\"div\"\r\n      key={`option2${props.children}`}\r\n      style={{\r\n        fontWeight: props.isSelected ? 500 : 400\r\n      }}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nOption.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n  isFocused: PropTypes.bool,\r\n  isSelected: PropTypes.bool\r\n};\r\n\r\nfunction Placeholder(props) {\r\n  return (\r\n    <Typography\r\n      color=\"textSecondary\"\r\n      key={props.children}\r\n      className={props.selectProps.classes.placeholder}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nPlaceholder.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired\r\n};\r\n\r\nfunction SingleValue(props) {\r\n  return (\r\n    <Typography\r\n      key={props.children}\r\n      className={props.selectProps.classes.singleValue}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nSingleValue.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired\r\n};\r\n\r\nfunction ValueContainer(props) {\r\n  return (\r\n    <div\r\n      key={props.children}\r\n      className={props.selectProps.classes.valueContainer}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nValueContainer.propTypes = {\r\n  children: PropTypes.node,\r\n  selectProps: PropTypes.object.isRequired\r\n};\r\n\r\nfunction MultiValue(props) {\r\n  return (\r\n    <Chip\r\n      tabIndex={-1}\r\n      label={props.children}\r\n      key={`chip2${props.children}`}\r\n      className={clsx(props.selectProps.classes.chip, {\r\n        [props.selectProps.classes.chipFocused]: props.isFocused\r\n      })}\r\n      onDelete={props.removeProps.onClick}\r\n      deleteIcon={<CancelIcon {...props.removeProps} />}\r\n    />\r\n  );\r\n}\r\n\r\nMultiValue.propTypes = {\r\n  children: PropTypes.node,\r\n  isFocused: PropTypes.bool,\r\n  removeProps: PropTypes.object.isRequired,\r\n  selectProps: PropTypes.object.isRequired\r\n};\r\n\r\nfunction Menu(props) {\r\n  return (\r\n    <Paper\r\n      square\r\n      key={props.children}\r\n      className={props.selectProps.classes.paper}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </Paper>\r\n  );\r\n}\r\n\r\nMenu.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object\r\n};\r\n\r\nconst components = {\r\n  Control,\r\n  Menu,\r\n  MultiValue,\r\n  NoOptionsMessage,\r\n  Option,\r\n  Placeholder,\r\n  SingleValue,\r\n  ValueContainer\r\n};\r\n\r\nexport default function AutocompleteExamplesPage() {\r\n  const classes = useStyles();\r\n\r\n  const classes2 = useStyles2();\r\n  const theme = useTheme();\r\n  const [single, setSingle] = React.useState(null);\r\n  const [multi, setMulti] = React.useState(null);\r\n\r\n  function handleChangeSingle(value) {\r\n    setSingle(value);\r\n  }\r\n\r\n  function handleChangeMulti(value) {\r\n    setMulti(value);\r\n  }\r\n\r\n  const selectStyles = {\r\n    input: base => ({\r\n      ...base,\r\n      color: theme.palette.text.primary,\r\n      \"& input\": {\r\n        font: \"inherit\"\r\n      }\r\n    })\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Notice icon=\"flaticon-warning font-primary\">\r\n        <span>\r\n          The autocomplete is a normal text input enhanced by a panel of\r\n          suggested options.\r\n        </span>{\" \"}\r\n        <span>\r\n          For more info please check the components's official{\" \"}\r\n          <a\r\n            target=\"_blank\"\r\n            className=\"font-weight-bold\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://material-ui.com/components/autocomplete/\"\r\n          >\r\n            demos & documentation\r\n          </a>\r\n        </span>\r\n      </Notice>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <KTCodeExample\r\n            jsCode={jsCode1}\r\n            beforeCodeTitle=\"Downshift\"\r\n            codeBlockHeight=\"400px\"\r\n          >\r\n            <div>\r\n              In the following example, we demonstrate how to use{\" \"}\r\n              <a href=\"https://github.com/downshift-js/downshift\">\r\n                <code>downshift</code>\r\n              </a>\r\n              . The last demo allow to clear the input and show a number of\r\n              options on focus.\r\n            </div>\r\n            <div className=\"separator separator-dashed my-7\"></div>\r\n            <div className={classes.root}>\r\n              <Downshift id=\"downshift-simple\">\r\n                {({\r\n                  getInputProps,\r\n                  getItemProps,\r\n                  getLabelProps,\r\n                  getMenuProps,\r\n                  highlightedIndex,\r\n                  inputValue,\r\n                  isOpen,\r\n                  selectedItem\r\n                }) => {\r\n                  const { onBlur, onFocus, ...inputProps } = getInputProps({\r\n                    placeholder: \"Search for a country (start with a)\"\r\n                  });\r\n\r\n                  return (\r\n                    <div className={classes.container}>\r\n                      {renderInput({\r\n                        fullWidth: true,\r\n                        classes,\r\n                        label: \"Country\",\r\n                        InputLabelProps: getLabelProps({ shrink: true }),\r\n                        InputProps: { onBlur, onFocus },\r\n                        inputProps\r\n                      })}\r\n\r\n                      <div {...getMenuProps()}>\r\n                        {isOpen ? (\r\n                          <Paper className={classes.paper} square>\r\n                            {getSuggestions(inputValue).map(\r\n                              (suggestion, index) =>\r\n                                renderSuggestion({\r\n                                  suggestion,\r\n                                  index,\r\n                                  itemProps: getItemProps({\r\n                                    item: suggestion.label\r\n                                  }),\r\n                                  highlightedIndex,\r\n                                  selectedItem\r\n                                })\r\n                            )}\r\n                          </Paper>\r\n                        ) : null}\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                }}\r\n              </Downshift>\r\n              <div className={classes.divider} />\r\n              <DownshiftMultiple classes={classes} />\r\n              <div className={classes.divider} />\r\n              <Downshift id=\"downshift-popper\">\r\n                {({\r\n                  getInputProps,\r\n                  getItemProps,\r\n                  getLabelProps,\r\n                  getMenuProps,\r\n                  highlightedIndex,\r\n                  inputValue,\r\n                  isOpen,\r\n                  selectedItem\r\n                }) => {\r\n                  const { onBlur, onFocus, ...inputProps } = getInputProps({\r\n                    placeholder: \"With Popper\"\r\n                  });\r\n\r\n                  return (\r\n                    <div className={classes.container}>\r\n                      {renderInput({\r\n                        fullWidth: true,\r\n                        classes,\r\n                        label: \"Country\",\r\n                        InputProps: { onBlur, onFocus },\r\n                        InputLabelProps: getLabelProps({ shrink: true }),\r\n                        inputProps,\r\n                        ref: node => {\r\n                          popperNode = node;\r\n                        }\r\n                      })}\r\n\r\n                      <Popper open={isOpen} anchorEl={popperNode}>\r\n                        <div\r\n                          {...(isOpen\r\n                            ? getMenuProps({}, { suppressRefError: true })\r\n                            : {})}\r\n                        >\r\n                          <Paper\r\n                            square\r\n                            style={{\r\n                              marginTop: 8,\r\n                              width: popperNode\r\n                                ? popperNode.clientWidth\r\n                                : undefined\r\n                            }}\r\n                          >\r\n                            {getSuggestions(inputValue).map(\r\n                              (suggestion, index) =>\r\n                                renderSuggestion({\r\n                                  suggestion,\r\n                                  index,\r\n                                  itemProps: getItemProps({\r\n                                    item: suggestion.label\r\n                                  }),\r\n                                  highlightedIndex,\r\n                                  selectedItem\r\n                                })\r\n                            )}\r\n                          </Paper>\r\n                        </div>\r\n                      </Popper>\r\n                    </div>\r\n                  );\r\n                }}\r\n              </Downshift>\r\n              <div className={classes.divider} />\r\n              <Downshift id=\"downshift-options\">\r\n                {({\r\n                  clearSelection,\r\n                  getInputProps,\r\n                  getItemProps,\r\n                  getLabelProps,\r\n                  getMenuProps,\r\n                  highlightedIndex,\r\n                  inputValue,\r\n                  isOpen,\r\n                  openMenu,\r\n                  selectedItem\r\n                }) => {\r\n                  const {\r\n                    onBlur,\r\n                    onChange,\r\n                    onFocus,\r\n                    ...inputProps\r\n                  } = getInputProps({\r\n                    onChange: event => {\r\n                      if (event.target.value === \"\") {\r\n                        clearSelection();\r\n                      }\r\n                    },\r\n                    onFocus: openMenu,\r\n                    placeholder: \"With the clear & show empty options\"\r\n                  });\r\n\r\n                  return (\r\n                    <div className={classes.container}>\r\n                      {renderInput({\r\n                        fullWidth: true,\r\n                        classes,\r\n                        label: \"Countries\",\r\n                        InputLabelProps: getLabelProps({ shrink: true }),\r\n                        InputProps: { onBlur, onChange, onFocus },\r\n                        inputProps\r\n                      })}\r\n\r\n                      <div {...getMenuProps()}>\r\n                        {isOpen ? (\r\n                          <Paper className={classes.paper} square>\r\n                            {getSuggestions(inputValue, {\r\n                              showEmpty: true\r\n                            }).map((suggestion, index) =>\r\n                              renderSuggestion({\r\n                                suggestion,\r\n                                index,\r\n                                itemProps: getItemProps({\r\n                                  item: suggestion.label\r\n                                }),\r\n                                highlightedIndex,\r\n                                selectedItem\r\n                              })\r\n                            )}\r\n                          </Paper>\r\n                        ) : null}\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                }}\r\n              </Downshift>\r\n            </div>\r\n          </KTCodeExample>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <KTCodeExample\r\n            jsCode={jsCode2}\r\n            beforeCodeTitle=\"React-select\"\r\n            codeBlockHeight=\"400px\"\r\n          >\r\n            <span>\r\n              In the following example, we demonstrate how to use{\" \"}\r\n              <a href=\"https://github.com/JedWatson/react-select\">\r\n                <code>react-select</code>\r\n              </a>\r\n              .\r\n            </span>\r\n            <div className=\"separator separator-dashed my-7\" />\r\n            <div className={classes2.root}>\r\n              <NoSsr key=\"nossr22\">\r\n                <Select\r\n                  className=\"react-select\"\r\n                  classes={classes2}\r\n                  styles={selectStyles}\r\n                  inputId=\"react-select-single\"\r\n                  TextFieldProps={{\r\n                    label: \"Country\",\r\n                    InputLabelProps: {\r\n                      htmlFor: \"react-select-single\",\r\n                      shrink: true\r\n                    },\r\n                    placeholder: \"Search a country (start with a)\"\r\n                  }}\r\n                  options={suggestions}\r\n                  components={components}\r\n                  value={single}\r\n                  onChange={handleChangeSingle}\r\n                />\r\n                <div className={classes2.divider} />\r\n                <Select\r\n                  key={\"\"}\r\n                  className=\"react-select\"\r\n                  classes={classes2}\r\n                  styles={selectStyles}\r\n                  inputId=\"react-select-multiple\"\r\n                  TextFieldProps={{\r\n                    label: \"Countries\",\r\n                    InputLabelProps: {\r\n                      htmlFor: \"react-select-multiple\",\r\n                      shrink: true\r\n                    },\r\n                    placeholder: \"Select multiple countries\"\r\n                  }}\r\n                  options={suggestions}\r\n                  components={components}\r\n                  value={multi}\r\n                  onChange={handleChangeMulti}\r\n                  isMulti\r\n                />\r\n              </NoSsr>\r\n            </div>\r\n          </KTCodeExample>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst jsCode1 = `\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport deburr from 'lodash/deburr';\r\nimport Downshift from 'downshift';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nconst suggestions = [\r\n  { label: 'Afghanistan' },\r\n  { label: 'Aland Islands' },\r\n  { label: 'Albania' },\r\n  { label: 'Algeria' },\r\n  { label: 'American Samoa' },\r\n  { label: 'Andorra' },\r\n  { label: 'Angola' },\r\n  { label: 'Anguilla' },\r\n  { label: 'Antarctica' },\r\n  { label: 'Antigua and Barbuda' },\r\n  { label: 'Argentina' },\r\n  { label: 'Armenia' },\r\n  { label: 'Aruba' },\r\n  { label: 'Australia' },\r\n  { label: 'Austria' },\r\n  { label: 'Azerbaijan' },\r\n  { label: 'Bahamas' },\r\n  { label: 'Bahrain' },\r\n  { label: 'Bangladesh' },\r\n  { label: 'Barbados' },\r\n  { label: 'Belarus' },\r\n  { label: 'Belgium' },\r\n  { label: 'Belize' },\r\n  { label: 'Benin' },\r\n  { label: 'Bermuda' },\r\n  { label: 'Bhutan' },\r\n  { label: 'Bolivia, Plurinational State of' },\r\n  { label: 'Bonaire, Sint Eustatius and Saba' },\r\n  { label: 'Bosnia and Herzegovina' },\r\n  { label: 'Botswana' },\r\n  { label: 'Bouvet Island' },\r\n  { label: 'Brazil' },\r\n  { label: 'British Indian Ocean Territory' },\r\n  { label: 'Brunei Darussalam' },\r\n];\r\n\r\nfunction renderInput(inputProps) {\r\n  const { InputProps, classes, ref, ...other } = inputProps;\r\n\r\n  return (\r\n    <TextField\r\n      InputProps={{\r\n        inputRef: ref,\r\n        classes: {\r\n          root: classes.inputRoot,\r\n          input: classes.inputInput,\r\n        },\r\n        ...InputProps,\r\n      }}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nfunction renderSuggestion(suggestionProps) {\r\n  const { suggestion, index, itemProps, highlightedIndex, selectedItem } = suggestionProps;\r\n  const isHighlighted = highlightedIndex === index;\r\n  const isSelected = (selectedItem || '').indexOf(suggestion.label) > -1;\r\n\r\n  return (\r\n    <MenuItem\r\n      {...itemProps}\r\n      key={suggestion.label}\r\n      selected={isHighlighted}\r\n      component=\"div\"\r\n      style={{\r\n        fontWeight: isSelected ? 500 : 400,\r\n      }}\r\n    >\r\n      {suggestion.label}\r\n    </MenuItem>\r\n  );\r\n}\r\nrenderSuggestion.propTypes = {\r\n  highlightedIndex: PropTypes.number,\r\n  index: PropTypes.number,\r\n  itemProps: PropTypes.object,\r\n  selectedItem: PropTypes.string,\r\n  suggestion: PropTypes.shape({ label: PropTypes.string }).isRequired,\r\n};\r\n\r\nfunction getSuggestions(value, { showEmpty = false } = {}) {\r\n  const inputValue = deburr(value.trim()).toLowerCase();\r\n  const inputLength = inputValue.length;\r\n  let count = 0;\r\n\r\n  return inputLength === 0 && !showEmpty\r\n    ? []\r\n    : suggestions.filter(suggestion => {\r\n        const keep =\r\n          count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\r\n\r\n        if (keep) {\r\n          count += 1;\r\n        }\r\n\r\n        return keep;\r\n      });\r\n}\r\n\r\nfunction DownshiftMultiple(props) {\r\n  const { classes } = props;\r\n  const [inputValue, setInputValue] = React.useState('');\r\n  const [selectedItem, setSelectedItem] = React.useState([]);\r\n\r\n  function handleKeyDown(event) {\r\n    if (selectedItem.length && !inputValue.length && event.key === 'Backspace') {\r\n      setSelectedItem(selectedItem.slice(0, selectedItem.length - 1));\r\n    }\r\n  }\r\n\r\n  function handleInputChange(event) {\r\n    setInputValue(event.target.value);\r\n  }\r\n\r\n  function handleChange(item) {\r\n    let newSelectedItem = [...selectedItem];\r\n    if (newSelectedItem.indexOf(item) === -1) {\r\n      newSelectedItem = [...newSelectedItem, item];\r\n    }\r\n    setInputValue('');\r\n    setSelectedItem(newSelectedItem);\r\n  }\r\n\r\n  const handleDelete = item => () => {\r\n    const newSelectedItem = [...selectedItem];\r\n    newSelectedItem.splice(newSelectedItem.indexOf(item), 1);\r\n    setSelectedItem(newSelectedItem);\r\n  };\r\n\r\n  return (\r\n    <Downshift\r\n      id=\"downshift-multiple\"\r\n      inputValue={inputValue}\r\n      onChange={handleChange}\r\n      selectedItem={selectedItem}\r\n    >\r\n      {({\r\n        getInputProps,\r\n        getItemProps,\r\n        getLabelProps,\r\n        isOpen,\r\n        inputValue: inputValue2,\r\n        selectedItem: selectedItem2,\r\n        highlightedIndex,\r\n      }) => {\r\n        const { onBlur, onChange, onFocus, ...inputProps } = getInputProps({\r\n          onKeyDown: handleKeyDown,\r\n          placeholder: 'Select multiple countries',\r\n        });\r\n\r\n        return (\r\n          <div className={classes.container}>\r\n            {renderInput({\r\n              fullWidth: true,\r\n              classes,\r\n              label: 'Countries',\r\n              InputLabelProps: getLabelProps(),\r\n              InputProps: {\r\n                startAdornment: selectedItem.map(item => (\r\n                  <Chip\r\n                    key={item}\r\n                    tabIndex={-1}\r\n                    label={item}\r\n                    className={classes.chip}\r\n                    onDelete={handleDelete(item)}\r\n                  />\r\n                )),\r\n                onBlur,\r\n                onChange: event => {\r\n                  handleInputChange(event);\r\n                  onChange(event);\r\n                },\r\n                onFocus,\r\n              },\r\n              inputProps,\r\n            })}\r\n\r\n            {isOpen ? (\r\n              <Paper className={classes.paper} square>\r\n                {getSuggestions(inputValue2).map((suggestion, index) =>\r\n                  renderSuggestion({\r\n                    suggestion,\r\n                    index,\r\n                    itemProps: getItemProps({ item: suggestion.label }),\r\n                    highlightedIndex,\r\n                    selectedItem: selectedItem2,\r\n                  }),\r\n                )}\r\n              </Paper>\r\n            ) : null}\r\n          </div>\r\n        );\r\n      }}\r\n    </Downshift>\r\n  );\r\n}\r\n\r\nDownshiftMultiple.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    height: 250,\r\n  },\r\n  container: {\r\n    flexGrow: 1,\r\n    position: 'relative',\r\n  },\r\n  paper: {\r\n    position: 'absolute',\r\n    zIndex: 1,\r\n    marginTop: theme.spacing(1),\r\n    left: 0,\r\n    right: 0,\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5, 0.25),\r\n  },\r\n  inputRoot: {\r\n    flexWrap: 'wrap',\r\n  },\r\n  inputInput: {\r\n    width: 'auto',\r\n    flexGrow: 1,\r\n  },\r\n  divider: {\r\n    height: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nlet popperNode;\r\n\r\nexport default function IntegrationDownshift() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Downshift id=\"downshift-simple\">\r\n        {({\r\n          getInputProps,\r\n          getItemProps,\r\n          getLabelProps,\r\n          getMenuProps,\r\n          highlightedIndex,\r\n          inputValue,\r\n          isOpen,\r\n          selectedItem,\r\n        }) => {\r\n          const { onBlur, onFocus, ...inputProps } = getInputProps({\r\n            placeholder: 'Search for a country (start with a)',\r\n          });\r\n\r\n          return (\r\n            <div className={classes.container}>\r\n              {renderInput({\r\n                fullWidth: true,\r\n                classes,\r\n                label: 'Country',\r\n                InputLabelProps: getLabelProps({ shrink: true }),\r\n                InputProps: { onBlur, onFocus },\r\n                inputProps,\r\n              })}\r\n\r\n              <div {...getMenuProps()}>\r\n                {isOpen ? (\r\n                  <Paper className={classes.paper} square>\r\n                    {getSuggestions(inputValue).map((suggestion, index) =>\r\n                      renderSuggestion({\r\n                        suggestion,\r\n                        index,\r\n                        itemProps: getItemProps({ item: suggestion.label }),\r\n                        highlightedIndex,\r\n                        selectedItem,\r\n                      }),\r\n                    )}\r\n                  </Paper>\r\n                ) : null}\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Downshift>\r\n      <div className={classes.divider} />\r\n      <DownshiftMultiple classes={classes} />\r\n      <div className={classes.divider} />\r\n      <Downshift id=\"downshift-popper\">\r\n        {({\r\n          getInputProps,\r\n          getItemProps,\r\n          getLabelProps,\r\n          getMenuProps,\r\n          highlightedIndex,\r\n          inputValue,\r\n          isOpen,\r\n          selectedItem,\r\n        }) => {\r\n          const { onBlur, onFocus, ...inputProps } = getInputProps({\r\n            placeholder: 'With Popper',\r\n          });\r\n\r\n          return (\r\n            <div className={classes.container}>\r\n              {renderInput({\r\n                fullWidth: true,\r\n                classes,\r\n                label: 'Country',\r\n                InputProps: { onBlur, onFocus },\r\n                InputLabelProps: getLabelProps({ shrink: true }),\r\n                inputProps,\r\n                ref: node => {\r\n                  popperNode = node;\r\n                },\r\n              })}\r\n\r\n              <Popper open={isOpen} anchorEl={popperNode}>\r\n                <div {...(isOpen ? getMenuProps({}, { suppressRefError: true }) : {})}>\r\n                  <Paper\r\n                    square\r\n                    style={{ marginTop: 8, width: popperNode ? popperNode.clientWidth : undefined }}\r\n                  >\r\n                    {getSuggestions(inputValue).map((suggestion, index) =>\r\n                      renderSuggestion({\r\n                        suggestion,\r\n                        index,\r\n                        itemProps: getItemProps({ item: suggestion.label }),\r\n                        highlightedIndex,\r\n                        selectedItem,\r\n                      }),\r\n                    )}\r\n                  </Paper>\r\n                </div>\r\n              </Popper>\r\n            </div>\r\n          );\r\n        }}\r\n      </Downshift>\r\n      <div className={classes.divider} />\r\n      <Downshift id=\"downshift-options\">\r\n        {({\r\n          clearSelection,\r\n          getInputProps,\r\n          getItemProps,\r\n          getLabelProps,\r\n          getMenuProps,\r\n          highlightedIndex,\r\n          inputValue,\r\n          isOpen,\r\n          openMenu,\r\n          selectedItem,\r\n        }) => {\r\n          const { onBlur, onChange, onFocus, ...inputProps } = getInputProps({\r\n            onChange: event => {\r\n              if (event.target.value === '') {\r\n                clearSelection();\r\n              }\r\n            },\r\n            onFocus: openMenu,\r\n            placeholder: 'With the clear & show empty options',\r\n          });\r\n\r\n          return (\r\n            <div className={classes.container}>\r\n              {renderInput({\r\n                fullWidth: true,\r\n                classes,\r\n                label: 'Countries',\r\n                InputLabelProps: getLabelProps({ shrink: true }),\r\n                InputProps: { onBlur, onChange, onFocus },\r\n                inputProps,\r\n              })}\r\n\r\n              <div {...getMenuProps()}>\r\n                {isOpen ? (\r\n                  <Paper className={classes.paper} square>\r\n                    {getSuggestions(inputValue, { showEmpty: true }).map((suggestion, index) =>\r\n                      renderSuggestion({\r\n                        suggestion,\r\n                        index,\r\n                        itemProps: getItemProps({ item: suggestion.label }),\r\n                        highlightedIndex,\r\n                        selectedItem,\r\n                      }),\r\n                    )}\r\n                  </Paper>\r\n                ) : null}\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Downshift>\r\n    </div>\r\n  );\r\n}\r\n`;\r\nconst jsCode2 = `\r\nimport React from 'react';\r\nimport clsx from 'clsx';\r\nimport Select from 'react-select';\r\nimport { emphasize, makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport NoSsr from '@material-ui/core/NoSsr';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst suggestions = [\r\n  { label: 'Afghanistan' },\r\n  { label: 'Aland Islands' },\r\n  { label: 'Albania' },\r\n  { label: 'Algeria' },\r\n  { label: 'American Samoa' },\r\n  { label: 'Andorra' },\r\n  { label: 'Angola' },\r\n  { label: 'Anguilla' },\r\n  { label: 'Antarctica' },\r\n  { label: 'Antigua and Barbuda' },\r\n  { label: 'Argentina' },\r\n  { label: 'Armenia' },\r\n  { label: 'Aruba' },\r\n  { label: 'Australia' },\r\n  { label: 'Austria' },\r\n  { label: 'Azerbaijan' },\r\n  { label: 'Bahamas' },\r\n  { label: 'Bahrain' },\r\n  { label: 'Bangladesh' },\r\n  { label: 'Barbados' },\r\n  { label: 'Belarus' },\r\n  { label: 'Belgium' },\r\n  { label: 'Belize' },\r\n  { label: 'Benin' },\r\n  { label: 'Bermuda' },\r\n  { label: 'Bhutan' },\r\n  { label: 'Bolivia, Plurinational State of' },\r\n  { label: 'Bonaire, Sint Eustatius and Saba' },\r\n  { label: 'Bosnia and Herzegovina' },\r\n  { label: 'Botswana' },\r\n  { label: 'Bouvet Island' },\r\n  { label: 'Brazil' },\r\n  { label: 'British Indian Ocean Territory' },\r\n  { label: 'Brunei Darussalam' },\r\n].map(suggestion => ({\r\n  value: suggestion.label,\r\n  label: suggestion.label,\r\n}));\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    height: 250,\r\n  },\r\n  input: {\r\n    display: 'flex',\r\n    padding: 0,\r\n    height: 'auto',\r\n  },\r\n  valueContainer: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    overflow: 'hidden',\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5, 0.25),\r\n  },\r\n  chipFocused: {\r\n    backgroundColor: emphasize(\r\n      theme.palette.type === 'light' ? theme.palette.grey[300] : theme.palette.grey[700],\r\n      0.08,\r\n    ),\r\n  },\r\n  noOptionsMessage: {\r\n    padding: theme.spacing(1, 2),\r\n  },\r\n  singleValue: {\r\n    fontSize: 16,\r\n  },\r\n  placeholder: {\r\n    position: 'absolute',\r\n    left: 2,\r\n    bottom: 6,\r\n    fontSize: 16,\r\n  },\r\n  paper: {\r\n    position: 'absolute',\r\n    zIndex: 1,\r\n    marginTop: theme.spacing(1),\r\n    left: 0,\r\n    right: 0,\r\n  },\r\n  divider: {\r\n    height: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nfunction NoOptionsMessage(props) {\r\n  return (\r\n    <Typography\r\n      color=\"textSecondary\"\r\n      className={props.selectProps.classes.noOptionsMessage}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nNoOptionsMessage.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction inputComponent({ inputRef, ...props }) {\r\n  return <div ref={inputRef} {...props} />;\r\n}\r\n\r\ninputComponent.propTypes = {\r\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n};\r\n\r\nfunction Control(props) {\r\n  const {\r\n    children,\r\n    innerProps,\r\n    innerRef,\r\n    selectProps: { classes, TextFieldProps },\r\n  } = props;\r\n\r\n  return (\r\n    <TextField\r\n      fullWidth\r\n      InputProps={{\r\n        inputComponent,\r\n        inputProps: {\r\n          className: classes.input,\r\n          ref: innerRef,\r\n          children,\r\n          ...innerProps,\r\n        },\r\n      }}\r\n      {...TextFieldProps}\r\n    />\r\n  );\r\n}\r\n\r\nControl.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction Option(props) {\r\n  return (\r\n    <MenuItem\r\n      ref={props.innerRef}\r\n      selected={props.isFocused}\r\n      component=\"div\"\r\n      style={{\r\n        fontWeight: props.isSelected ? 500 : 400,\r\n      }}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nOption.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n  isFocused: PropTypes.bool,\r\n  isSelected: PropTypes.bool,\r\n};\r\n\r\nfunction Placeholder(props) {\r\n  return (\r\n    <Typography\r\n      color=\"textSecondary\"\r\n      className={props.selectProps.classes.placeholder}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nPlaceholder.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction SingleValue(props) {\r\n  return (\r\n    <Typography className={props.selectProps.classes.singleValue} {...props.innerProps}>\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nSingleValue.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction ValueContainer(props) {\r\n  return <div className={props.selectProps.classes.valueContainer}>{props.children}</div>;\r\n}\r\n\r\nValueContainer.propTypes = {\r\n  children: PropTypes.node,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction MultiValue(props) {\r\n  return (\r\n    <Chip\r\n      tabIndex={-1}\r\n      label={props.children}\r\n      className={clsx(props.selectProps.classes.chip, {\r\n        [props.selectProps.classes.chipFocused]: props.isFocused,\r\n      })}\r\n      onDelete={props.removeProps.onClick}\r\n      deleteIcon={<CancelIcon {...props.removeProps} />}\r\n    />\r\n  );\r\n}\r\n\r\nMultiValue.propTypes = {\r\n  children: PropTypes.node,\r\n  isFocused: PropTypes.bool,\r\n  removeProps: PropTypes.object.isRequired,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction Menu(props) {\r\n  return (\r\n    <Paper square className={props.selectProps.classes.paper} {...props.innerProps}>\r\n      {props.children}\r\n    </Paper>\r\n  );\r\n}\r\n\r\nMenu.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object,\r\n};\r\n\r\nconst components = {\r\n  Control,\r\n  Menu,\r\n  MultiValue,\r\n  NoOptionsMessage,\r\n  Option,\r\n  Placeholder,\r\n  SingleValue,\r\n  ValueContainer,\r\n};\r\n\r\nexport default function IntegrationReactSelect() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [single, setSingle] = React.useState(null);\r\n  const [multi, setMulti] = React.useState(null);\r\n\r\n  function handleChangeSingle(value) {\r\n    setSingle(value);\r\n  }\r\n\r\n  function handleChangeMulti(value) {\r\n    setMulti(value);\r\n  }\r\n\r\n  const selectStyles = {\r\n    input: base => ({\r\n      ...base,\r\n      color: theme.palette.text.primary,\r\n      '& input': {\r\n        font: 'inherit',\r\n      },\r\n    }),\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <NoSsr>\r\n        <Select\r\n          classes={classes}\r\n          styles={selectStyles}\r\n          inputId=\"react-select-single\"\r\n          TextFieldProps={{\r\n            label: 'Country',\r\n            InputLabelProps: {\r\n              htmlFor: 'react-select-single',\r\n              shrink: true,\r\n            },\r\n            placeholder: 'Search a country (start with a)',\r\n          }}\r\n          options={suggestions}\r\n          components={components}\r\n          value={single}\r\n          onChange={handleChangeSingle}\r\n        />\r\n        <div className={classes.divider} />\r\n        <Select\r\n          classes={classes}\r\n          styles={selectStyles}\r\n          inputId=\"react-select-multiple\"\r\n          TextFieldProps={{\r\n            label: 'Countries',\r\n            InputLabelProps: {\r\n              htmlFor: 'react-select-multiple',\r\n              shrink: true,\r\n            },\r\n            placeholder: 'Select multiple countries',\r\n          }}\r\n          options={suggestions}\r\n          components={components}\r\n          value={multi}\r\n          onChange={handleChangeMulti}\r\n          isMulti\r\n        />\r\n      </NoSsr>\r\n    </div>\r\n  );\r\n}\r\n`;\r\nconst jsCode3 = `\r\nimport React from 'react';\r\nimport deburr from 'lodash/deburr';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport match from 'autosuggest-highlight/match';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst suggestions = [\r\n  { label: 'Afghanistan' },\r\n  { label: 'Aland Islands' },\r\n  { label: 'Albania' },\r\n  { label: 'Algeria' },\r\n  { label: 'American Samoa' },\r\n  { label: 'Andorra' },\r\n  { label: 'Angola' },\r\n  { label: 'Anguilla' },\r\n  { label: 'Antarctica' },\r\n  { label: 'Antigua and Barbuda' },\r\n  { label: 'Argentina' },\r\n  { label: 'Armenia' },\r\n  { label: 'Aruba' },\r\n  { label: 'Australia' },\r\n  { label: 'Austria' },\r\n  { label: 'Azerbaijan' },\r\n  { label: 'Bahamas' },\r\n  { label: 'Bahrain' },\r\n  { label: 'Bangladesh' },\r\n  { label: 'Barbados' },\r\n  { label: 'Belarus' },\r\n  { label: 'Belgium' },\r\n  { label: 'Belize' },\r\n  { label: 'Benin' },\r\n  { label: 'Bermuda' },\r\n  { label: 'Bhutan' },\r\n  { label: 'Bolivia, Plurinational State of' },\r\n  { label: 'Bonaire, Sint Eustatius and Saba' },\r\n  { label: 'Bosnia and Herzegovina' },\r\n  { label: 'Botswana' },\r\n  { label: 'Bouvet Island' },\r\n  { label: 'Brazil' },\r\n  { label: 'British Indian Ocean Territory' },\r\n  { label: 'Brunei Darussalam' },\r\n];\r\n\r\nfunction renderInputComponent(inputProps) {\r\n  const { classes, inputRef = () => {}, ref, ...other } = inputProps;\r\n\r\n  return (\r\n    <TextField\r\n      fullWidth\r\n      InputProps={{\r\n        inputRef: node => {\r\n          ref(node);\r\n          inputRef(node);\r\n        },\r\n        classes: {\r\n          input: classes.input,\r\n        },\r\n      }}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nfunction renderSuggestion(suggestion, { query, isHighlighted }) {\r\n  const matches = match(suggestion.label, query);\r\n  const parts = parse(suggestion.label, matches);\r\n\r\n  return (\r\n    <MenuItem selected={isHighlighted} component=\"div\">\r\n      <div>\r\n        {parts.map(part => (\r\n          <span key={part.text} style={{ fontWeight: part.highlight ? 500 : 400 }}>\r\n            {part.text}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nfunction getSuggestions(value) {\r\n  const inputValue = deburr(value.trim()).toLowerCase();\r\n  const inputLength = inputValue.length;\r\n  let count = 0;\r\n\r\n  return inputLength === 0\r\n    ? []\r\n    : suggestions.filter(suggestion => {\r\n        const keep =\r\n          count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\r\n\r\n        if (keep) {\r\n          count += 1;\r\n        }\r\n\r\n        return keep;\r\n      });\r\n}\r\n\r\nfunction getSuggestionValue(suggestion) {\r\n  return suggestion.label;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    height: 250,\r\n    flexGrow: 1,\r\n  },\r\n  container: {\r\n    position: 'relative',\r\n  },\r\n  suggestionsContainerOpen: {\r\n    position: 'absolute',\r\n    zIndex: 1,\r\n    marginTop: theme.spacing(1),\r\n    left: 0,\r\n    right: 0,\r\n  },\r\n  suggestion: {\r\n    display: 'block',\r\n  },\r\n  suggestionsList: {\r\n    margin: 0,\r\n    padding: 0,\r\n    listStyleType: 'none',\r\n  },\r\n  divider: {\r\n    height: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function IntegrationAutosuggest() {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [state, setState] = React.useState({\r\n    single: '',\r\n    popper: '',\r\n  });\r\n\r\n  const [stateSuggestions, setSuggestions] = React.useState([]);\r\n\r\n  const handleSuggestionsFetchRequested = ({ value }) => {\r\n    setSuggestions(getSuggestions(value));\r\n  };\r\n\r\n  const handleSuggestionsClearRequested = () => {\r\n    setSuggestions([]);\r\n  };\r\n\r\n  const handleChange = name => (event, { newValue }) => {\r\n    setState({\r\n      ...state,\r\n      [name]: newValue,\r\n    });\r\n  };\r\n\r\n  const autosuggestProps = {\r\n    renderInputComponent,\r\n    suggestions: stateSuggestions,\r\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\r\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\r\n    getSuggestionValue,\r\n    renderSuggestion,\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Autosuggest\r\n        {...autosuggestProps}\r\n        inputProps={{\r\n          classes,\r\n          id: 'react-autosuggest-simple',\r\n          label: 'Country',\r\n          placeholder: 'Search a country (start with a)',\r\n          value: state.single,\r\n          onChange: handleChange('single'),\r\n        }}\r\n        theme={{\r\n          container: classes.container,\r\n          suggestionsContainerOpen: classes.suggestionsContainerOpen,\r\n          suggestionsList: classes.suggestionsList,\r\n          suggestion: classes.suggestion,\r\n        }}\r\n        renderSuggestionsContainer={options => (\r\n          <Paper {...options.containerProps} square>\r\n            {options.children}\r\n          </Paper>\r\n        )}\r\n      />\r\n      <div className={classes.divider} />\r\n      <Autosuggest\r\n        {...autosuggestProps}\r\n        inputProps={{\r\n          classes,\r\n          id: 'react-autosuggest-popper',\r\n          label: 'Country',\r\n          placeholder: 'With Popper',\r\n          value: state.popper,\r\n          onChange: handleChange('popper'),\r\n          inputRef: node => {\r\n            setAnchorEl(node);\r\n          },\r\n          InputLabelProps: {\r\n            shrink: true,\r\n          },\r\n        }}\r\n        theme={{\r\n          suggestionsList: classes.suggestionsList,\r\n          suggestion: classes.suggestion,\r\n        }}\r\n        renderSuggestionsContainer={options => (\r\n          <Popper anchorEl={anchorEl} open={Boolean(options.children)}>\r\n            <Paper\r\n              square\r\n              {...options.containerProps}\r\n              style={{ width: anchorEl ? anchorEl.clientWidth : undefined }}\r\n            >\r\n              {options.children}\r\n            </Paper>\r\n          </Popper>\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}