{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nisha\\\\OneDrive\\\\Desktop\\\\technogrip\\\\src\\\\app\\\\modules\\\\ECommerce\\\\pages\\\\customers\\\\customer-edit-dialog\\\\CustomerEditDialog.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../../../_redux/customers/customersActions\";\nimport { CustomerEditDialogHeader } from \"./CustomerEditDialogHeader\";\nimport { CustomerEditForm } from \"./CustomerEditForm\";\nimport { useCustomersUIContext } from \"../CustomersUIContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function CustomerEditDialog({\n  id,\n  show,\n  onHide\n}) {\n  _s();\n\n  // Customers UI Context\n  const customersUIContext = useCustomersUIContext();\n  const customersUIProps = useMemo(() => {\n    return {\n      initCustomer: customersUIContext.initCustomer\n    };\n  }, [customersUIContext]); // Customers Redux state\n\n  const dispatch = useDispatch();\n  const {\n    actionsLoading,\n    customerForEdit\n  } = useSelector(state => ({\n    actionsLoading: state.customers.actionsLoading,\n    customerForEdit: state.customers.customerForEdit\n  }), shallowEqual);\n  useEffect(() => {\n    // server call for getting Customer by id\n    dispatch(actions.fetchCustomer(id));\n  }, [id, dispatch]); // server request for saving customer\n\n  const saveCustomer = customer => {\n    if (!id) {\n      // server request for creating customer\n      dispatch(actions.createCustomer(customer)).then(() => onHide());\n    } else {\n      // server request for updating customer\n      dispatch(actions.updateCustomer(customer)).then(() => onHide());\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    size: \"lg\",\n    show: show,\n    onHide: onHide,\n    \"aria-labelledby\": \"example-modal-sizes-title-lg\",\n    children: [/*#__PURE__*/_jsxDEV(CustomerEditDialogHeader, {\n      id: id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CustomerEditForm, {\n      saveCustomer: saveCustomer,\n      actionsLoading: actionsLoading,\n      customer: customerForEdit || customersUIProps.initCustomer,\n      onHide: onHide\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CustomerEditDialog, \"+21HxoDrqfo4Nh1gAFQwju0NIFM=\", false, function () {\n  return [useCustomersUIContext, useDispatch, useSelector];\n});\n\n_c = CustomerEditDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomerEditDialog\");","map":{"version":3,"sources":["C:/Users/nisha/OneDrive/Desktop/technogrip/src/app/modules/ECommerce/pages/customers/customer-edit-dialog/CustomerEditDialog.js"],"names":["React","useEffect","useMemo","Modal","shallowEqual","useDispatch","useSelector","actions","CustomerEditDialogHeader","CustomerEditForm","useCustomersUIContext","CustomerEditDialog","id","show","onHide","customersUIContext","customersUIProps","initCustomer","dispatch","actionsLoading","customerForEdit","state","customers","fetchCustomer","saveCustomer","customer","createCustomer","then","updateCustomer"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,QAA0C,OAA1C;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,YAAT,EAAuBC,WAAvB,EAAoCC,WAApC,QAAuD,aAAvD;AACA,OAAO,KAAKC,OAAZ,MAAyB,4CAAzB;AACA,SAASC,wBAAT,QAAyC,4BAAzC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,qBAAT,QAAsC,uBAAtC;;AAEA,OAAO,SAASC,kBAAT,CAA4B;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,IAAN;AAAYC,EAAAA;AAAZ,CAA5B,EAAkD;AAAA;;AACvD;AACA,QAAMC,kBAAkB,GAAGL,qBAAqB,EAAhD;AACA,QAAMM,gBAAgB,GAAGd,OAAO,CAAC,MAAM;AACrC,WAAO;AACLe,MAAAA,YAAY,EAAEF,kBAAkB,CAACE;AAD5B,KAAP;AAGD,GAJ+B,EAI7B,CAACF,kBAAD,CAJ6B,CAAhC,CAHuD,CASvD;;AACA,QAAMG,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAM;AAAEc,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAAsCd,WAAW,CACpDe,KAAD,KAAY;AACVF,IAAAA,cAAc,EAAEE,KAAK,CAACC,SAAN,CAAgBH,cADtB;AAEVC,IAAAA,eAAe,EAAEC,KAAK,CAACC,SAAN,CAAgBF;AAFvB,GAAZ,CADqD,EAKrDhB,YALqD,CAAvD;AAQAH,EAAAA,SAAS,CAAC,MAAM;AACd;AACAiB,IAAAA,QAAQ,CAACX,OAAO,CAACgB,aAAR,CAAsBX,EAAtB,CAAD,CAAR;AACD,GAHQ,EAGN,CAACA,EAAD,EAAKM,QAAL,CAHM,CAAT,CAnBuD,CAwBvD;;AACA,QAAMM,YAAY,GAAIC,QAAD,IAAc;AACjC,QAAI,CAACb,EAAL,EAAS;AACP;AACAM,MAAAA,QAAQ,CAACX,OAAO,CAACmB,cAAR,CAAuBD,QAAvB,CAAD,CAAR,CAA2CE,IAA3C,CAAgD,MAAMb,MAAM,EAA5D;AACD,KAHD,MAGO;AACL;AACAI,MAAAA,QAAQ,CAACX,OAAO,CAACqB,cAAR,CAAuBH,QAAvB,CAAD,CAAR,CAA2CE,IAA3C,CAAgD,MAAMb,MAAM,EAA5D;AACD;AACF,GARD;;AAUA,sBACE,QAAC,KAAD;AACE,IAAA,IAAI,EAAC,IADP;AAEE,IAAA,IAAI,EAAED,IAFR;AAGE,IAAA,MAAM,EAAEC,MAHV;AAIE,uBAAgB,8BAJlB;AAAA,4BAME,QAAC,wBAAD;AAA0B,MAAA,EAAE,EAAEF;AAA9B;AAAA;AAAA;AAAA;AAAA,YANF,eAOE,QAAC,gBAAD;AACE,MAAA,YAAY,EAAEY,YADhB;AAEE,MAAA,cAAc,EAAEL,cAFlB;AAGE,MAAA,QAAQ,EAAEC,eAAe,IAAIJ,gBAAgB,CAACC,YAHhD;AAIE,MAAA,MAAM,EAAEH;AAJV;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAnDeH,kB;UAEaD,qB,EAQVL,W,EAC2BC,W;;;KAX9BK,kB","sourcesContent":["import React, { useEffect, useMemo } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\nimport * as actions from \"../../../_redux/customers/customersActions\";\r\nimport { CustomerEditDialogHeader } from \"./CustomerEditDialogHeader\";\r\nimport { CustomerEditForm } from \"./CustomerEditForm\";\r\nimport { useCustomersUIContext } from \"../CustomersUIContext\";\r\n\r\nexport function CustomerEditDialog({ id, show, onHide }) {\r\n  // Customers UI Context\r\n  const customersUIContext = useCustomersUIContext();\r\n  const customersUIProps = useMemo(() => {\r\n    return {\r\n      initCustomer: customersUIContext.initCustomer,\r\n    };\r\n  }, [customersUIContext]);\r\n\r\n  // Customers Redux state\r\n  const dispatch = useDispatch();\r\n  const { actionsLoading, customerForEdit } = useSelector(\r\n    (state) => ({\r\n      actionsLoading: state.customers.actionsLoading,\r\n      customerForEdit: state.customers.customerForEdit,\r\n    }),\r\n    shallowEqual\r\n  );\r\n\r\n  useEffect(() => {\r\n    // server call for getting Customer by id\r\n    dispatch(actions.fetchCustomer(id));\r\n  }, [id, dispatch]);\r\n\r\n  // server request for saving customer\r\n  const saveCustomer = (customer) => {\r\n    if (!id) {\r\n      // server request for creating customer\r\n      dispatch(actions.createCustomer(customer)).then(() => onHide());\r\n    } else {\r\n      // server request for updating customer\r\n      dispatch(actions.updateCustomer(customer)).then(() => onHide());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      size=\"lg\"\r\n      show={show}\r\n      onHide={onHide}\r\n      aria-labelledby=\"example-modal-sizes-title-lg\"\r\n    >\r\n      <CustomerEditDialogHeader id={id} />\r\n      <CustomerEditForm\r\n        saveCustomer={saveCustomer}\r\n        actionsLoading={actionsLoading}\r\n        customer={customerForEdit || customersUIProps.initCustomer}\r\n        onHide={onHide}\r\n      />\r\n    </Modal>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}